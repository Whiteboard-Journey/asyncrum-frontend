{"version":3,"file":"static/js/108.4f124dd9.chunk.js","mappings":"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","sources":["components/ThemeCustomizer/useThemeCustomizer.ts","layouts/Topbar/NotificationDropdown.tsx","layouts/Topbar/ProfileDropdown.tsx","layouts/Topbar/NotificationData.ts","layouts/Topbar/index.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/removeEventListener.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport {\n  changeLayout,\n  changeLayoutColor,\n  changeLayoutWidth,\n  changeSidebarTheme,\n  changeSidebarType,\n} from 'redux/actions';\nimport * as layoutConstants from 'appConstants';\nimport { useRedux } from 'hooks';\n\nexport default function useThemeCustomizer() {\n  const { dispatch, appSelector } = useRedux();\n\n  const { layoutColor, layoutType, layoutWidth, leftSideBarType, leftSideBarTheme } = appSelector((state) => ({\n    layoutColor: state.Layout.layoutColor,\n    layoutType: state.Layout.layoutType,\n    layoutWidth: state.Layout.layoutWidth,\n    leftSideBarTheme: state.Layout.leftSideBarTheme,\n    leftSideBarType: state.Layout.leftSideBarType,\n  }));\n\n  const [disableLayoutWidth, setDisableLayoutWidth] = useState<boolean>(false);\n  const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\n  const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\n\n  /**\n   * change state based on props changes\n   */\n  const _loadStateFromProps = useCallback(() => {\n    setDisableLayoutWidth(\n      layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED &&\n        layoutType !== layoutConstants.LayoutTypes.LAYOUT_FULL\n    );\n\n    setDisableSidebarTheme(\n      layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL &&\n        layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED\n    );\n    setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n  }, [layoutType]);\n\n  useEffect(() => {\n    _loadStateFromProps();\n  }, [_loadStateFromProps]);\n\n  /**\n   * On layout change\n   */\n  const changeLayoutType = (value: string) => {\n    const layout = value;\n    switch (layout) {\n      case 'topnav':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n        break;\n      case 'detached':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_DETACHED));\n        break;\n      case 'full':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_FULL));\n        break;\n      default:\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n        break;\n    }\n  };\n\n  /**\n   * Change the layout color\n   */\n  const changeLayoutColorScheme = (value: string) => {\n    const mode = value;\n    switch (mode) {\n      case 'dark':\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n        break;\n      default:\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n        break;\n    }\n  };\n\n  /**\n   * Change the width mode\n   */\n  const changeWidthMode = (value: string) => {\n    const mode = value;\n\n    switch (mode) {\n      case 'boxed':\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n        break;\n      default:\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n        break;\n    }\n  };\n\n  /**\n   * Changes the theme\n   */\n  const changeLeftSidebarTheme = (value: string) => {\n    const theme = value;\n    switch (theme) {\n      case 'default':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT));\n        break;\n      case 'light':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n        break;\n      default:\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n        break;\n    }\n  };\n\n  /**\n   * Change the leftsiderbar type\n   */\n  const changeLeftSiderbarType = (value: string) => {\n    const type = value;\n    switch (type) {\n      case 'condensed':\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\n        break;\n      case 'scrollable':\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_SCROLLABLE));\n        break;\n      default:\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\n        break;\n    }\n  };\n\n  /**\n   * Reset everything\n   */\n  const reset = () => {\n    changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\n    changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n    changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n    changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT);\n    changeLeftSiderbarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED);\n  };\n\n  return {\n    layoutColor,\n    layoutType,\n    layoutWidth,\n    leftSideBarType,\n    leftSideBarTheme,\n    disableLayoutWidth,\n    disableSidebarTheme,\n    disableSidebarType,\n    changeLayoutType,\n    changeLayoutColorScheme,\n    changeWidthMode,\n    changeLeftSidebarTheme,\n    changeLeftSiderbarType,\n    reset,\n  };\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown } from 'react-bootstrap';\nimport SimpleBar from 'simplebar-react';\nimport classNames from 'classnames';\nimport { NotificationItem } from '../types';\nimport { useToggle, useRedux } from 'hooks';\n\n// notifiaction continer styles\nconst notificationShowContainerStyle = {\n  maxHeight: '300px',\n};\n\ntype NotificationDropdownProps = {\n  notifications: Array<NotificationItem>;\n};\n\nconst NotificationDropdown = ({ notifications }: NotificationDropdownProps) => {\n  const { appSelector } = useRedux();\n\n  const { user } = appSelector((state) => ({\n    user: state.Auth.user,\n  }));\n  const [isOpen, toggleDropdown] = useToggle();\n  const [clicked, setClicked] = useState<boolean>(false);\n\n  return (\n    <Dropdown show={isOpen} onToggle={toggleDropdown}>\n      <Dropdown.Toggle\n        variant=\"link\"\n        id=\"dropdown-notification\"\n        as={Link}\n        to=\"#\"\n        onClick={() => {\n          toggleDropdown();\n          setClicked(true);\n        }}\n        className=\"nav-link dropdown-toggle arrow-none\">\n        <i className=\"mdi mdi-bell-outline noti-icon\"></i>\n        {!clicked && user.fullname === 'Ned' ? <span className=\"noti-icon-badge\"></span> : <span></span>}\n        {/* {notifications.length != 0 ? <span className=\"noti-icon-badge\"></span> : <span></span>} */}\n      </Dropdown.Toggle>\n      <Dropdown.Menu className=\"dropdown-menu-animated dropdown-lg\" align=\"end\">\n        <div onClick={toggleDropdown}>\n          <div className=\"dropdown-item noti-title px-3\">\n            <h5 className=\"m-0\">\n              <span className=\"float-end\">\n                <Link to=\"/notifications\" className=\"text-dark\">\n                  <small>Clear All</small>\n                </Link>\n              </span>\n              Notification\n            </h5>\n          </div>\n          <SimpleBar className=\"px-3\" style={notificationShowContainerStyle}>\n            {notifications.map((item, index) => {\n              return (\n                <React.Fragment key={index.toString()}>\n                  <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\n                  {(item.messages || []).map((message, index) => {\n                    return (\n                      <Dropdown.Item\n                        key={index + '-noti'}\n                        className={classNames(\n                          'p-0 notify-item card shadow-none mb-2',\n                          message.isRead ? 'read-noti' : 'unread-noti'\n                        )}>\n                        <Card.Body>\n                          <span className=\"float-end noti-close-btn text-muted\">\n                            <i className=\"mdi mdi-close\"></i>\n                          </span>\n                          <div className=\"d-flex align-items-center\">\n                            <div className=\"flex-shrink-0\">\n                              <div className={classNames('notify-icon', message.variant && 'bg-' + message.variant)}>\n                                {message.avatar ? (\n                                  <img src={message.avatar} className=\"img-fluid rounded-circle\" alt=\"\" />\n                                ) : (\n                                  <i className={message.icon}></i>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex-grow-1 text-truncate ms-2\">\n                              <h5 className=\"noti-item-title fw-semibold font-14\">\n                                {message.title}{' '}\n                                {message.time && <small className=\"fw-normal text-muted ms-1\">{message.time}</small>}\n                              </h5>\n                              <small className=\"noti-item-subtitle text-muted\">{message.subText}</small>\n                            </div>\n                          </div>\n                        </Card.Body>\n                      </Dropdown.Item>\n                    );\n                  })}\n                </React.Fragment>\n              );\n            })}\n\n            {/* <div className=\"text-center\">\n              <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\n            </div> */}\n          </SimpleBar>\n\n          <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\n            View All\n          </Dropdown.Item>\n        </div>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default NotificationDropdown;\n","import { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\n\ntype ProfileDropdownProps = {\n  userImage: string;\n  username: string;\n  userTitle?: string;\n};\n\nconst ProfileDropdown = ({ userTitle, username, userImage }: ProfileDropdownProps) => {\n  return (\n    <Dropdown>\n      <Dropdown.Toggle\n        variant=\"link\"\n        id=\"dropdown-profile\"\n        as={Link}\n        to=\"/settings/user\"\n        className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\n      >\n        <span className=\"account-user-avatar\">\n          <img src={userImage} className=\"rounded-circle\" alt=\"user\" referrerPolicy=\"no-referrer\" />\n        </span>\n        <span>\n          <span className=\"account-user-name\">{username}</span>\n          <span className=\"account-position\">{userTitle}</span>\n        </span>\n      </Dropdown.Toggle>\n    </Dropdown>\n  );\n};\n\nexport default ProfileDropdown;\n","import { NotificationItem, Message } from '../types';\n\nconst notifications:NotificationItem[] = []\n\nconst data = {\n    \"from\": \"586881315432\",\n    \"messageId\": \"22705b39-2d85-4112-9608-ebbed3fe141b\",\n    \"notification\": {\n        \"title\": \"Daily Scrum Mention\",\n        \"body\": \"[Kevin Park] has mentioned you in [Whiteboard Journey] team! Please check your team's daily scrum for more information!\",\n        \"image\": \"https://wbj-media.s3.ap-northeast-2.amazonaws.com/assets/asyncrum-logo-small.png\"\n    }\n}\n\nconst title: string = data.notification.title;\nconst body: string = data.notification.body;\nconst message: Message = {\nid: 1,\ntitle: title,\nsubText: body,\ntime: '1 min ago',\nicon: 'mdi mdi-comment-account-outline',\nvariant: 'primary',\nisRead: true,\n};\n\nconst messages: Message[] = [];\nmessages.push(message);\n\nconst notification: NotificationItem = { day: 'Today', messages: messages };\nnotifications.push(notification);\n\n\nexport default notifications;","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { changeSidebarType } from 'redux/actions';\nimport * as layoutConstants from 'appConstants';\nimport { useRedux, useToggle, useViewport } from 'hooks';\nimport NotificationDropdown from './NotificationDropdown';\nimport ProfileDropdown from './ProfileDropdown';\nimport logoSm from 'assets/images/asyncrum-logo-white-small.png';\nimport logo from 'assets/images/asyncrum-logo-white.png';\nimport { useEffect, useState } from 'react';\nimport { getFirebaseToken, onMessageListener } from './FirebaseConfig';\nimport { NotificationItem, Message } from '../types';\nimport useThemeCustomizer from 'components/ThemeCustomizer/useThemeCustomizer';\nimport { Form } from 'react-bootstrap';\nimport notifications from './NotificationData';\n\ntype TopbarProps = {\n  hideLogo?: boolean;\n  navCssClasses?: string;\n  openLeftMenuCallBack?: () => void;\n  topbarDark?: boolean;\n};\n\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps) => {\n  const { layoutColor, changeLayoutColorScheme } = useThemeCustomizer();\n  const { dispatch, appSelector } = useRedux();\n  const { width } = useViewport();\n  const [isMenuOpened, toggleMenu] = useToggle();\n  const [isTokenFound, setTokenFound] = useState(false);\n  // const [notifications, setNotifications] = useState<NotificationItem[]>([]);\n\n  const { user } = appSelector((state) => ({\n    user: state.Auth.user,\n  }));\n\n  // useEffect(() => {\n  //   getFirebaseToken(setTokenFound);\n  // }, []);\n\n  // onMessageListener()\n  //   .then((payload: any) => {\n  //     console.log(payload);\n\n  //     const title: string = payload.notification.title;\n  //     const body: string = payload.notification.body;\n  //     const message: Message = {\n  //       id: 1,\n  //       title: title,\n  //       subText: body,\n  //       time: '1 min ago',\n  //       icon: 'mdi mdi-comment-account-outline',\n  //       variant: 'primary',\n  //       isRead: true,\n  //     };\n\n  //     const messages: Message[] = [];\n  //     messages.push(message);\n\n  //     const notification: NotificationItem = { day: 'Today', messages: messages };\n  //     notifications.push(notification);\n\n  //     setNotifications(notifications);\n  //   })\n  //   .catch((err) => console.log('failed: ', err));\n\n  const containerCssClasses = !hideLogo ? 'container-fluid' : '';\n\n  const { layoutType, leftSideBarType } = appSelector((state) => ({\n    layoutType: state.Layout.layoutType,\n    leftSideBarType: state.Layout.leftSideBarType,\n  }));\n\n  /**\n   * Toggle the leftmenu when having mobile screen\n   */\n  const handleLeftMenuCallBack = () => {\n    toggleMenu();\n    if (openLeftMenuCallBack) openLeftMenuCallBack();\n\n    switch (layoutType) {\n      case layoutConstants.LayoutTypes.LAYOUT_VERTICAL:\n        if (width >= 768) {\n          if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\n            dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\n          if (leftSideBarType === 'condensed')\n            dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\n        }\n        break;\n\n      case layoutConstants.LayoutTypes.LAYOUT_FULL:\n        if (document.body) {\n          document.body.classList.toggle('hide-menu');\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className={classNames('navbar-custom', navCssClasses)}>\n      <div className={containerCssClasses}>\n        {!hideLogo && (\n          <Link to=\"/\" className=\"topnav-logo\">\n            <span className=\"topnav-logo-lg\">\n              <img src={logo} alt=\"logo\" height=\"16\" />\n            </span>\n            <span className=\"topnav-logo-sm\">\n              <img src={logoSm} alt=\"logo\" height=\"16\" />\n            </span>\n          </Link>\n        )}\n\n        <ul className=\"list-unstyled topbar-menu float-end mb-0\">\n          <li className=\"nav-link notification-list\">\n            <Form>\n              <i className={classNames('uil uil-sun noti-icon', layoutColor === 'light' ? 'text-warning' : '')}></i>\n              <Form.Check\n                className=\"d-inline-block\"\n                type=\"switch\"\n                id=\"custom-switch\"\n                checked={layoutColor === 'light' ? false : true}\n                onChange={(e) => {\n                  changeLayoutColorScheme(layoutColor === 'light' ? 'dark' : 'light');\n                }}\n              />\n              <i className={classNames('uil uil-moon noti-icon', layoutColor === 'dark' ? 'text-warning' : '')}></i>\n            </Form>\n          </li>\n          <li className=\"dropdown notification-list\">\n            <NotificationDropdown notifications={user.fullname === 'Ned' ? notifications! : []} />\n          </li>\n          <li className=\"dropdown notification-list\">\n            <ProfileDropdown userImage={user.profileImageUrl} username={user.fullname} userTitle={'Developer'} />\n          </li>\n        </ul>\n\n        {/* toggle for vertical layout */}\n        {(layoutType === layoutConstants.LayoutTypes.LAYOUT_VERTICAL ||\n          layoutType === layoutConstants.LayoutTypes.LAYOUT_FULL) && (\n          <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\n            <i className=\"mdi mdi-menu\" />\n          </button>\n        )}\n\n        {/* toggle for horizontal layout */}\n        {layoutType === layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL && (\n          <Link to=\"#\" className={classNames('navbar-toggle', { open: isMenuOpened })} onClick={handleLeftMenuCallBack}>\n            <div className=\"lines\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </Link>\n        )}\n\n        {/* toggle for detached layout */}\n        {layoutType === layoutConstants.LayoutTypes.LAYOUT_DETACHED && (\n          <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\n            <div className=\"lines\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </Link>\n        )}\n        {/* <TopbarSearch options={searchOptions} /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Topbar;\n","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;"],"names":["useThemeCustomizer","useRedux","dispatch","appSelector","state","layoutColor","Layout","layoutType","layoutWidth","leftSideBarTheme","leftSideBarType","useState","disableLayoutWidth","setDisableLayoutWidth","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","_loadStateFromProps","useCallback","layoutConstants","useEffect","changeLayoutType","value","changeLayout","changeLayoutColorScheme","changeLayoutColor","changeWidthMode","changeLayoutWidth","changeLeftSidebarTheme","changeSidebarTheme","changeLeftSiderbarType","changeSidebarType","reset","notificationShowContainerStyle","maxHeight","notifications","user","Auth","useToggle","isOpen","toggleDropdown","clicked","setClicked","Dropdown","show","onToggle","variant","id","as","Link","to","onClick","className","fullname","align","style","map","item","index","day","messages","message","classNames","isRead","Card","avatar","src","alt","icon","title","time","subText","toString","userTitle","username","userImage","referrerPolicy","data","body","push","notification","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","width","useViewport","isMenuOpened","toggleMenu","containerCssClasses","handleLeftMenuCallBack","document","classList","toggle","logo","height","logoSm","Form","type","checked","onChange","e","profileImageUrl","open","toFnRef","ref","current","refA","refB","useMemo","a","b","mergeRefs","optionsSupported","onceSupported","options","passive","once","canUseDOM","window","addEventListener","removeEventListener","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","this","call","createElement","ownerDocument"],"sourceRoot":""}