{"version":3,"file":"static/js/108.d3804de2.chunk.js","mappings":"qMAWe,SAASA,IACtB,OAAkCC,EAAAA,EAAAA,MAA1BC,EAAR,EAAQA,SAER,GAAoFC,EAFpF,EAAkBA,cAE8E,SAACC,GAAD,MAAY,CAC1GC,YAAaD,EAAME,OAAOD,YAC1BE,WAAYH,EAAME,OAAOC,WACzBC,YAAaJ,EAAME,OAAOE,YAC1BC,iBAAkBL,EAAME,OAAOG,iBAC/BC,gBAAiBN,EAAME,OAAOI,oBALxBL,EAAR,EAAQA,YAAaE,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,YAAaE,EAA9C,EAA8CA,gBAAiBD,EAA/D,EAA+DA,iBAQ/D,GAAoDE,EAAAA,EAAAA,WAAkB,GAAtE,eAAOC,EAAP,KAA2BC,EAA3B,KACA,GAAsDF,EAAAA,EAAAA,WAAkB,GAAxE,eAAOG,EAAP,KAA4BC,EAA5B,KACA,GAAoDJ,EAAAA,EAAAA,WAAkB,GAAtE,eAAOK,EAAP,KAA2BC,EAA3B,KAKMC,GAAsBC,EAAAA,EAAAA,cAAY,WACtCN,EACEN,IAAea,EAAAA,GAAAA,iBACbb,IAAea,EAAAA,GAAAA,aAGnBL,EACER,IAAea,EAAAA,GAAAA,mBACbb,IAAea,EAAAA,GAAAA,iBAEnBH,EAAsBV,IAAea,EAAAA,GAAAA,qBACpC,CAACb,KAEJc,EAAAA,EAAAA,YAAU,WACRH,MACC,CAACA,IAKJ,IAAMI,EAAmB,SAACC,GAExB,OADeA,GAEb,IAAK,SACHrB,GAASsB,EAAAA,EAAAA,IAAaJ,EAAAA,GAAAA,oBACtB,MACF,IAAK,WACHlB,GAASsB,EAAAA,EAAAA,IAAaJ,EAAAA,GAAAA,kBACtB,MACF,IAAK,OACHlB,GAASsB,EAAAA,EAAAA,IAAaJ,EAAAA,GAAAA,cACtB,MACF,QACElB,GAASsB,EAAAA,EAAAA,IAAaJ,EAAAA,GAAAA,oBAQtBK,EAA0B,SAACF,GAE/B,GACO,SAFMA,EAGTrB,GAASwB,EAAAA,EAAAA,IAAkBN,EAAAA,GAAAA,yBAG3BlB,GAASwB,EAAAA,EAAAA,IAAkBN,EAAAA,GAAAA,sBAQ3BO,EAAkB,SAACJ,GAGvB,GACO,UAHMA,EAITrB,GAAS0B,EAAAA,EAAAA,IAAkBR,EAAAA,GAAAA,0BAG3BlB,GAAS0B,EAAAA,EAAAA,IAAkBR,EAAAA,GAAAA,sBAQ3BS,EAAyB,SAACN,GAE9B,OADcA,GAEZ,IAAK,UACHrB,GAAS4B,EAAAA,EAAAA,IAAmBV,EAAAA,GAAAA,6BAC5B,MACF,IAAK,QACHlB,GAAS4B,EAAAA,EAAAA,IAAmBV,EAAAA,GAAAA,2BAC5B,MACF,QACElB,GAAS4B,EAAAA,EAAAA,IAAmBV,EAAAA,GAAAA,4BAQ5BW,EAAyB,SAACR,GAE9B,OADaA,GAEX,IAAK,YACHrB,GAAS8B,EAAAA,EAAAA,IAAkBZ,EAAAA,GAAAA,8BAC3B,MACF,IAAK,aACHlB,GAAS8B,EAAAA,EAAAA,IAAkBZ,EAAAA,GAAAA,+BAC3B,MACF,QACElB,GAAS8B,EAAAA,EAAAA,IAAkBZ,EAAAA,GAAAA,4BAgBjC,MAAO,CACLf,YAAAA,EACAE,WAAAA,EACAC,YAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAG,mBAAAA,EACAE,oBAAAA,EACAE,mBAAAA,EACAM,iBAAAA,EACAG,wBAAAA,EACAE,gBAAAA,EACAE,uBAAAA,EACAE,uBAAAA,EACAE,MAtBY,WACZX,EAAiBF,EAAAA,GAAAA,iBACjBK,EAAwBL,EAAAA,GAAAA,oBACxBO,EAAgBP,EAAAA,GAAAA,oBAChBS,EAAuBT,EAAAA,GAAAA,4BACvBW,EAAuBX,EAAAA,GAAAA,6B,uMCrIrBc,EAAiC,CACrCC,UAAW,SAkGb,EA3F6B,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,cAC9B,GAAiCC,EAAAA,EAAAA,MAAjC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8B5B,EAAAA,EAAAA,WAAkB,GAAhD,eAAO6B,EAAP,KAAgBC,EAAhB,KAEA,OACE,UAACC,EAAA,EAAD,CAAUC,KAAML,EAAQM,SAAUL,EAAlC,WACE,UAACG,EAAA,SAAD,CACEG,QAAQ,OACRC,GAAG,wBACHC,GAAIC,EAAAA,GACJC,GAAG,IACHC,QAAS,WACPX,IACAE,GAAW,IAEbU,UAAU,sCATZ,WAWE,cAAGA,UAAU,mCACXX,GAAsD,qBAA5C,iBAAMW,UAAU,wBAG9B,SAACT,EAAA,OAAD,CAAeS,UAAU,qCAAqCC,MAAM,MAApE,UACE,iBAAKF,QAASX,EAAd,WACE,gBAAKY,UAAU,gCAAf,UACE,gBAAIA,UAAU,MAAd,WACE,iBAAMA,UAAU,YAAhB,UACE,SAAC,KAAD,CAAMF,GAAG,iBAAiBE,UAAU,YAApC,UACE,6CAHN,qBASF,SAAC,IAAD,CAAWA,UAAU,OAAOE,MAAOnB,EAAnC,SACGE,EAAckB,KAAI,SAACC,EAAMC,GACxB,OACE,UAAC,WAAD,YACE,eAAIL,UAAU,oCAAd,SAAmDI,EAAKE,OACtDF,EAAKG,UAAY,IAAIJ,KAAI,SAACK,EAASH,GACnC,OACE,SAACd,EAAA,OAAD,CAEES,UAAWS,GAAAA,CACT,wCACAD,EAAQE,OAAS,YAAc,eAJnC,UAOE,UAACC,EAAA,OAAD,YACE,iBAAMX,UAAU,sCAAhB,UACE,cAAGA,UAAU,qBAEf,iBAAKA,UAAU,4BAAf,WACE,gBAAKA,UAAU,gBAAf,UACE,gBAAKA,UAAWS,GAAAA,CAAW,cAAeD,EAAQd,SAAW,MAAQc,EAAQd,SAA7E,SACGc,EAAQI,QACP,gBAAKC,IAAKL,EAAQI,OAAQZ,UAAU,2BAA2Bc,IAAI,MAEnE,cAAGd,UAAWQ,EAAQO,YAI5B,iBAAKf,UAAU,iCAAf,WACE,gBAAIA,UAAU,sCAAd,UACGQ,EAAQQ,MAAO,IACfR,EAAQS,OAAQ,kBAAOjB,UAAU,4BAAjB,SAA8CQ,EAAQS,WAEzE,kBAAOjB,UAAU,gCAAjB,SAAkDQ,EAAQU,oBAzB3Db,EAAQ,cALAA,EAAMc,kBA8CjC,SAAC5B,EAAA,OAAD,CAAeS,UAAU,oEAAzB,+BCpEV,EAtBwB,SAAC,GAA8D,IAA5DoB,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,UAC9C,OACE,SAAC/B,EAAA,EAAD,WACE,UAACA,EAAA,SAAD,CACEG,QAAQ,OACRC,GAAG,mBACHC,GAAIC,EAAAA,GACJC,GAAG,iBACHE,UAAU,oDALZ,WAOE,iBAAMA,UAAU,sBAAhB,UACE,gBAAKa,IAAKS,EAAWtB,UAAU,iBAAiBc,IAAI,OAAOS,eAAe,mBAE5E,6BACE,iBAAMvB,UAAU,oBAAhB,SAAqCqB,KACrC,iBAAMrB,UAAU,mBAAhB,SAAoCoB,a,4CCtBxCnC,EAAmC,GAEnCuC,EAGc,CACZ,MAAS,sBACT,KAAQ,0HACR,MAAS,oFAMXhB,EAAmB,CACzBb,GAAI,EACJqB,MAJsBQ,EAAkBR,MAKxCE,QAJqBM,EAAkBC,KAKvCR,KAAM,YACNF,KAAM,kCACNrB,QAAS,UACTgB,QAAQ,GAGFH,EAAsB,GAC5BA,EAASmB,KAAKlB,GAEd,IAAMmB,EAAiC,CAAErB,IAAK,QAASC,SAAUA,GACjEtB,EAAcyC,KAAKC,GAGnB,QC2IA,EArJe,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,SAAUC,EAAmE,EAAnEA,cAAeC,EAAoD,EAApDA,qBACzC,GAD6F,EAA9BC,YACdlF,EAAAA,EAAAA,MAAzCK,EAAR,EAAQA,YAAaoB,EAArB,EAAqBA,wBACrB,GAAkCxB,EAAAA,EAAAA,MAA1BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YACVgF,GAAUC,EAAAA,EAAAA,MAAVD,MACR,GAAmC9C,EAAAA,EAAAA,MAAnC,eAAOgD,EAAP,KAAqBC,EAArB,KACA,GAAsC3E,EAAAA,EAAAA,WAAS,GAA/C,eAGQ4E,GAHR,UAGiBpF,GAAY,SAACC,GAAD,MAAY,CACvCmF,KAAMnF,EAAMoF,KAAKD,SADXA,MAkCFE,EAAuBV,EAA+B,GAApB,kBAExC,EAAwC5E,GAAY,SAACC,GAAD,MAAY,CAC9DG,WAAYH,EAAME,OAAOC,WACzBG,gBAAiBN,EAAME,OAAOI,oBAFxBH,EAAR,EAAQA,WAAYG,EAApB,EAAoBA,gBAQdgF,EAAyB,WAI7B,OAHAJ,IACIL,GAAsBA,IAElB1E,GACN,KAAKa,EAAAA,GAAAA,gBACC+D,GAAS,MACa,UAApBzE,GAAmD,eAApBA,GACjCR,GAAS8B,EAAAA,EAAAA,IAAkBZ,EAAAA,GAAAA,8BACL,cAApBV,GACFR,GAAS8B,EAAAA,EAAAA,IAAkBZ,EAAAA,GAAAA,2BAE/B,MAEF,KAAKA,EAAAA,GAAAA,YACCuE,SAASf,MACXe,SAASf,KAAKgB,UAAUC,OAAO,eAQvC,OACE,gBAAK1C,UAAWS,GAAAA,CAAW,gBAAiBoB,GAA5C,UACE,iBAAK7B,UAAWsC,EAAhB,WACIV,IACA,UAAC,KAAD,CAAM9B,GAAG,IAAIE,UAAU,cAAvB,WACE,iBAAMA,UAAU,iBAAhB,UACE,gBAAKa,IAAK8B,EAAM7B,IAAI,OAAO8B,OAAO,UAEpC,iBAAM5C,UAAU,iBAAhB,UACE,gBAAKa,IAAKgC,EAAQ/B,IAAI,OAAO8B,OAAO,aAK1C,gBAAI5C,UAAU,2CAAd,WACE,eAAIA,UAAU,6BAAd,UACE,UAAC8C,EAAA,EAAD,YACE,cAAG9C,UAAWS,GAAAA,CAAW,wBAAyC,UAAhBvD,EAA0B,eAAiB,OAC7F,SAAC4F,EAAA,QAAD,CACE9C,UAAU,iBACV+C,KAAK,SACLpD,GAAG,gBACHqD,QAAyB,UAAhB9F,EACT+F,SAAU,SAACC,GACT5E,EAAwC,UAAhBpB,EAA0B,OAAS,aAG/D,cAAG8C,UAAWS,GAAAA,CAAW,yBAA0C,SAAhBvD,EAAyB,eAAiB,YAGjG,eAAI8C,UAAU,6BAAd,UACE,SAAC,EAAD,CAAsBf,cAAeA,OAEvC,eAAIe,UAAU,6BAAd,UACE,SAAC,EAAD,CAAiBsB,UAAWc,EAAKe,gBAAiB9B,SAAUe,EAAKgB,SAAUhC,UAAW,oBAKxFhE,IAAea,EAAAA,GAAAA,iBACfb,IAAea,EAAAA,GAAAA,eACf,mBAAQ+B,UAAU,+BAA+BD,QAASwC,EAA1D,UACE,cAAGvC,UAAU,mBAKhB5C,IAAea,EAAAA,GAAAA,oBACd,SAAC,KAAD,CAAM6B,GAAG,IAAIE,UAAWS,GAAAA,CAAW,gBAAiB,CAAE4C,KAAMnB,IAAiBnC,QAASwC,EAAtF,UACE,iBAAKvC,UAAU,QAAf,WACE,qBACA,qBACA,yBAML5C,IAAea,EAAAA,GAAAA,kBACd,SAAC,KAAD,CAAM6B,GAAG,IAAIE,UAAU,iCAAiCD,QAASwC,EAAjE,UACE,iBAAKvC,UAAU,QAAf,WACE,qBACA,qBACA,gC,qCChKVsD,EAAU,SAAiBC,GAC7B,OAAQA,GAAsB,oBAARA,EAA2B,SAAUnF,GACzDmF,EAAIC,QAAUpF,GAD2BmF,GAoC7C,IANA,SAAuBE,EAAMC,GAC3B,OAAOC,EAAAA,EAAAA,UAAQ,WACb,OA3BG,SAAmBF,EAAMC,GAC9B,IAAIE,EAAIN,EAAQG,GACZI,EAAIP,EAAQI,GAChB,OAAO,SAAUtF,GACXwF,GAAGA,EAAExF,GACLyF,GAAGA,EAAEzF,IAsBF0F,CAAUL,EAAMC,KACtB,CAACD,EAAMC,M,oCClCDK,GAAmB,EACnBC,GAAgB,EAE3B,IACE,IAAIC,EAAU,CACRC,cACF,OAAOH,GAAmB,GAGxBI,WAEF,OAAOH,EAAgBD,GAAmB,IAK1CK,EAAAA,IACFC,OAAOC,iBAAiB,OAAQL,EAASA,GACzCI,OAAOE,oBAAoB,OAAQN,GAAS,IAE9C,MAAOf,IAiCT,KArBA,SAA0BsB,EAAMC,EAAWC,EAAST,GAClD,GAAIA,GAA8B,mBAAZA,IAA0BD,EAAe,CAC7D,IAAIG,EAAOF,EAAQE,KACfQ,EAAUV,EAAQU,QAClBC,EAAiBF,GAEhBV,GAAiBG,IACpBS,EAAiBF,EAAQG,QAAU,SAASC,EAAYC,GACtDC,KAAKT,oBAAoBE,EAAWK,EAAaH,GACjDD,EAAQO,KAAKD,KAAMD,IAGrBL,EAAQG,OAASD,GAGnBJ,EAAKF,iBAAiBG,EAAWG,EAAgBb,EAAmBE,EAAUU,GAGhFH,EAAKF,iBAAiBG,EAAWC,EAAST,K,oBCpD5C,MAAoC,qBAAXI,SAA0BA,OAAO7B,WAAY6B,OAAO7B,SAAS0C,gB,+CCUtF,IAPA,SAAgBV,EAAMC,EAAWC,EAAST,GAExC,OADAK,EAAAA,EAAAA,IAAiBE,EAAMC,EAAWC,EAAST,GACpC,YACLM,EAAAA,EAAAA,GAAoBC,EAAMC,EAAWC,EAAST,M,sBCDnC,SAASkB,EAAcX,GACpC,OAAOA,GAAQA,EAAKW,eAAiB3C,S,qDCWvC,IATA,SAA6BgC,EAAMC,EAAWC,EAAST,GACrD,IAAIU,EAAUV,GAA8B,mBAAZA,EAAwBA,EAAQU,QAAUV,EAC1EO,EAAKD,oBAAoBE,EAAWC,EAASC,GAEzCD,EAAQG,QACVL,EAAKD,oBAAoBE,EAAWC,EAAQG,OAAQF,K","sources":["components/ThemeCustomizer/useThemeCustomizer.ts","layouts/Topbar/NotificationDropdown.tsx","layouts/Topbar/ProfileDropdown.tsx","layouts/Topbar/NotificationData.ts","layouts/Topbar/index.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/removeEventListener.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport {\n  changeLayout,\n  changeLayoutColor,\n  changeLayoutWidth,\n  changeSidebarTheme,\n  changeSidebarType,\n} from 'redux/actions';\nimport * as layoutConstants from 'appConstants';\nimport { useRedux } from 'hooks';\n\nexport default function useThemeCustomizer() {\n  const { dispatch, appSelector } = useRedux();\n\n  const { layoutColor, layoutType, layoutWidth, leftSideBarType, leftSideBarTheme } = appSelector((state) => ({\n    layoutColor: state.Layout.layoutColor,\n    layoutType: state.Layout.layoutType,\n    layoutWidth: state.Layout.layoutWidth,\n    leftSideBarTheme: state.Layout.leftSideBarTheme,\n    leftSideBarType: state.Layout.leftSideBarType,\n  }));\n\n  const [disableLayoutWidth, setDisableLayoutWidth] = useState<boolean>(false);\n  const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\n  const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\n\n  /**\n   * change state based on props changes\n   */\n  const _loadStateFromProps = useCallback(() => {\n    setDisableLayoutWidth(\n      layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED &&\n        layoutType !== layoutConstants.LayoutTypes.LAYOUT_FULL\n    );\n\n    setDisableSidebarTheme(\n      layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL &&\n        layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED\n    );\n    setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n  }, [layoutType]);\n\n  useEffect(() => {\n    _loadStateFromProps();\n  }, [_loadStateFromProps]);\n\n  /**\n   * On layout change\n   */\n  const changeLayoutType = (value: string) => {\n    const layout = value;\n    switch (layout) {\n      case 'topnav':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n        break;\n      case 'detached':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_DETACHED));\n        break;\n      case 'full':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_FULL));\n        break;\n      default:\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n        break;\n    }\n  };\n\n  /**\n   * Change the layout color\n   */\n  const changeLayoutColorScheme = (value: string) => {\n    const mode = value;\n    switch (mode) {\n      case 'dark':\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n        break;\n      default:\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n        break;\n    }\n  };\n\n  /**\n   * Change the width mode\n   */\n  const changeWidthMode = (value: string) => {\n    const mode = value;\n\n    switch (mode) {\n      case 'boxed':\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n        break;\n      default:\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n        break;\n    }\n  };\n\n  /**\n   * Changes the theme\n   */\n  const changeLeftSidebarTheme = (value: string) => {\n    const theme = value;\n    switch (theme) {\n      case 'default':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT));\n        break;\n      case 'light':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n        break;\n      default:\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n        break;\n    }\n  };\n\n  /**\n   * Change the leftsiderbar type\n   */\n  const changeLeftSiderbarType = (value: string) => {\n    const type = value;\n    switch (type) {\n      case 'condensed':\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\n        break;\n      case 'scrollable':\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_SCROLLABLE));\n        break;\n      default:\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\n        break;\n    }\n  };\n\n  /**\n   * Reset everything\n   */\n  const reset = () => {\n    changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\n    changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n    changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n    changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT);\n    changeLeftSiderbarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED);\n  };\n\n  return {\n    layoutColor,\n    layoutType,\n    layoutWidth,\n    leftSideBarType,\n    leftSideBarTheme,\n    disableLayoutWidth,\n    disableSidebarTheme,\n    disableSidebarType,\n    changeLayoutType,\n    changeLayoutColorScheme,\n    changeWidthMode,\n    changeLeftSidebarTheme,\n    changeLeftSiderbarType,\n    reset,\n  };\n}\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Dropdown } from 'react-bootstrap';\r\nimport SimpleBar from 'simplebar-react';\r\nimport classNames from 'classnames';\r\nimport { NotificationItem } from '../types';\r\nimport { useToggle } from 'hooks';\r\n\r\n// notifiaction continer styles\r\nconst notificationShowContainerStyle = {\r\n  maxHeight: '300px',\r\n};\r\n\r\ntype NotificationDropdownProps = {\r\n  notifications: Array<NotificationItem>;\r\n};\r\n\r\nconst NotificationDropdown = ({ notifications }: NotificationDropdownProps) => {\r\n  const [isOpen, toggleDropdown] = useToggle();\r\n  const [clicked, setClicked] = useState<boolean>(false);\r\n\r\n  return (\r\n    <Dropdown show={isOpen} onToggle={toggleDropdown}>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-notification\"\r\n        as={Link}\r\n        to=\"#\"\r\n        onClick={() => {\r\n          toggleDropdown();\r\n          setClicked(true);\r\n        }}\r\n        className=\"nav-link dropdown-toggle arrow-none\"\r\n      >\r\n        <i className=\"mdi mdi-bell-outline noti-icon\"></i>\r\n        {!clicked ? <span className=\"noti-icon-badge\"></span> : <span></span>}\r\n        {/* {notifications.length != 0 ? <span className=\"noti-icon-badge\"></span> : <span></span>} */}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu className=\"dropdown-menu-animated dropdown-lg\" align=\"end\">\r\n        <div onClick={toggleDropdown}>\r\n          <div className=\"dropdown-item noti-title px-3\">\r\n            <h5 className=\"m-0\">\r\n              <span className=\"float-end\">\r\n                <Link to=\"/notifications\" className=\"text-dark\">\r\n                  <small>Clear All</small>\r\n                </Link>\r\n              </span>\r\n              Notification\r\n            </h5>\r\n          </div>\r\n          <SimpleBar className=\"px-3\" style={notificationShowContainerStyle}>\r\n            {notifications.map((item, index) => {\r\n              return (\r\n                <React.Fragment key={index.toString()}>\r\n                  <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\r\n                  {(item.messages || []).map((message, index) => {\r\n                    return (\r\n                      <Dropdown.Item\r\n                        key={index + '-noti'}\r\n                        className={classNames(\r\n                          'p-0 notify-item card shadow-none mb-2',\r\n                          message.isRead ? 'read-noti' : 'unread-noti'\r\n                        )}\r\n                      >\r\n                        <Card.Body>\r\n                          <span className=\"float-end noti-close-btn text-muted\">\r\n                            <i className=\"mdi mdi-close\"></i>\r\n                          </span>\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <div className=\"flex-shrink-0\">\r\n                              <div className={classNames('notify-icon', message.variant && 'bg-' + message.variant)}>\r\n                                {message.avatar ? (\r\n                                  <img src={message.avatar} className=\"img-fluid rounded-circle\" alt=\"\" />\r\n                                ) : (\r\n                                  <i className={message.icon}></i>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"flex-grow-1 text-truncate ms-2\">\r\n                              <h5 className=\"noti-item-title fw-semibold font-14\">\r\n                                {message.title}{' '}\r\n                                {message.time && <small className=\"fw-normal text-muted ms-1\">{message.time}</small>}\r\n                              </h5>\r\n                              <small className=\"noti-item-subtitle text-muted\">{message.subText}</small>\r\n                            </div>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Dropdown.Item>\r\n                    );\r\n                  })}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n\r\n            {/* <div className=\"text-center\">\r\n              <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\r\n            </div> */}\r\n          </SimpleBar>\r\n\r\n          <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\r\n            View All\r\n          </Dropdown.Item>\r\n        </div>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default NotificationDropdown;\r\n","import { Link } from 'react-router-dom';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\ntype ProfileDropdownProps = {\r\n  userImage: string;\r\n  username: string;\r\n  userTitle?: string;\r\n};\r\n\r\nconst ProfileDropdown = ({ userTitle, username, userImage }: ProfileDropdownProps) => {\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-profile\"\r\n        as={Link}\r\n        to=\"/settings/user\"\r\n        className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\r\n      >\r\n        <span className=\"account-user-avatar\">\r\n          <img src={userImage} className=\"rounded-circle\" alt=\"user\" referrerPolicy=\"no-referrer\" />\r\n        </span>\r\n        <span>\r\n          <span className=\"account-user-name\">{username}</span>\r\n          <span className=\"account-position\">{userTitle}</span>\r\n        </span>\r\n      </Dropdown.Toggle>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default ProfileDropdown;\r\n","import { NotificationItem, Message } from '../types';\r\n\r\nconst notifications:NotificationItem[] = []\r\n\r\nconst data = {\r\n    \"from\": \"586881315432\",\r\n    \"messageId\": \"22705b39-2d85-4112-9608-ebbed3fe141b\",\r\n    \"notification\": {\r\n        \"title\": \"Daily Scrum Mention\",\r\n        \"body\": \"[Kevin Park] has mentioned you in [Whiteboard Journey] team! Please check your team's daily scrum for more information!\",\r\n        \"image\": \"https://wbj-media.s3.ap-northeast-2.amazonaws.com/assets/asyncrum-logo-small.png\"\r\n    }\r\n}\r\n\r\nconst title: string = data.notification.title;\r\nconst body: string = data.notification.body;\r\nconst message: Message = {\r\nid: 1,\r\ntitle: title,\r\nsubText: body,\r\ntime: '1 min ago',\r\nicon: 'mdi mdi-comment-account-outline',\r\nvariant: 'primary',\r\nisRead: true,\r\n};\r\n\r\nconst messages: Message[] = [];\r\nmessages.push(message);\r\n\r\nconst notification: NotificationItem = { day: 'Today', messages: messages };\r\nnotifications.push(notification);\r\n\r\n\r\nexport default notifications;","import { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport { changeSidebarType } from 'redux/actions';\r\nimport * as layoutConstants from 'appConstants';\r\nimport { useRedux, useToggle, useViewport } from 'hooks';\r\nimport NotificationDropdown from './NotificationDropdown';\r\nimport ProfileDropdown from './ProfileDropdown';\r\nimport logoSm from 'assets/images/asyncrum-logo-white-small.png';\r\nimport logo from 'assets/images/asyncrum-logo-white.png';\r\nimport { useEffect, useState } from 'react';\r\nimport { getFirebaseToken, onMessageListener } from './FirebaseConfig';\r\nimport { NotificationItem, Message } from '../types';\r\nimport useThemeCustomizer from 'components/ThemeCustomizer/useThemeCustomizer';\r\nimport { Form } from 'react-bootstrap';\r\nimport notifications from './NotificationData';\r\n\r\ntype TopbarProps = {\r\n  hideLogo?: boolean;\r\n  navCssClasses?: string;\r\n  openLeftMenuCallBack?: () => void;\r\n  topbarDark?: boolean;\r\n};\r\n\r\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps) => {\r\n  const { layoutColor, changeLayoutColorScheme } = useThemeCustomizer();\r\n  const { dispatch, appSelector } = useRedux();\r\n  const { width } = useViewport();\r\n  const [isMenuOpened, toggleMenu] = useToggle();\r\n  const [isTokenFound, setTokenFound] = useState(false);\r\n  // const [notifications, setNotifications] = useState<NotificationItem[]>([]);\r\n\r\n  const { user } = appSelector((state) => ({\r\n    user: state.Auth.user,\r\n  }));\r\n\r\n  // useEffect(() => {\r\n  //   getFirebaseToken(setTokenFound);\r\n  // }, []);\r\n\r\n  // onMessageListener()\r\n  //   .then((payload: any) => {\r\n  //     console.log(payload);\r\n\r\n  //     const title: string = payload.notification.title;\r\n  //     const body: string = payload.notification.body;\r\n  //     const message: Message = {\r\n  //       id: 1,\r\n  //       title: title,\r\n  //       subText: body,\r\n  //       time: '1 min ago',\r\n  //       icon: 'mdi mdi-comment-account-outline',\r\n  //       variant: 'primary',\r\n  //       isRead: true,\r\n  //     };\r\n\r\n  //     const messages: Message[] = [];\r\n  //     messages.push(message);\r\n\r\n  //     const notification: NotificationItem = { day: 'Today', messages: messages };\r\n  //     notifications.push(notification);\r\n\r\n  //     setNotifications(notifications);\r\n  //   })\r\n  //   .catch((err) => console.log('failed: ', err));\r\n\r\n  const containerCssClasses = !hideLogo ? 'container-fluid' : '';\r\n\r\n  const { layoutType, leftSideBarType } = appSelector((state) => ({\r\n    layoutType: state.Layout.layoutType,\r\n    leftSideBarType: state.Layout.leftSideBarType,\r\n  }));\r\n\r\n  /**\r\n   * Toggle the leftmenu when having mobile screen\r\n   */\r\n  const handleLeftMenuCallBack = () => {\r\n    toggleMenu();\r\n    if (openLeftMenuCallBack) openLeftMenuCallBack();\r\n\r\n    switch (layoutType) {\r\n      case layoutConstants.LayoutTypes.LAYOUT_VERTICAL:\r\n        if (width >= 768) {\r\n          if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\r\n            dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\r\n          if (leftSideBarType === 'condensed')\r\n            dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\r\n        }\r\n        break;\r\n\r\n      case layoutConstants.LayoutTypes.LAYOUT_FULL:\r\n        if (document.body) {\r\n          document.body.classList.toggle('hide-menu');\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classNames('navbar-custom', navCssClasses)}>\r\n      <div className={containerCssClasses}>\r\n        {!hideLogo && (\r\n          <Link to=\"/\" className=\"topnav-logo\">\r\n            <span className=\"topnav-logo-lg\">\r\n              <img src={logo} alt=\"logo\" height=\"16\" />\r\n            </span>\r\n            <span className=\"topnav-logo-sm\">\r\n              <img src={logoSm} alt=\"logo\" height=\"16\" />\r\n            </span>\r\n          </Link>\r\n        )}\r\n\r\n        <ul className=\"list-unstyled topbar-menu float-end mb-0\">\r\n          <li className=\"nav-link notification-list\">\r\n            <Form>\r\n              <i className={classNames('uil uil-sun noti-icon', layoutColor === 'light' ? 'text-warning' : '')}></i>\r\n              <Form.Check\r\n                className=\"d-inline-block\"\r\n                type=\"switch\"\r\n                id=\"custom-switch\"\r\n                checked={layoutColor === 'light' ? false : true}\r\n                onChange={(e) => {\r\n                  changeLayoutColorScheme(layoutColor === 'light' ? 'dark' : 'light');\r\n                }}\r\n              />\r\n              <i className={classNames('uil uil-moon noti-icon', layoutColor === 'dark' ? 'text-warning' : '')}></i>\r\n            </Form>\r\n          </li>\r\n          <li className=\"dropdown notification-list\">\r\n            <NotificationDropdown notifications={notifications!} />\r\n          </li>\r\n          <li className=\"dropdown notification-list\">\r\n            <ProfileDropdown userImage={user.profileImageUrl} username={user.fullname} userTitle={'Developer'} />\r\n          </li>\r\n        </ul>\r\n\r\n        {/* toggle for vertical layout */}\r\n        {(layoutType === layoutConstants.LayoutTypes.LAYOUT_VERTICAL ||\r\n          layoutType === layoutConstants.LayoutTypes.LAYOUT_FULL) && (\r\n          <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\r\n            <i className=\"mdi mdi-menu\" />\r\n          </button>\r\n        )}\r\n\r\n        {/* toggle for horizontal layout */}\r\n        {layoutType === layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL && (\r\n          <Link to=\"#\" className={classNames('navbar-toggle', { open: isMenuOpened })} onClick={handleLeftMenuCallBack}>\r\n            <div className=\"lines\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n          </Link>\r\n        )}\r\n\r\n        {/* toggle for detached layout */}\r\n        {layoutType === layoutConstants.LayoutTypes.LAYOUT_DETACHED && (\r\n          <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\r\n            <div className=\"lines\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n          </Link>\r\n        )}\r\n        {/* <TopbarSearch options={searchOptions} /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Topbar;\r\n","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;"],"names":["useThemeCustomizer","useRedux","dispatch","appSelector","state","layoutColor","Layout","layoutType","layoutWidth","leftSideBarTheme","leftSideBarType","useState","disableLayoutWidth","setDisableLayoutWidth","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","_loadStateFromProps","useCallback","layoutConstants","useEffect","changeLayoutType","value","changeLayout","changeLayoutColorScheme","changeLayoutColor","changeWidthMode","changeLayoutWidth","changeLeftSidebarTheme","changeSidebarTheme","changeLeftSiderbarType","changeSidebarType","reset","notificationShowContainerStyle","maxHeight","notifications","useToggle","isOpen","toggleDropdown","clicked","setClicked","Dropdown","show","onToggle","variant","id","as","Link","to","onClick","className","align","style","map","item","index","day","messages","message","classNames","isRead","Card","avatar","src","alt","icon","title","time","subText","toString","userTitle","username","userImage","referrerPolicy","data","body","push","notification","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","width","useViewport","isMenuOpened","toggleMenu","user","Auth","containerCssClasses","handleLeftMenuCallBack","document","classList","toggle","logo","height","logoSm","Form","type","checked","onChange","e","profileImageUrl","fullname","open","toFnRef","ref","current","refA","refB","useMemo","a","b","mergeRefs","optionsSupported","onceSupported","options","passive","once","canUseDOM","window","addEventListener","removeEventListener","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","this","call","createElement","ownerDocument"],"sourceRoot":""}