{"version":3,"file":"static/js/218.84ea7a69.chunk.js","mappings":"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","sources":["layouts/Topbar/data.ts","layouts/Topbar/ProfileDropdown.tsx","layouts/Topbar/index.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/removeEventListener.js"],"sourcesContent":["import { NotificationItem, ProfileOption, SearchOption } from '../types';\n\n// get the notifications\nconst notifications: NotificationItem[] = [\n  {\n    day: 'Today',\n    messages: [\n      {\n        id: 1,\n        title: 'Datacorp',\n        subText: 'Caleb Flakelar commented on Admin',\n        time: '1 min ago',\n        icon: 'mdi mdi-comment-account-outline',\n        variant: 'primary',\n        isRead: false,\n      },\n      {\n        id: 2,\n        title: 'Admin',\n        subText: 'New user registered.',\n        time: '1 hours ago',\n        icon: 'mdi mdi-account-plus',\n        variant: 'info',\n        isRead: true,\n      },\n    ],\n  },\n  {\n    day: 'Yesterday',\n    messages: [\n      {\n        id: 1,\n        title: 'Cristina Pride',\n        subText: 'Hi, How are you? What about our next meeting',\n        time: '1 day ago',\n        avatar: '',\n        isRead: true,\n      },\n    ],\n  },\n  {\n    day: '30 Dec 2021',\n    messages: [\n      {\n        id: 1,\n        title: 'Datacorp',\n        subText: 'Caleb Flakelar commented on Admin',\n        icon: 'mdi mdi-comment-account-outline',\n        variant: 'primary',\n        isRead: true,\n      },\n      {\n        id: 2,\n        title: 'Karen Robinson',\n        subText: 'Wow ! this admin looks good and awesome design',\n        avatar: '',\n        isRead: true,\n      },\n    ],\n  },\n];\n\n// get the profilemenu\nconst profileMenus: ProfileOption[] = [\n  {\n    label: 'Settings',\n    icon: 'mdi mdi-cog',\n    redirectTo: 'settings/user',\n  },\n  // {\n  //   label: 'Support',\n  //   icon: 'mdi mdi-lifebuoy',\n  //   redirectTo: '#',\n  // },\n  {\n    label: 'Logout',\n    icon: 'mdi mdi-logout',\n    redirectTo: '/account/logout',\n  },\n];\n\nconst searchOptions: SearchOption[] = [\n  { value: '1', label: 'Analytics Report', icon: 'uil-notes', type: 'report' },\n  { value: '2', label: 'How can I help you?', icon: 'uil-life-ring', type: 'help' },\n  { value: '3', label: 'User profile settings', icon: 'uil-cog', type: 'settings' },\n  {\n    label: 'Erwin Brown',\n    value: 'users1',\n    type: 'users',\n    userDetails: {\n      firstname: 'Erwin',\n      lastname: 'Brown',\n      position: 'UI Designer',\n      avatar: '',\n    },\n  },\n  {\n    label: 'Jacob Deo',\n    value: 'users2',\n    type: 'users',\n    userDetails: {\n      firstname: 'Jacob',\n      lastname: 'Deo',\n      position: 'Developer',\n      avatar: '',\n    },\n  },\n];\n\nexport { notifications, profileMenus, searchOptions };\n","import { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { useToggle } from 'hooks';\nimport { ProfileOption } from '../types';\n\ntype ProfileDropdownProps = {\n  menuItems: Array<ProfileOption>;\n  userImage: string;\n  username: string;\n  userTitle?: string;\n};\n\nconst ProfileDropdown = ({ userTitle, username, menuItems, userImage }: ProfileDropdownProps) => {\n  const [isOpen, toggleDropdown] = useToggle();\n\n  return (\n    <Dropdown show={isOpen} onToggle={toggleDropdown}>\n      <Dropdown.Toggle\n        variant=\"link\"\n        id=\"dropdown-profile\"\n        as={Link}\n        to=\"#\"\n        onClick={toggleDropdown}\n        className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\n      >\n        <span className=\"account-user-avatar\">\n          <img src={userImage} className=\"rounded-circle\" alt=\"user\" referrerPolicy=\"no-referrer\" />\n        </span>\n        <span>\n          <span className=\"account-user-name\">{username}</span>\n          <span className=\"account-position\">{userTitle}</span>\n        </span>\n      </Dropdown.Toggle>\n      <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated topbar-dropdown-menu profile-dropdown\">\n        <div onClick={toggleDropdown}>\n          <div className=\"dropdown-header noti-title\">\n            <h6 className=\"text-overflow m-0\">Welcome !</h6>\n          </div>\n          {menuItems.map((item, i) => {\n            return (\n              <Link to={item.redirectTo} className=\"dropdown-item notify-item\" key={i + '-profile-menu'}>\n                <i className={classNames(item.icon, 'me-1')}></i>\n                <span>{item.label}</span>\n              </Link>\n            );\n          })}\n        </div>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default ProfileDropdown;\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { showRightSidebar, changeSidebarType } from 'redux/actions';\nimport * as layoutConstants from 'appConstants';\nimport { useRedux, useToggle, useViewport } from 'hooks';\nimport { notifications, profileMenus, searchOptions } from './data';\nimport LanguageDropdown from './LanguageDropdown';\nimport NotificationDropdown from './NotificationDropdown';\nimport ProfileDropdown from './ProfileDropdown';\nimport SearchDropdown from './SearchDropdown';\nimport TopbarSearch from './TopbarSearch';\nimport AppsDropdown from './AppsDropdown';\nimport logoSmDark from 'assets/images/asyncrum-logo-white-small.png';\nimport logoSmLight from 'assets/images/asyncrum-logo-white-small.png';\nimport logo from 'assets/images/asyncrum-logo-white.png';\nimport config from 'config';\nimport { useEffect } from 'react';\nimport axios from 'axios';\n\ntype TopbarProps = {\n  hideLogo?: boolean;\n  navCssClasses?: string;\n  openLeftMenuCallBack?: () => void;\n  topbarDark?: boolean;\n};\n\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps) => {\n  const { dispatch, appSelector } = useRedux();\n  const { width } = useViewport();\n  const [isMenuOpened, toggleMenu] = useToggle();\n\n  const { user } = appSelector((state) => ({\n    user: state.Auth.user,\n  }));\n\n  const containerCssClasses = !hideLogo ? 'container-fluid' : '';\n\n  const { layoutType, leftSideBarType } = appSelector((state) => ({\n    layoutType: state.Layout.layoutType,\n    leftSideBarType: state.Layout.leftSideBarType,\n  }));\n\n  /**\n   * Toggle the leftmenu when having mobile screen\n   */\n  const handleLeftMenuCallBack = () => {\n    toggleMenu();\n    if (openLeftMenuCallBack) openLeftMenuCallBack();\n\n    switch (layoutType) {\n      case layoutConstants.LayoutTypes.LAYOUT_VERTICAL:\n        if (width >= 768) {\n          if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\n            dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\n          if (leftSideBarType === 'condensed')\n            dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\n        }\n        break;\n\n      case layoutConstants.LayoutTypes.LAYOUT_FULL:\n        if (document.body) {\n          document.body.classList.toggle('hide-menu');\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * Toggles the right sidebar\n   */\n  const handleRightSideBar = () => {\n    dispatch(showRightSidebar());\n  };\n\n  return (\n    <div className={classNames('navbar-custom', navCssClasses)}>\n      <div className={containerCssClasses}>\n        {!hideLogo && (\n          <Link to=\"/\" className=\"topnav-logo\">\n            <span className=\"topnav-logo-lg\">\n              <img src={logo} alt=\"logo\" height=\"16\" />\n            </span>\n            <span className=\"topnav-logo-sm\">\n              <img src={topbarDark ? logoSmLight : logoSmDark} alt=\"logo\" height=\"16\" />\n            </span>\n          </Link>\n        )}\n\n        <ul className=\"list-unstyled topbar-menu float-end mb-0\">\n          {/* <li className=\"notification-list topbar-dropdown d-xl-none\">\n            <SearchDropdown />\n          </li>\n          <li className=\"dropdown notification-list topbar-dropdown\">\n            <LanguageDropdown />\n          </li> */}\n          {/* <li className=\"dropdown notification-list\">\n            <NotificationDropdown notifications={notifications} />\n          </li> */}\n          {/* <li className=\"dropdown notification-list d-none d-sm-inline-block\">\n            <AppsDropdown />\n          </li> */}\n          <li className=\"notification-list\">\n            <button\n              className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\n              onClick={handleRightSideBar}>\n              <i className=\"dripicons-gear noti-icon\"></i>\n            </button>\n          </li>\n          <li className=\"dropdown notification-list\">\n            <ProfileDropdown\n              userImage={user.profileImageUrl}\n              menuItems={profileMenus}\n              username={user.fullname}\n              userTitle={'Developer'}\n            />\n          </li>\n        </ul>\n\n        {/* toggle for vertical layout */}\n        {(layoutType === layoutConstants.LayoutTypes.LAYOUT_VERTICAL ||\n          layoutType === layoutConstants.LayoutTypes.LAYOUT_FULL) && (\n          <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\n            <i className=\"mdi mdi-menu\" />\n          </button>\n        )}\n\n        {/* toggle for horizontal layout */}\n        {layoutType === layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL && (\n          <Link to=\"#\" className={classNames('navbar-toggle', { open: isMenuOpened })} onClick={handleLeftMenuCallBack}>\n            <div className=\"lines\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </Link>\n        )}\n\n        {/* toggle for detached layout */}\n        {layoutType === layoutConstants.LayoutTypes.LAYOUT_DETACHED && (\n          <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\n            <div className=\"lines\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </Link>\n        )}\n        {/* <TopbarSearch options={searchOptions} /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Topbar;\n","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;"],"names":["profileMenus","label","icon","redirectTo","userTitle","username","menuItems","userImage","useToggle","isOpen","toggleDropdown","Dropdown","show","onToggle","variant","id","as","Link","to","onClick","className","src","alt","referrerPolicy","align","map","item","i","classNames","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","useRedux","dispatch","appSelector","width","useViewport","isMenuOpened","toggleMenu","user","state","Auth","containerCssClasses","layoutType","Layout","leftSideBarType","handleLeftMenuCallBack","layoutConstants","changeSidebarType","document","body","classList","toggle","logo","height","logoSmLight","showRightSidebar","profileImageUrl","fullname","open","toFnRef","ref","value","current","refA","refB","useMemo","a","b","mergeRefs","optionsSupported","onceSupported","options","passive","once","canUseDOM","window","addEventListener","removeEventListener","e","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","this","call","createElement","ownerDocument"],"sourceRoot":""}