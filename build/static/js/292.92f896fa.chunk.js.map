{"version":3,"file":"static/js/292.92f896fa.chunk.js","mappings":"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","sources":["layouts/Topbar/data.ts","layouts/Topbar/LanguageDropdown/index.tsx","layouts/Topbar/NotificationDropdown.tsx","layouts/Topbar/ProfileDropdown.tsx","layouts/Topbar/SearchDropdown.tsx","layouts/Topbar/TopbarSearch.tsx","layouts/Topbar/AppsDropdown/index.tsx","layouts/Topbar/index.tsx"],"sourcesContent":["import { NotificationItem, ProfileOption, SearchOption } from '../types';\n\n// get the notifications\nconst notifications: NotificationItem[] = [\n    {\n        day: 'Today',\n        messages: [\n            {\n                id: 1,\n                title: 'Datacorp',\n                subText: 'Caleb Flakelar commented on Admin',\n                time: '1 min ago',\n                icon: 'mdi mdi-comment-account-outline',\n                variant: 'primary',\n                isRead: false,\n            },\n            {\n                id: 2,\n                title: 'Admin',\n                subText: 'New user registered.',\n                time: '1 hours ago',\n                icon: 'mdi mdi-account-plus',\n                variant: 'info',\n                isRead: true,\n            },\n        ],\n    },\n    {\n        day: 'Yesterday',\n        messages: [\n            {\n                id: 1,\n                title: 'Cristina Pride',\n                subText: 'Hi, How are you? What about our next meeting',\n                time: '1 day ago',\n                avatar: '',\n                isRead: true,\n            },\n        ],\n    },\n    {\n        day: '30 Dec 2021',\n        messages: [\n            {\n                id: 1,\n                title: 'Datacorp',\n                subText: 'Caleb Flakelar commented on Admin',\n                icon: 'mdi mdi-comment-account-outline',\n                variant: 'primary',\n                isRead: true,\n            },\n            {\n                id: 2,\n                title: 'Karen Robinson',\n                subText: 'Wow ! this admin looks good and awesome design',\n                avatar: '',\n                isRead: true,\n            },\n        ],\n    },\n];\n\n// get the profilemenu\nconst profileMenus: ProfileOption[] = [\n    {\n        label: 'Settings',\n        icon: 'mdi mdi-cog',\n        redirectTo: 'settings/user',\n    },\n    {\n        label: 'Support',\n        icon: 'mdi mdi-lifebuoy',\n        redirectTo: '#',\n    },\n    {\n        label: 'Logout',\n        icon: 'mdi mdi-logout',\n        redirectTo: '/account/logout',\n    },\n];\n\nconst searchOptions: SearchOption[] = [\n    { value: '1', label: 'Analytics Report', icon: 'uil-notes', type: 'report' },\n    { value: '2', label: 'How can I help you?', icon: 'uil-life-ring', type: 'help' },\n    { value: '3', label: 'User profile settings', icon: 'uil-cog', type: 'settings' },\n    {\n        label: 'Erwin Brown',\n        value: 'users1',\n        type: 'users',\n        userDetails: {\n            firstname: 'Erwin',\n            lastname: 'Brown',\n            position: 'UI Designer',\n            avatar: '',\n        },\n    },\n    {\n        label: 'Jacob Deo',\n        value: 'users2',\n        type: 'users',\n        userDetails: {\n            firstname: 'Jacob',\n            lastname: 'Deo',\n            position: 'Developer',\n            avatar: '',\n        },\n    },\n];\n\nexport { notifications, profileMenus, searchOptions };\n","import { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport { useToggle } from 'hooks';\nimport { Language } from '../../types';\n\n// get the languages\nconst Languages: Language[] = [\n    {\n        name: 'English',\n    },\n    {\n        name: '한국어',\n    },\n    {\n        name: '简体中文',\n    },\n    {\n        name: '繁體中文',\n    },\n];\n\nconst LanguageDropdown = () => {\n    const enLang = Languages[0] || {};\n    const [isOpen, toggleDropdown] = useToggle();\n\n    return (\n        <Dropdown show={isOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-languages\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle arrow-none\"\n            >\n                <span className=\"align-middle d-none d-sm-inline-block\">{enLang.name}</span>\n                <i className=\"mdi mdi-chevron-down d-none d-sm-inline-block align-middle\"></i>\n            </Dropdown.Toggle>\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated topbar-dropdown-menu\">\n                <div onClick={toggleDropdown}>\n                    {Languages.map((lang, i) => {\n                        return (\n                            <Link to=\"#\" className=\"dropdown-item notify-item\" key={i + '-lang'}>\n                                <span className={\"align-middle\" + (lang.name === \"繁體中文\" ? \" chinese-traditional\" : \"\")}>{lang.name}</span>\n                            </Link>\n                        );\n                    })}\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default LanguageDropdown;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown } from 'react-bootstrap';\nimport SimpleBar from 'simplebar-react';\nimport classNames from 'classnames';\nimport { NotificationItem } from '../types';\nimport { useToggle } from 'hooks';\n\n// notifiaction continer styles\nconst notificationShowContainerStyle = {\n    maxHeight: '300px',\n};\n\ntype NotificationDropdownProps = {\n    notifications: Array<NotificationItem>;\n};\n\nconst NotificationDropdown = ({ notifications }: NotificationDropdownProps) => {\n    const [isOpen, toggleDropdown] = useToggle();\n\n    return (\n        <Dropdown show={isOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-notification\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle arrow-none\"\n            >\n                <i className=\"dripicons-bell noti-icon\"></i>\n                <span className=\"noti-icon-badge\"></span>\n            </Dropdown.Toggle>\n            <Dropdown.Menu className=\"dropdown-menu-animated dropdown-lg\" align=\"end\">\n                <div onClick={toggleDropdown}>\n                    <div className=\"dropdown-item noti-title px-3\">\n                        <h5 className=\"m-0\">\n                            <span className=\"float-end\">\n                                <Link to=\"/notifications\" className=\"text-dark\">\n                                    <small>Clear All</small>\n                                </Link>\n                            </span>\n                            Notification\n                        </h5>\n                    </div>\n                    <SimpleBar className=\"px-3\" style={notificationShowContainerStyle}>\n                        {notifications.map((item, index) => {\n                            return (\n                                <React.Fragment key={index.toString()}>\n                                    <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\n                                    {(item.messages || []).map((message, index) => {\n                                        return (\n                                            <Dropdown.Item\n                                                key={index + '-noti'}\n                                                className={classNames(\n                                                    'p-0 notify-item card shadow-none mb-2',\n                                                    message.isRead ? 'read-noti' : 'unread-noti'\n                                                )}\n                                            >\n                                                <Card.Body>\n                                                    <span className=\"float-end noti-close-btn text-muted\">\n                                                        <i className=\"mdi mdi-close\"></i>\n                                                    </span>\n                                                    <div className=\"d-flex align-items-center\">\n                                                        <div className=\"flex-shrink-0\">\n                                                            <div\n                                                                className={classNames(\n                                                                    'notify-icon',\n                                                                    message.variant && 'bg-' + message.variant\n                                                                )}\n                                                            >\n                                                                {message.avatar ? (\n                                                                    <img\n                                                                        src={message.avatar}\n                                                                        className=\"img-fluid rounded-circle\"\n                                                                        alt=\"\"\n                                                                    />\n                                                                ) : (\n                                                                    <i className={message.icon}></i>\n                                                                )}\n                                                            </div>\n                                                        </div>\n                                                        <div className=\"flex-grow-1 text-truncate ms-2\">\n                                                            <h5 className=\"noti-item-title fw-semibold font-14\">\n                                                                {message.title}{' '}\n                                                                {message.time && (\n                                                                    <small className=\"fw-normal text-muted ms-1\">\n                                                                        {message.time}\n                                                                    </small>\n                                                                )}\n                                                            </h5>\n                                                            <small className=\"noti-item-subtitle text-muted\">\n                                                                {message.subText}\n                                                            </small>\n                                                        </div>\n                                                    </div>\n                                                </Card.Body>\n                                            </Dropdown.Item>\n                                        );\n                                    })}\n                                </React.Fragment>\n                            );\n                        })}\n\n                        <div className=\"text-center\">\n                            <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\n                        </div>\n                    </SimpleBar>\n\n                    <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\n                        View All\n                    </Dropdown.Item>\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default NotificationDropdown;\n","import { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { useToggle } from 'hooks';\nimport { ProfileOption } from '../types';\n\ntype ProfileDropdownProps = {\n    menuItems: Array<ProfileOption>;\n    userImage: string;\n    username: string;\n    userTitle?: string;\n};\n\nconst ProfileDropdown = ({ userTitle, username, menuItems, userImage }: ProfileDropdownProps) => {\n    const [isOpen, toggleDropdown] = useToggle();\n\n    return (\n        <Dropdown show={isOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-profile\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\n            >\n                <span className=\"account-user-avatar\">\n                    <img src={userImage} className=\"rounded-circle\" alt=\"user\" referrerPolicy=\"no-referrer\" />\n                </span>\n                <span>\n                    <span className=\"account-user-name\">{username}</span>\n                    <span className=\"account-position\">{userTitle}</span>\n                </span>\n            </Dropdown.Toggle>\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated topbar-dropdown-menu profile-dropdown\">\n                <div onClick={toggleDropdown}>\n                    <div className=\"dropdown-header noti-title\">\n                        <h6 className=\"text-overflow m-0\">Welcome !</h6>\n                    </div>\n                    {menuItems.map((item, i) => {\n                        return (\n                            <Link to={item.redirectTo} className=\"dropdown-item notify-item\" key={i + '-profile-menu'}>\n                                <i className={classNames(item.icon, 'me-1')}></i>\n                                <span>{item.label}</span>\n                            </Link>\n                        );\n                    })}\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default ProfileDropdown;\n","import { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport { useToggle } from 'hooks';\n\nconst SearchDropdown = () => {\n    const [isOpen, toggleDropdown] = useToggle();\n\n    return (\n        <Dropdown show={isOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-apps\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle arrow-none\"\n            >\n                <i className=\"dripicons-search noti-icon\"></i>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className=\"dropdown-menu-animated dropdown-lg p-0\">\n                <form className=\"p-3\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Search ...\" />\n                </form>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default SearchDropdown;\n","import { Link } from 'react-router-dom';\nimport Select, { components } from 'react-select';\nimport classNames from 'classnames';\nimport { groupByFields } from 'utils';\nimport { SearchOption } from '../types';\n\ntype TopbarSearchProps = {\n    options: SearchOption[];\n};\n\n/*\n * get options\n */\nconst optionGetter = (option: SearchOption) => {\n    switch (option.type) {\n        case 'report':\n            return (\n                <Link to=\"#\" className={classNames('dropdown-item', 'notify-item', 'p-0')}>\n                    <i className={classNames(option.icon, 'font-16', 'me-1')}></i>\n                    <span>{option.label}</span>\n                </Link>\n            );\n        case 'help':\n            return (\n                <Link to=\"#\" className={classNames('dropdown-item', 'notify-item', 'p-0')}>\n                    <i className={classNames(option.icon, 'font-16', 'me-1')}></i>\n                    <span>{option.label}</span>\n                </Link>\n            );\n        case 'settings':\n            return (\n                <Link to=\"#\" className={classNames('dropdown-item', 'notify-item', 'p-0')}>\n                    <i className={classNames(option.icon, 'font-16', 'me-1')}></i>\n                    <span>{option.label}</span>\n                </Link>\n            );\n        case 'title':\n            return (\n                <div className=\"noti-title\">\n                    <h6 className=\"text-overflow mb-2 text-uppercase\">Users</h6>\n                </div>\n            );\n        case 'users':\n            return (\n                <Link to=\"#\" className=\"dropdown-item notify-item p-0\">\n                    <div className=\"d-flex\">\n                        <img\n                            src={option.userDetails?.avatar}\n                            alt=\"\"\n                            className=\"d-flex me-2 rounded-circle\"\n                            height=\"32\"\n                        />\n                        <div className=\"w-100\">\n                            <h5 className=\"drop-username m-0 font-14\">\n                                {option.userDetails?.firstname} {option.userDetails?.lastname}\n                            </h5>\n                            <span className=\"user-subinfo font-12 mb-0\">{option.userDetails?.position}</span>\n                        </div>\n                    </div>\n                </Link>\n            );\n\n        default:\n            return;\n    }\n};\n\n/*\n * filter options\n */\nconst formateOptions = (options: SearchOption[]) => {\n    const grouppedData = groupByFields(options, (item: SearchOption) => {\n        return [item.type];\n    });\n\n    let formattedOptions = [];\n    let count = 0;\n\n    for (let i = 0; i < grouppedData.length; i++) {\n        for (let j = 0; j < grouppedData[i].length; j++) {\n            if (grouppedData[i][j].type === 'users' && count === 0) {\n                grouppedData[i].splice(j, 0, {\n                    label: 'Users',\n                    value: 'title',\n                    type: 'title',\n                });\n                count = 1;\n            }\n            formattedOptions.push(grouppedData[i][j]);\n        }\n    }\n    return formattedOptions;\n};\n\n/* custom control */\nconst Control = ({ children, ...props }: any) => {\n    const { handleClick } = props.selectProps;\n    return (\n        <components.Control {...props}>\n            <span onMouseDown={handleClick} className=\"mdi mdi-magnify search-icon\"></span>\n            {children}\n        </components.Control>\n    );\n};\n\n/* custon indicator */\nconst IndicatorsContainer = (props: any) => {\n    const { handleClick } = props.selectProps;\n    return (\n        <div style={{}}>\n            <components.IndicatorsContainer {...props} className=\"input-group\">\n                <button className=\"btn btn-primary input-group-text\" onMouseDown={handleClick}>\n                    Search\n                </button>\n            </components.IndicatorsContainer>\n        </div>\n    );\n};\n\n/* custom menu list */\nconst MenuList = (props: any) => {\n    const { options } = props.selectProps;\n\n    return (\n        <components.MenuList {...props}>\n            {/* menu header */}\n            <div className=\"dropdown-header noti-title\">\n                <h5 className=\"text-overflow mb-2\">\n                    Found <span className=\"text-danger\">{options.length}</span> results\n                </h5>\n            </div>\n            {props.children}\n        </components.MenuList>\n    );\n};\n\n/* fomates the option label */\nconst handleFormatOptionLabel = (option: SearchOption) => {\n    const formattedOption = optionGetter(option);\n    return <div>{formattedOption}</div>;\n};\n\nconst TopbarSearch = ({ options }: TopbarSearchProps) => {\n    return (\n        <Select\n            components={{ Control, IndicatorsContainer, MenuList }}\n            placeholder={'Search...'}\n            options={formateOptions(options)}\n            formatOptionLabel={handleFormatOptionLabel}\n            isOptionDisabled={(option) => option.type === 'title'}\n            maxMenuHeight={350}\n            isSearchable\n            isClearable\n            name=\"search-app\"\n            className=\"app-search dropdown\"\n            classNamePrefix=\"react-select\"\n        />\n    );\n};\n\nexport default TopbarSearch;\n","import { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport { useToggle } from 'hooks';\nimport { splitArray } from 'utils';\nimport { AppItem } from '../../types';\nimport slackIcon from './icons/slack.png';\nimport bitbucketIcon from './icons/bitbucket.png';\nimport dribbbleIcon from './icons/dribbble.png';\nimport dropboxIcon from './icons/dropbox.png';\nimport githubIcon from './icons/github.png';\nimport gSuiteIcon from './icons/g-suite.png';\n\n// get the apps\nconst apps: AppItem[] = [\n    {\n        name: 'Slack',\n        icon: slackIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'GitHub',\n        icon: githubIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'Dribbble',\n        icon: dribbbleIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'Bitbucket',\n        icon: bitbucketIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'Dropbox',\n        icon: dropboxIcon,\n        redirectTo: '#',\n    },\n    {\n        name: 'G Suite',\n        icon: gSuiteIcon,\n        redirectTo: '#',\n    },\n];\n\nconst AppsDropdown = () => {\n    const chunk_size = 3;\n    const appsChunks = splitArray(apps, chunk_size);\n    const [isOpen, toggleDropdown] = useToggle();\n\n    return (\n        <Dropdown show={isOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-apps\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle arrow-none\"\n            >\n                <i className=\"dripicons-view-apps noti-icon\"></i>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg p-0\">\n                <div onClick={toggleDropdown} className=\"p-2\">\n                    {appsChunks.map((chunk, index) => (\n                        <div className=\"row g-0\" key={index.toString()}>\n                            {chunk.map((item, index1) => (\n                                <div className=\"col\" key={index1.toString()}>\n                                    <Link className=\"dropdown-icon-item\" to={item.redirectTo}>\n                                        <img src={item.icon} alt=\"\" />\n                                        <span>{item.name}</span>\n                                    </Link>\n                                </div>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default AppsDropdown;\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { showRightSidebar, changeSidebarType } from 'redux/actions';\nimport * as layoutConstants from 'appConstants';\nimport { useRedux, useToggle, useViewport } from 'hooks';\nimport { notifications, profileMenus, searchOptions } from './data';\nimport LanguageDropdown from './LanguageDropdown';\nimport NotificationDropdown from './NotificationDropdown';\nimport ProfileDropdown from './ProfileDropdown';\nimport SearchDropdown from './SearchDropdown';\nimport TopbarSearch from './TopbarSearch';\nimport AppsDropdown from './AppsDropdown';\nimport logoSmDark from 'assets/images/asyncrum-logo-white-small.png';\nimport logoSmLight from 'assets/images/asyncrum-logo-white-small.png';\nimport logo from 'assets/images/asyncrum-logo-white.png';\nimport config from 'config';\nimport { useEffect } from 'react';\nimport axios from 'axios';\n\ntype TopbarProps = {\n    hideLogo?: boolean;\n    navCssClasses?: string;\n    openLeftMenuCallBack?: () => void;\n    topbarDark?: boolean;\n};\n\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps) => {\n    const { dispatch, appSelector } = useRedux();\n    const { width } = useViewport();\n    const [isMenuOpened, toggleMenu] = useToggle();\n    const user = JSON.parse(sessionStorage.getItem('asyncrum_user')!);\n\n    const containerCssClasses = !hideLogo ? 'container-fluid' : '';\n\n    const { layoutType, leftSideBarType } = appSelector((state) => ({\n        layoutType: state.Layout.layoutType,\n        leftSideBarType: state.Layout.leftSideBarType,\n    }));\n\n    /**\n     * Toggle the leftmenu when having mobile screen\n     */\n    const handleLeftMenuCallBack = () => {\n        toggleMenu();\n        if (openLeftMenuCallBack) openLeftMenuCallBack();\n\n        switch (layoutType) {\n            case layoutConstants.LayoutTypes.LAYOUT_VERTICAL:\n                if (width >= 768) {\n                    if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\n                        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\n                    if (leftSideBarType === 'condensed')\n                        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\n                }\n                break;\n\n            case layoutConstants.LayoutTypes.LAYOUT_FULL:\n                if (document.body) {\n                    document.body.classList.toggle('hide-menu');\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    /**\n     * Toggles the right sidebar\n     */\n    const handleRightSideBar = () => {\n        dispatch(showRightSidebar());\n    };\n\n    return (\n        <div className={classNames('navbar-custom', navCssClasses)}>\n            <div className={containerCssClasses}>\n                {!hideLogo && (\n                    <Link to=\"/\" className=\"topnav-logo\">\n                        <span className=\"topnav-logo-lg\">\n                            <img src={logo} alt=\"logo\" height=\"16\" />\n                        </span>\n                        <span className=\"topnav-logo-sm\">\n                            <img src={topbarDark ? logoSmLight : logoSmDark} alt=\"logo\" height=\"16\" />\n                        </span>\n                    </Link>\n                )}\n\n                <ul className=\"list-unstyled topbar-menu float-end mb-0\">\n                    <li className=\"notification-list topbar-dropdown d-xl-none\">\n                        <SearchDropdown />\n                    </li>\n                    <li className=\"dropdown notification-list topbar-dropdown\">\n                        <LanguageDropdown />\n                    </li>\n                    <li className=\"dropdown notification-list\">\n                        <NotificationDropdown notifications={notifications} />\n                    </li>\n                    <li className=\"dropdown notification-list d-none d-sm-inline-block\">\n                        <AppsDropdown />\n                    </li>\n                    <li className=\"notification-list\">\n                        <button\n                            className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\n                            onClick={handleRightSideBar}\n                        >\n                            <i className=\"dripicons-gear noti-icon\"></i>\n                        </button>\n                    </li>\n                    <li className=\"dropdown notification-list\">\n                        <ProfileDropdown\n                            userImage={user.profileImageUrl}\n                            menuItems={profileMenus}\n                            username={user.fullname}\n                            userTitle={'Developer'}\n                        />\n                    </li>\n                </ul>\n\n                {/* toggle for vertical layout */}\n                {(layoutType === layoutConstants.LayoutTypes.LAYOUT_VERTICAL ||\n                    layoutType === layoutConstants.LayoutTypes.LAYOUT_FULL) && (\n                    <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\n                        <i className=\"mdi mdi-menu\" />\n                    </button>\n                )}\n\n                {/* toggle for horizontal layout */}\n                {layoutType === layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL && (\n                    <Link\n                        to=\"#\"\n                        className={classNames('navbar-toggle', { open: isMenuOpened })}\n                        onClick={handleLeftMenuCallBack}\n                    >\n                        <div className=\"lines\">\n                            <span></span>\n                            <span></span>\n                            <span></span>\n                        </div>\n                    </Link>\n                )}\n\n                {/* toggle for detached layout */}\n                {layoutType === layoutConstants.LayoutTypes.LAYOUT_DETACHED && (\n                    <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\n                        <div className=\"lines\">\n                            <span></span>\n                            <span></span>\n                            <span></span>\n                        </div>\n                    </Link>\n                )}\n                <TopbarSearch options={searchOptions} />\n            </div>\n        </div>\n    );\n};\n\nexport default Topbar;\n"],"names":["notifications","day","messages","id","title","subText","time","icon","variant","isRead","avatar","profileMenus","label","redirectTo","searchOptions","value","type","userDetails","firstname","lastname","position","Languages","name","enLang","useToggle","isOpen","toggleDropdown","Dropdown","show","onToggle","as","Link","to","onClick","className","align","map","lang","i","notificationShowContainerStyle","maxHeight","style","item","index","message","classNames","Card","src","alt","toString","userTitle","username","menuItems","userImage","referrerPolicy","placeholder","formateOptions","options","grouppedData","groupByFields","formattedOptions","count","length","j","splice","push","Control","children","props","handleClick","selectProps","c","onMouseDown","IndicatorsContainer","MenuList","handleFormatOptionLabel","option","formattedOption","height","optionGetter","components","formatOptionLabel","isOptionDisabled","maxMenuHeight","isSearchable","isClearable","classNamePrefix","apps","slackIcon","dribbbleIcon","bitbucketIcon","dropboxIcon","appsChunks","splitArray","chunk","index1","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","useRedux","dispatch","appSelector","width","useViewport","isMenuOpened","toggleMenu","user","JSON","parse","sessionStorage","getItem","containerCssClasses","state","layoutType","Layout","leftSideBarType","handleLeftMenuCallBack","layoutConstants","changeSidebarType","document","body","classList","toggle","logo","logoSmLight","showRightSidebar","profileImageUrl","fullname","open"],"sourceRoot":""}