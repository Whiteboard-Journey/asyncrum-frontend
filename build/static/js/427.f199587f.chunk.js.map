{"version":3,"file":"static/js/427.f199587f.chunk.js","mappings":"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","sources":["pages/settings/CreateTeam.tsx"],"sourcesContent":["import { Row, Col, Card, Form, Button, ProgressBar, Modal, InputGroup } from 'react-bootstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { VerticalForm, FormInput } from 'components';\nimport React, { useRef, useState } from 'react';\nimport defaultImage from 'assets/images/asyncrum-logo-small.png';\nimport config from 'config';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useToggle } from 'hooks';\n\ntype Invitation = {\n    memberId: null;\n    memberEmail: string;\n}\n\nconst user = JSON.parse(sessionStorage.getItem('asyncrum_user')!);\n\nconst CreateTeam = () => {\n    const [teamId, setTeamId] = useState<number>();\n    const [teamName, setTeamName] = useState<string>();\n    const [previewImage, setPreviewImage] = useState<string>(defaultImage);\n    const [logoImageFile, setLogoImageFile] = useState<null | File>();\n    const fileInput = useRef<HTMLInputElement>(null);\n    const [isInviteOpen, toggleInvite] = useToggle();\n\n    const onCreateTeam = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const name = (((e.target as HTMLFormElement).elements as {[key: string]: any})['name'].value);\n        const code = name.slice(0, 3) + Date.now();\n        axios.post(config.API_URL+\"/api/v1/teams\", {name, code},  { headers: { Authorization: 'Bearer ' + user.token }})\n            .then(res => {\n                setTeamId(res.data.id);\n                setTeamName(name);\n            })\n    };\n\n    const onUploadTeamImage = () => {\n\n    };\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        if (!e.target.files) {\n            setPreviewImage(defaultImage);\n            return;\n        } else {\n            setLogoImageFile(e.target.files[0]);\n        }\n\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            if(reader.readyState === 2){\n                setPreviewImage(reader.result as string);\n            }\n        }\n\n        reader.readAsDataURL(e.target.files[0]);\n    };\n\n    const onCancelLogoImageChange = () => {\n        setPreviewImage(defaultImage);\n        setLogoImageFile(null);\n    }\n\n    const onSaveLogoImage = (e: React.MouseEvent<HTMLElement>) => {\n        if (!logoImageFile) {\n            return;\n        }\n        else {\n            axios.post(config.API_URL+\"/api/v1/team/images/\"+teamId, null, { headers: { Authorization: 'Bearer ' + user.token }})\n                .then(res => {\n                    const preSignedURL = res.data.preSignedURL;\n                    const uploadAxios = axios.create({ transformRequest: [(data: any, headers: any) => {\n                        delete headers.common.Authorization;\n                        headers['Content-Type'] = 'image/png';\n                        return logoImageFile;\n                    }] });\n                    uploadAxios.put(preSignedURL, logoImageFile);\n                })\n        }\n    }\n\n    const onInvite = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const email = (((e.target as HTMLFormElement).elements as {[key: string]: any})['email'].value);\n        const invitationData: Invitation = {\n            memberId: null,\n            memberEmail: email,\n        }\n        axios.post(config.API_URL + \"/api/v1/teams/\" + teamId + \"/members/invitation\", invitationData, { headers: { Authorization: 'Bearer ' + user.token }})\n            .then(() => toast(<div>Invitation sent to {email}!</div>));\n    }\n\n    const createValidationSchema = yupResolver(\n        yup.object().shape({\n            name: yup.string().required('Please enter a team name.'),\n        })\n    );\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <div className=\"page-title-box\">\n                        <h4 className=\"page-title\">Create Team</h4>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title mb-3\">Create Team</h4>\n\n                            <Wizard\n                                render={({ step, steps }) => (\n                                    <>\n                                        <ProgressBar\n                                            animated\n                                            striped\n                                            variant=\"success\"\n                                            now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                            className=\"mb-3 progress-sm\"\n                                        />\n\n                                        <Steps>\n                                            <Step\n                                                id=\"create\"\n                                                render={({ next }) => (\n                                                    <VerticalForm \n                                                        onSubmit={(event, values) => {\n                                                            onCreateTeam(values as React.FormEvent<HTMLFormElement>);\n                                                            next();\n                                                        }} \n                                                        resolver={createValidationSchema}>\n                                                        <FormInput\n                                                            label=\"Enter a team name\"\n                                                            type=\"text\"\n                                                            name=\"name\"\n                                                            containerClass={'mb-3'}\n                                                        />\n\n                                                        <ul className=\"list-inline wizard mb-0\">\n                                                            <li className=\"next list-inline-item float-end\">\n                                                                <Button variant=\"primary\" type=\"submit\">\n                                                                    Next\n                                                                </Button>\n                                                            </li>\n                                                        </ul>\n                                                    </VerticalForm>\n                                                )}\n                                            />\n                                            <Step\n                                                id=\"logo\"\n                                                render={({ next }) => (\n                                                    <VerticalForm \n                                                    onSubmit={(event, values) => {\n                                                        onUploadTeamImage();\n                                                        next();\n                                                    }}> \n                                                    <div className=\"d-flex align-items-center justify-content-center\">\n                                                        <div>\n                                                            <div style={{ height: 190, position: \"relative\" }}>\n                                                                <p className='mb-1' style={{ fontWeight: '600' }}>Upload your team logo (optional)</p>\n                                                                <div className='overlay-container mx-auto'>\n                                                                    <img src={previewImage} alt=\"logo preview\" className=\"rounded ratio ratio-1x1\" style={{ position: \"absolute\", width: 150, height: 150, cursor: \"pointer\" }} referrerPolicy=\"no-referrer\" />\n                                                                    <input \n                                                                        type='file' \n                                                                        // accept='image/jpg, image/png, image/jpeg' \n                                                                        accept='image/png'\n                                                                        style={{display:'none'}}\n                                                                        name='logoImage'\n                                                                        onChange={onChange}\n                                                                        ref={fileInput}\n                                                                    />\n                                                                    <div className='overlay rounded' onClick={()=>{fileInput.current!.click()}}>\n                                                                        <div className='overlay-text'>click to upload</div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                            <div className='d-flex align-items-center justify-content-center'>\n                                                                <Button className=\"me-2\" onClick={onSaveLogoImage} >\n                                                                    Save\n                                                                </Button>\n                                                                <Button className=\"btn btn-secondary\" onClick={onCancelLogoImageChange} >\n                                                                    Cancel\n                                                                </Button>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n\n                                                        <ul className=\"list-inline wizard mb-0\">\n                                                            <li className=\"next list-inline-item float-end\">\n                                                                <Button variant=\"primary\" type=\"submit\">\n                                                                    Next\n                                                                </Button>\n                                                            </li>\n                                                        </ul>\n                                                    </VerticalForm>\n                                                )}\n                                            />\n                                            <Step\n                                                id=\"dumbledore\"\n                                                render={({ previous }) => (\n                                                    <Row>\n                                                        <Col sm={12}>\n                                                            <div className=\"text-center\">\n                                                                <h2 className=\"mt-0\">\n                                                                    <i className=\"mdi mdi-check-all\"></i>\n                                                                </h2>\n                                                                <h3 className=\"mt-0 mb-4\">Team {teamName} Created !</h3>\n                                                            </div>\n                                                        </Col>\n\n                                                        <Col className=\"d-flex justify-content-between\">\n                                                            <Button className=\"btn btn-primary\" onClick={toggleInvite}>\n                                                                <i className=\"mdi mdi-plus\"></i> Invite Members\n                                                            </Button>\n                                                            <Modal show={isInviteOpen} onHide={toggleInvite}>\n                                                                <Modal.Body>\n                                                                    <Modal.Header onHide={toggleInvite} closeButton>\n                                                                        <h4 className=\"modal-title\">Invite a new member</h4>\n                                                                    </Modal.Header>\n                                                                    <form className=\"ps-3 pe-3 mt-3\" onSubmit={onInvite}>\n                                                                        <Form.Group>\n                                                                            <Form.Label htmlFor=\"email\">Invite by Email</Form.Label>\n                                                                            <InputGroup className=\"mb-3\">\n                                                                                <Form.Control\n                                                                                    id=\"email\"\n                                                                                    type=\"email\"\n                                                                                    placeholder=\"example@email.com\"\n                                                                                />\n                                                                                <Button type=\"submit\">\n                                                                                    Send Invitation\n                                                                                </Button>\n                                                                            </InputGroup>\n                                                                        </Form.Group>\n                                                                    </form>\n                                                                </Modal.Body>\n                                                            </Modal>\n                                                            <Button variant=\"primary\">Done</Button>\n                                                        </Col>\n                                                    </Row>\n                                                )}\n                                            />\n                                        </Steps>\n                                    </>\n                                )}\n                            />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <ToastContainer\n                position=\"bottom-center\"\n                autoClose={3000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n        </>\n    );\n}\n\nexport default CreateTeam;"],"names":["user","JSON","parse","sessionStorage","getItem","useState","teamId","setTeamId","teamName","setTeamName","defaultImage","previewImage","setPreviewImage","logoImageFile","setLogoImageFile","fileInput","useRef","useToggle","isInviteOpen","toggleInvite","onChange","e","target","files","reader","FileReader","onload","readyState","result","readAsDataURL","onCancelLogoImageChange","onSaveLogoImage","axios","config","headers","Authorization","token","then","res","preSignedURL","data","transformRequest","common","put","onInvite","preventDefault","email","elements","value","invitationData","memberId","memberEmail","toast","createValidationSchema","yupResolver","yup","shape","name","required","className","render","step","steps","animated","striped","variant","now","indexOf","length","id","next","onSubmit","event","values","code","slice","Date","onCreateTeam","resolver","label","type","containerClass","style","height","position","fontWeight","src","alt","width","cursor","referrerPolicy","accept","display","ref","onClick","current","click","previous","sm","show","onHide","closeButton","htmlFor","placeholder","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover"],"sourceRoot":""}