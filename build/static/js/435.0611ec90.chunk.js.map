{"version":3,"file":"static/js/435.0611ec90.chunk.js","mappings":"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","sources":["pages/settings/CreateTeamNameForm.tsx","pages/settings/CreateTeamImageForm.tsx","pages/settings/CreateTeam.tsx","pages/settings/InviteMemberButton.tsx","pages/settings/hooks/usePersonalSettings.tsx","pages/settings/hooks/useTeamSettings.tsx"],"sourcesContent":["import { Button } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { VerticalForm, FormInput } from 'components';\nimport { CreateTeamNameFormProps } from './types';\n\nconst CreateTeamNameForm: React.FC<CreateTeamNameFormProps> = ({ next, onCreateTeam }: CreateTeamNameFormProps) => {\n  const createValidationSchema = yupResolver(\n    yup.object().shape({\n      name: yup.string().required('Please enter a team name.'),\n    })\n  );\n\n  return (\n    <>\n      <VerticalForm\n        onSubmit={(_, values) => {\n          onCreateTeam(values as React.FormEvent<HTMLFormElement>);\n          if (next) {\n            next();\n          }\n        }}\n        resolver={createValidationSchema}\n      >\n        <FormInput label=\"Enter a team name\" type=\"text\" name=\"name\" containerClass={'mb-3'} />\n\n        <ul className=\"list-inline wizard mb-0\">\n          <li className=\"next list-inline-item float-end\">\n            <Button variant=\"primary\" type=\"submit\">\n              Next\n            </Button>\n          </li>\n        </ul>\n      </VerticalForm>\n    </>\n  );\n};\n\nexport default CreateTeamNameForm;\n","import { Button } from 'react-bootstrap';\nimport { VerticalForm } from 'components';\nimport { CreateTeamImageFormProps } from './types';\nimport { useRedux } from 'hooks';\n\nconst CreateTeamImageForm: React.FC<CreateTeamImageFormProps> = ({\n  next,\n  fileInput,\n  previewImage,\n  onChangeLogoImage,\n  onSaveLogoImage,\n  onCancelChangeLogoImage,\n}: CreateTeamImageFormProps) => {\n  const { appSelector } = useRedux();\n  const { currentTeam } = appSelector((state) => ({\n    currentTeam: state.Team.currentTeam,\n  }));\n\n  return (\n    <>\n      <VerticalForm\n        onSubmit={() => {\n          if (next) {\n            next();\n          }\n        }}>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <div>\n            <div style={{ height: 190, position: 'relative' }}>\n              <p className=\"mb-1\" style={{ fontWeight: '600' }}>\n                Upload your team logo (optional)\n              </p>\n              <div className=\"overlay-container mx-auto\">\n                <img\n                  src={currentTeam && previewImage === currentTeam.pictureUrl ? currentTeam?.pictureUrl : previewImage}\n                  alt=\"logo preview\"\n                  className=\"rounded ratio ratio-1x1\"\n                  style={{ position: 'absolute', width: 150, height: 150, cursor: 'pointer' }}\n                  referrerPolicy=\"no-referrer\"\n                />\n                <input\n                  type=\"file\"\n                  accept=\"image/png\"\n                  style={{ display: 'none' }}\n                  name=\"logoImage\"\n                  onChange={onChangeLogoImage}\n                  ref={fileInput}\n                />\n                <div\n                  className=\"overlay rounded\"\n                  onClick={() => {\n                    if (fileInput.current) {\n                      fileInput.current.click();\n                    }\n                  }}>\n                  <div className=\"overlay-text\">click to upload</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"d-flex align-items-center justify-content-center\">\n              <Button className=\"me-2\" onClick={onSaveLogoImage}>\n                Save\n              </Button>\n              <Button className=\"btn btn-secondary\" onClick={onCancelChangeLogoImage}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <ul className=\"list-inline wizard mb-0\">\n          <li className=\"next list-inline-item float-end\">\n            <Button variant=\"primary\" type=\"submit\">\n              Next\n            </Button>\n          </li>\n        </ul>\n      </VerticalForm>\n    </>\n  );\n};\n\nexport default CreateTeamImageForm;\n","import { Link } from 'react-router-dom';\nimport { Row, Col, Card, Button, ProgressBar } from 'react-bootstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport CreateTeamNameForm from './CreateTeamNameForm';\nimport CreateTeamImageForm from './CreateTeamImageForm';\nimport InviteMemberButton from './InviteMemberButton';\nimport { useTeamSettings } from './hooks';\nimport { useRedux } from 'hooks';\n\nconst CreateTeam = () => {\n  const { appSelector } = useRedux();\n  const { currentTeam } = appSelector((state) => ({\n    currentTeam: state.Team.currentTeam,\n  }));\n\n  const {\n    fileInput,\n    previewImage,\n    onCreateTeam,\n    onChangeLogoImage,\n    onSaveLogoImage,\n    onCancelChangeLogoImage,\n    onInvite,\n  } = useTeamSettings();\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <div className=\"page-title-box\">\n            <h4 className=\"page-title\">Create Team</h4>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title mb-3\">Create Team</h4>\n\n              <Wizard\n                render={({ step, steps }) => (\n                  <>\n                    <ProgressBar\n                      animated\n                      striped\n                      variant=\"success\"\n                      now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                      className=\"mb-3 progress-sm\"\n                    />\n\n                    <Steps>\n                      <Step\n                        id=\"create\"\n                        render={({ next }) => <CreateTeamNameForm next={next} onCreateTeam={onCreateTeam} />}\n                      />\n                      <Step\n                        id=\"logo\"\n                        render={({ next }) => (\n                          <CreateTeamImageForm\n                            next={next}\n                            fileInput={fileInput}\n                            previewImage={previewImage}\n                            onChangeLogoImage={onChangeLogoImage}\n                            onSaveLogoImage={onSaveLogoImage}\n                            onCancelChangeLogoImage={onCancelChangeLogoImage}\n                          />\n                        )}\n                      />\n                      <Step\n                        id=\"finished\"\n                        render={() => (\n                          <Row>\n                            <Col sm={12}>\n                              <div className=\"text-center\">\n                                <h2 className=\"mt-0\">\n                                  <i className=\"mdi mdi-check-all\"></i>\n                                </h2>\n                                <h3 className=\"mt-0 mb-4\">Team {currentTeam?.name} Created !</h3>\n                              </div>\n                            </Col>\n\n                            <Col className=\"d-flex justify-content-between\">\n                              <InviteMemberButton onInvite={onInvite} />\n                              <Link to=\"/settings/team\">\n                                <Button variant=\"primary\">Done</Button>\n                              </Link>\n                            </Col>\n                          </Row>\n                        )}\n                      />\n                    </Steps>\n                  </>\n                )}\n              />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <ToastContainer\n        position=\"bottom-center\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </>\n  );\n};\n\nexport default CreateTeam;\n","import { Button, InputGroup, Form, Modal } from 'react-bootstrap';\nimport { useToggle } from 'hooks';\nimport { InviteMemberButtonProps } from './types';\n\nconst InviteMemberButton: React.FC<InviteMemberButtonProps> = ({ onInvite }: InviteMemberButtonProps) => {\n  const [isInviteOpen, toggleInvite] = useToggle();\n\n  return (\n    <>\n      <Button className=\"btn btn-primary\" onClick={toggleInvite}>\n        <i className=\"mdi mdi-plus\"></i> Invite\n      </Button>\n      <Modal show={isInviteOpen} onHide={toggleInvite}>\n        <Modal.Body>\n          <Modal.Header onHide={toggleInvite} closeButton>\n            <h4 className=\"modal-title\">Invite a new member</h4>\n          </Modal.Header>\n          <form className=\"ps-3 pe-3 mt-3\" onSubmit={onInvite}>\n            <Form.Group>\n              <Form.Label htmlFor=\"email\">Invite by Email</Form.Label>\n              <InputGroup className=\"mb-3\">\n                <Form.Control id=\"email\" type=\"email\" placeholder=\"example@email.com\" />\n                <Button type=\"submit\">Send Invitation</Button>\n              </InputGroup>\n            </Form.Group>\n          </form>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default InviteMemberButton;\n","import { toast } from 'react-toastify';\nimport {\n  updateProfileInfo as updateProfileInfoAPI,\n  createProfileImage as createProfileImageAPI,\n  uploadProfileImage as uploadProfileImageAPI,\n} from 'helpers';\nimport { useRef, useState } from 'react';\nimport { useRedux } from 'hooks';\n\nconst usePersonalSettings = () => {\n  const { appSelector } = useRedux();\n\n  const { user } = appSelector((state) => ({\n    user: state.Auth.user,\n  }));\n\n  const [userFullname, setUserFullname] = useState<string>(user.fullname);\n  const [previewImage, setPreviewImage] = useState<string>(user.profileImageUrl);\n  const [profileImageFile, setProfileImageFile] = useState<null | File>();\n\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const onSubmitProfileInfo = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    let fullname = ((e.target as HTMLFormElement).elements.namedItem('fullname') as HTMLInputElement).value;\n    fullname = fullname === '' ? user.fullname : fullname;\n    let timezone = ((e.target as HTMLFormElement).elements.namedItem('timezone') as HTMLInputElement).value;\n    timezone = timezone === '' ? user.timeZone : timezone;\n    const fcmRegistrationToken = sessionStorage.getItem('fcmRegistrationToken');\n    await updateProfileInfoAPI({ fullname, timezone, fcmRegistrationToken });\n    setUserFullname(fullname);\n    user.fullname = fullname;\n    user.timeZone = timezone;\n    sessionStorage.setItem('asyncrum_user', JSON.stringify(user));\n    (e.target as HTMLFormElement).reset();\n    changeInfoNotify();\n  };\n\n  const onChangeProfileImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) {\n      setPreviewImage(user.profileImageUrl);\n      return;\n    } else {\n      setProfileImageFile(e.target.files[0]);\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setPreviewImage(reader.result as string);\n      }\n    };\n\n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  const onSaveProfileImage = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    if (!profileImageFile) {\n      return;\n    } else {\n      const createProfileImageAPIResponse = await createProfileImageAPI();\n      const presignedURL = createProfileImageAPIResponse.data.preSignedURL;\n      await uploadProfileImageAPI(presignedURL, profileImageFile);\n      changeImageNotify();\n    }\n  };\n\n  const onCancelChangeProfileImage = () => {\n    setPreviewImage(user.profileImageUrl);\n    setProfileImageFile(null);\n  };\n\n  const changeInfoNotify = () => toast(<div>Personal information changed successfully!</div>);\n\n  const changeImageNotify = () =>\n    toast(\n      <div>\n        Profile image saved successfully!\n        <br />\n        The change might take a few minutes to be applied.\n      </div>\n    );\n\n  return {\n    userFullname,\n    previewImage,\n    profileImageFile,\n    fileInput,\n    onSubmitProfileInfo,\n    onChangeProfileImage,\n    onSaveProfileImage,\n    onCancelChangeProfileImage,\n  };\n};\n\nexport default usePersonalSettings;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useRedux, useToggle } from 'hooks';\nimport { toast } from 'react-toastify';\nimport {\n  createLogoImage as createLogoImageAPI,\n  uploadLogoImage as uploadLogoImageAPI,\n  inviteMember as inviteMemberAPI,\n} from 'helpers';\nimport { createTeam, readTeam, updateTeam, leaveTeam } from 'redux/actions';\nimport { Invitation } from '../types';\nimport defaultImage from 'assets/images/asyncrum-logo-small.png';\n\nconst useTeamSettings = () => {\n  const { dispatch, appSelector } = useRedux();\n\n  const { user, currentTeam } = appSelector((state) => ({\n    user: state.Auth.user,\n    currentTeam: state.Team.currentTeam,\n  }));\n\n  const [loading, setLoading] = useState<boolean>(true);\n  const [previewImage, setPreviewImage] = useState<string>(currentTeam?.pictureUrl);\n  const [logoImageFile, setLogoImageFile] = useState<null | File>();\n  const [isDeleteOpen, toggleDelete] = useToggle();\n\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (currentTeam) {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    setPreviewImage(currentTeam?.pictureUrl);\n  }, [currentTeam]);\n\n  const onCreateTeam = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const name = ((e.target as HTMLFormElement).elements.namedItem('name') as HTMLInputElement).value;\n    const code = name.slice(0, 3) + Date.now();\n    dispatch(createTeam(name, code));\n  };\n\n  const onSubmitTeamInfo = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!currentTeam) {\n      return;\n    }\n    const name = ((e.target as HTMLFormElement).elements.namedItem('name') as HTMLInputElement).value;\n    dispatch(updateTeam(currentTeam.id, name));\n    (e.target as HTMLFormElement).reset();\n    changeInfoNotify();\n  };\n\n  const onChangeLogoImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) {\n      setPreviewImage(currentTeam?.pictureUrl);\n      return;\n    } else {\n      setLogoImageFile(e.target.files[0]);\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setPreviewImage(reader.result as string);\n      }\n    };\n\n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  const onSaveLogoImage = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    if (!logoImageFile || !currentTeam) {\n      return;\n    } else {\n      const createLogoImageAPIResponse = await createLogoImageAPI(currentTeam.id);\n      const presignedURL = createLogoImageAPIResponse.data.preSignedURL;\n      await uploadLogoImageAPI(presignedURL, logoImageFile);\n      dispatch(readTeam(currentTeam.id));\n      changeImageNotify();\n    }\n  };\n\n  const onCancelChangeLogoImage = () => {\n    setPreviewImage(currentTeam?.pictureUrl ? currentTeam?.pictureUrl : defaultImage);\n    setLogoImageFile(null);\n  };\n\n  const onInvite = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!currentTeam) {\n      return;\n    }\n    const email = ((e.target as HTMLFormElement).elements.namedItem('email') as HTMLInputElement).value;\n    const invitationData: Invitation = {\n      memberId: null,\n      memberEmail: email,\n    };\n    await inviteMemberAPI(currentTeam.id, invitationData);\n    (e.target as HTMLFormElement).reset();\n    invitationNotify(email);\n  };\n\n  const onLeaveTeam = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    dispatch(leaveTeam(currentTeam.id, user.id));\n  };\n\n  const changeInfoNotify = () => {\n    toast(<div>Team Information changed successfully!</div>);\n  };\n\n  const changeImageNotify = () =>\n    toast(\n      <div>\n        Team logo saved successfully!\n        <br />\n        The change might take a few minutes to be applied.\n      </div>\n    );\n\n  const invitationNotify = (email: string) =>\n    toast(\n      <div>\n        Invitation sent to <b>{email}</b>!\n      </div>\n    );\n\n  const closeModalAfterFunction = (\n    f: (e: React.FormEvent<HTMLFormElement>) => void,\n    event: React.FormEvent<HTMLFormElement>,\n    toggle: () => void\n  ) => {\n    f(event);\n    toggle();\n  };\n\n  return {\n    loading,\n    previewImage,\n    defaultImage,\n    logoImageFile,\n    fileInput,\n    isDeleteOpen,\n    setPreviewImage,\n    onCreateTeam,\n    onSubmitTeamInfo,\n    onChangeLogoImage,\n    onSaveLogoImage,\n    onCancelChangeLogoImage,\n    onInvite,\n    onLeaveTeam,\n    toggleDelete,\n    closeModalAfterFunction,\n  };\n};\n\nexport default useTeamSettings;\n"],"names":["next","onCreateTeam","createValidationSchema","yupResolver","yup","shape","name","required","onSubmit","_","values","resolver","label","type","containerClass","className","Button","variant","fileInput","previewImage","onChangeLogoImage","onSaveLogoImage","onCancelChangeLogoImage","currentTeam","appSelector","useRedux","state","Team","style","height","position","fontWeight","src","pictureUrl","alt","width","cursor","referrerPolicy","accept","display","onChange","ref","onClick","current","click","useTeamSettings","onInvite","Row","Col","Card","render","step","steps","ProgressBar","animated","striped","now","indexOf","length","id","sm","InviteMemberButton","to","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","useToggle","isInviteOpen","toggleInvite","show","onHide","closeButton","htmlFor","placeholder","user","Auth","useState","fullname","userFullname","setUserFullname","profileImageUrl","setPreviewImage","profileImageFile","setProfileImageFile","useRef","onSubmitProfileInfo","e","preventDefault","target","elements","namedItem","value","timezone","timeZone","fcmRegistrationToken","sessionStorage","getItem","updateProfileInfoAPI","setItem","JSON","stringify","reset","changeInfoNotify","onSaveProfileImage","createProfileImageAPI","createProfileImageAPIResponse","presignedURL","data","preSignedURL","uploadProfileImageAPI","changeImageNotify","toast","onChangeProfileImage","files","reader","FileReader","onload","readyState","result","readAsDataURL","onCancelChangeProfileImage","dispatch","loading","setLoading","logoImageFile","setLogoImageFile","isDeleteOpen","toggleDelete","useEffect","code","slice","Date","createTeam","onSubmitTeamInfo","updateTeam","createLogoImageAPI","createLogoImageAPIResponse","uploadLogoImageAPI","readTeam","email","invitationData","memberId","memberEmail","inviteMemberAPI","invitationNotify","defaultImage","onLeaveTeam","leaveTeam","closeModalAfterFunction","f","event","toggle"],"sourceRoot":""}