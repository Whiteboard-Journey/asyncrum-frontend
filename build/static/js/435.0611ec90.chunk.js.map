{"version":3,"file":"static/js/435.0611ec90.chunk.js","mappings":"sSAsCA,EAhC8D,SAAC,GAAqD,IAAnDA,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,aAC/DC,GAAyBC,EAAAA,EAAAA,GAC7BC,EAAAA,KAAaC,MAAM,CACjBC,KAAMF,EAAAA,KAAaG,SAAS,gCAIhC,OACE,+BACE,UAAC,KAAD,CACEC,SAAU,SAACC,EAAGC,GACZT,EAAaS,GACTV,GACFA,KAGJW,SAAUT,EAPZ,WASE,SAAC,KAAD,CAAWU,MAAM,oBAAoBC,KAAK,OAAOP,KAAK,OAAOQ,eAAgB,UAE7E,eAAIC,UAAU,0BAAd,UACE,eAAIA,UAAU,kCAAd,UACE,SAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,SAA/B,4B,WCsDZ,EA7EgE,SAAC,GAOhC,IAN/Bb,EAM8B,EAN9BA,KACAkB,EAK8B,EAL9BA,UACAC,EAI8B,EAJ9BA,aACAC,EAG8B,EAH9BA,kBACAC,EAE8B,EAF9BA,gBACAC,EAC8B,EAD9BA,wBAGQC,GAAgBC,GADAC,EAAAA,EAAAA,MAAhBD,cAC4B,SAACE,GAAD,MAAY,CAC9CH,YAAaG,EAAMC,KAAKJ,gBADlBA,YAIR,OACE,+BACE,UAAC,KAAD,CACEf,SAAU,WACJR,GACFA,KAHN,WAME,gBAAKe,UAAU,mDAAf,UACE,4BACE,iBAAKa,MAAO,CAAEC,OAAQ,IAAKC,SAAU,YAArC,WACE,cAAGf,UAAU,OAAOa,MAAO,CAAEG,WAAY,OAAzC,+CAGA,iBAAKhB,UAAU,4BAAf,WACE,gBACEiB,IAAKT,GAAeJ,IAAiBI,EAAYU,WAA5C,OAAyDV,QAAzD,IAAyDA,OAAzD,EAAyDA,EAAaU,WAAad,EACxFe,IAAI,eACJnB,UAAU,0BACVa,MAAO,CAAEE,SAAU,WAAYK,MAAO,IAAKN,OAAQ,IAAKO,OAAQ,WAChEC,eAAe,iBAEjB,kBACExB,KAAK,OACLyB,OAAO,YACPV,MAAO,CAAEW,QAAS,QAClBjC,KAAK,YACLkC,SAAUpB,EACVqB,IAAKvB,KAEP,gBACEH,UAAU,kBACV2B,QAAS,WACHxB,EAAUyB,SACZzB,EAAUyB,QAAQC,SAJxB,UAOE,gBAAK7B,UAAU,eAAf,sCAIN,iBAAKA,UAAU,mDAAf,WACE,SAACC,EAAA,EAAD,CAAQD,UAAU,OAAO2B,QAASrB,EAAlC,mBAGA,SAACL,EAAA,EAAD,CAAQD,UAAU,oBAAoB2B,QAASpB,EAA/C,6BAON,eAAIP,UAAU,0BAAd,UACE,eAAIA,UAAU,kCAAd,UACE,SAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,SAA/B,4B,sBC4CZ,EAzGmB,WACjB,IACQU,GAAgBC,GADAC,EAAAA,EAAAA,MAAhBD,cAC4B,SAACE,GAAD,MAAY,CAC9CH,YAAaG,EAAMC,KAAKJ,gBADlBA,YAIR,GAQIsB,EAAAA,EAAAA,KAPF3B,EADF,EACEA,UACAC,EAFF,EAEEA,aACAlB,EAHF,EAGEA,aACAmB,EAJF,EAIEA,kBACAC,EALF,EAKEA,gBACAC,EANF,EAMEA,wBACAwB,EAPF,EAOEA,SAGF,OACE,iCACE,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,WACE,gBAAKjC,UAAU,iBAAf,UACE,eAAIA,UAAU,aAAd,gCAIN,SAACgC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,WACE,UAACA,EAAA,OAAD,YACE,eAAIlC,UAAU,oBAAd,0BAEA,SAAC,KAAD,CACEmC,OAAQ,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACN,iCACE,SAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,SAAO,EACPtC,QAAQ,UACRuC,KAAOJ,EAAMK,QAAQN,GAAQ,GAAKC,EAAMM,OAAU,IAClD3C,UAAU,sBAGZ,UAAC,KAAD,YACE,SAAC,KAAD,CACE4C,GAAG,SACHT,OAAQ,gBAAGlD,EAAH,EAAGA,KAAH,OAAc,SAAC,EAAD,CAAoBA,KAAMA,EAAMC,aAAcA,QAEtE,SAAC,KAAD,CACE0D,GAAG,OACHT,OAAQ,gBAAGlD,EAAH,EAAGA,KAAH,OACN,SAAC,EAAD,CACEA,KAAMA,EACNkB,UAAWA,EACXC,aAAcA,EACdC,kBAAmBA,EACnBC,gBAAiBA,EACjBC,wBAAyBA,QAI/B,SAAC,KAAD,CACEqC,GAAG,WACHT,OAAQ,kBACN,UAACH,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAKY,GAAI,GAAT,UACE,iBAAK7C,UAAU,cAAf,WACE,eAAIA,UAAU,OAAd,UACE,cAAGA,UAAU,yBAEf,gBAAIA,UAAU,YAAd,yBAAgCQ,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAajB,KAA7C,sBAIJ,UAAC0C,EAAA,EAAD,CAAKjC,UAAU,iCAAf,WACE,SAAC8C,EAAA,EAAD,CAAoBf,SAAUA,KAC9B,SAAC,KAAD,CAAMgB,GAAG,iBAAT,UACE,SAAC9C,EAAA,EAAD,CAAQC,QAAQ,UAAhB,gDAc1B,SAAC,KAAD,CACEa,SAAS,gBACTiC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,S,uGC9EpB,IA5B8D,SAAC,GAA2C,IAAzCxB,EAAwC,EAAxCA,SAC/D,GAAqCyB,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAqBC,EAArB,KAEA,OACE,iCACE,UAAC,IAAD,CAAQ1D,UAAU,kBAAkB2B,QAAS+B,EAA7C,WACE,cAAG1D,UAAU,iBADf,cAGA,SAAC,IAAD,CAAO2D,KAAMF,EAAcG,OAAQF,EAAnC,UACE,UAAC,SAAD,YACE,SAAC,WAAD,CAAcE,OAAQF,EAAcG,aAAW,EAA/C,UACE,eAAI7D,UAAU,cAAd,oCAEF,iBAAMA,UAAU,iBAAiBP,SAAUsC,EAA3C,UACE,UAAC,UAAD,YACE,SAAC,UAAD,CAAY+B,QAAQ,QAApB,8BACA,UAAC,IAAD,CAAY9D,UAAU,OAAtB,WACE,SAAC,YAAD,CAAc4C,GAAG,QAAQ9C,KAAK,QAAQiE,YAAY,uBAClD,SAAC,IAAD,CAAQjE,KAAK,SAAb,+C,kLC2EhB,EAxF4B,WAC1B,IAEQkE,GAASvD,GAFOC,EAAAA,EAAAA,MAAhBD,cAEqB,SAACE,GAAD,MAAY,CACvCqD,KAAMrD,EAAMsD,KAAKD,SADXA,KAIR,GAAwCE,EAAAA,EAAAA,UAAiBF,EAAKG,UAA9D,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCH,EAAAA,EAAAA,UAAiBF,EAAKM,iBAA9D,eAAOlE,EAAP,KAAqBmE,EAArB,KACA,GAAgDL,EAAAA,EAAAA,YAAhD,eAAOM,EAAP,KAAyBC,EAAzB,KAEMtE,GAAYuE,EAAAA,EAAAA,QAAyB,MAErCC,EAAmB,mCAAG,WAAOC,GAAP,kFAC1BA,EAAEC,iBAEFV,EAAwB,MADpBA,EAAaS,EAAEE,OAA2BC,SAASC,UAAU,YAAiCC,OACrEjB,EAAKG,SAAWA,EAE7Ce,EAAwB,MADpBA,EAAaN,EAAEE,OAA2BC,SAASC,UAAU,YAAiCC,OACrEjB,EAAKmB,SAAWD,EACvCE,EAAuBC,eAAeC,QAAQ,wBAN1B,UAOpBC,EAAAA,EAAAA,IAAqB,CAAEpB,SAAAA,EAAUe,SAAAA,EAAUE,qBAAAA,IAPvB,OAQ1Bf,EAAgBF,GAChBH,EAAKG,SAAWA,EAChBH,EAAKmB,SAAWD,EAChBG,eAAeG,QAAQ,gBAAiBC,KAAKC,UAAU1B,IACtDY,EAAEE,OAA2Ba,QAC9BC,IAb0B,4CAAH,sDAmCnBC,EAAkB,mCAAG,WAAOjB,GAAP,4EACzBA,EAAEC,iBACGL,EAFoB,kEAKqBsB,EAAAA,EAAAA,MALrB,cAKjBC,EALiB,OAMjBC,EAAeD,EAA8BE,KAAKC,aANjC,WAOjBC,EAAAA,EAAAA,IAAsBH,EAAcxB,GAPnB,QAQvB4B,IARuB,4CAAH,sDAiBlBR,EAAmB,kBAAMS,EAAAA,EAAAA,KAAM,0EAE/BD,EAAoB,kBACxBC,EAAAA,EAAAA,KACE,gEAEE,kBAFF,0DAOJ,MAAO,CACLjC,aAAAA,EACAhE,aAAAA,EACAoE,iBAAAA,EACArE,UAAAA,EACAwE,oBAAAA,EACA2B,qBArD2B,SAAC1B,GAC5B,GAAKA,EAAEE,OAAOyB,MAAd,CAIE9B,EAAoBG,EAAEE,OAAOyB,MAAM,IAGrC,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,WACY,IAAtBF,EAAOG,YACTpC,EAAgBiC,EAAOI,SAI3BJ,EAAOK,cAAcjC,EAAEE,OAAOyB,MAAM,SAdlChC,EAAgBP,EAAKM,kBAoDvBuB,mBAAAA,EACAiB,2BAxBiC,WACjCvC,EAAgBP,EAAKM,iBACrBG,EAAoB,S,qBC0FxB,EArJwB,WACtB,OAAkC/D,EAAAA,EAAAA,MAA1BqG,EAAR,EAAQA,SAER,GAA8BtG,EAF9B,EAAkBA,cAEwB,SAACE,GAAD,MAAY,CACpDqD,KAAMrD,EAAMsD,KAAKD,KACjBxD,YAAaG,EAAMC,KAAKJ,gBAFlBwD,EAAR,EAAQA,KAAMxD,EAAd,EAAcA,YAKd,GAA8B0D,EAAAA,EAAAA,WAAkB,GAAhD,eAAO8C,EAAP,KAAgBC,EAAhB,KACA,GAAwC/C,EAAAA,EAAAA,UAAQ,OAAS1D,QAAT,IAASA,OAAT,EAASA,EAAaU,YAAtE,eAAOd,EAAP,KAAqBmE,EAArB,KACA,GAA0CL,EAAAA,EAAAA,YAA1C,eAAOgD,EAAP,KAAsBC,EAAtB,KACA,GAAqC3D,EAAAA,EAAAA,MAArC,eAAO4D,EAAP,KAAqBC,EAArB,KAEMlH,GAAYuE,EAAAA,EAAAA,QAAyB,OAE3C4C,EAAAA,EAAAA,YAAU,WACJ9G,GACFyG,GAAW,KAEZ,KAEHK,EAAAA,EAAAA,YAAU,WACR/C,EAAe,OAAC/D,QAAD,IAACA,OAAD,EAACA,EAAaU,cAC5B,CAACV,IAEJ,IAAMtB,EAAY,mCAAG,WAAO0F,GAAP,yEACnBA,EAAEC,iBACItF,EAASqF,EAAEE,OAA2BC,SAASC,UAAU,QAA6BC,MACtFsC,EAAOhI,EAAKiI,MAAM,EAAG,GAAKC,KAAKhF,MACrCsE,GAASW,EAAAA,EAAAA,IAAWnI,EAAMgI,IAJP,2CAAH,sDAOZI,EAAgB,mCAAG,WAAO/C,GAAP,0EACvBA,EAAEC,iBACGrE,EAFkB,iDAKjBjB,EAASqF,EAAEE,OAA2BC,SAASC,UAAU,QAA6BC,MAC5F8B,GAASa,EAAAA,EAAAA,IAAWpH,EAAYoC,GAAIrD,IACnCqF,EAAEE,OAA2Ba,QAC9BC,IARuB,2CAAH,sDA8BhBtF,EAAe,mCAAG,WAAOsE,GAAP,4EACtBA,EAAEC,iBACGqC,GAAkB1G,EAFD,kEAKqBqH,EAAAA,EAAAA,IAAmBrH,EAAYoC,IALpD,cAKdkF,EALc,OAMd9B,EAAe8B,EAA2B7B,KAAKC,aANjC,WAOd6B,EAAAA,EAAAA,IAAmB/B,EAAckB,GAPnB,QAQpBH,GAASiB,EAAAA,EAAAA,IAASxH,EAAYoC,KAC9BwD,IAToB,4CAAH,sDAkBfrE,EAAQ,mCAAG,WAAO6C,GAAP,4EACfA,EAAEC,iBACGrE,EAFU,wDAKTyH,EAAUrD,EAAEE,OAA2BC,SAASC,UAAU,SAA8BC,MACxFiD,EAA6B,CACjCC,SAAU,KACVC,YAAaH,GARA,UAUTI,EAAAA,EAAAA,IAAgB7H,EAAYoC,GAAIsF,GAVvB,OAWdtD,EAAEE,OAA2Ba,QAC9B2C,EAAiBL,GAZF,2CAAH,sDAoBRrC,EAAmB,YACvBS,EAAAA,EAAAA,KAAM,sEAGFD,EAAoB,kBACxBC,EAAAA,EAAAA,KACE,4DAEE,kBAFF,0DAOEiC,EAAmB,SAACL,GAAD,OACvB5B,EAAAA,EAAAA,KACE,kDACqB,uBAAI4B,IADzB,SAcJ,MAAO,CACLjB,QAAAA,EACA5G,aAAAA,EACAmI,aAAAA,EACArB,cAAAA,EACA/G,UAAAA,EACAiH,aAAAA,EACA7C,gBAAAA,EACArF,aAAAA,EACAyI,iBAAAA,EACAtH,kBAhGwB,SAACuE,GACzB,GAAKA,EAAEE,OAAOyB,MAAd,CAIEY,EAAiBvC,EAAEE,OAAOyB,MAAM,IAGlC,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,WACY,IAAtBF,EAAOG,YACTpC,EAAgBiC,EAAOI,SAI3BJ,EAAOK,cAAcjC,EAAEE,OAAOyB,MAAM,SAdlChC,EAAe,OAAC/D,QAAD,IAACA,OAAD,EAACA,EAAaU,aA+F/BZ,gBAAAA,EACAC,wBAlE8B,WAC9BgE,EAA2B,OAAX/D,QAAW,IAAXA,GAAAA,EAAaU,WAAb,OAA0BV,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAaU,WAAaqH,GACpEpB,EAAiB,OAiEjBpF,SAAAA,EACAyG,YAhDkB,SAAC5D,GACnBA,EAAEC,iBACFkC,GAAS0B,EAAAA,EAAAA,GAAUjI,EAAYoC,GAAIoB,EAAKpB,MA+CxCyE,aAAAA,EACAqB,wBAzB8B,SAC9BC,EACAC,EACAC,GAEAF,EAAEC,GACFC,Q","sources":["pages/settings/CreateTeamNameForm.tsx","pages/settings/CreateTeamImageForm.tsx","pages/settings/CreateTeam.tsx","pages/settings/InviteMemberButton.tsx","pages/settings/hooks/usePersonalSettings.tsx","pages/settings/hooks/useTeamSettings.tsx"],"sourcesContent":["import { Button } from 'react-bootstrap';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { VerticalForm, FormInput } from 'components';\r\nimport { CreateTeamNameFormProps } from './types';\r\n\r\nconst CreateTeamNameForm: React.FC<CreateTeamNameFormProps> = ({ next, onCreateTeam }: CreateTeamNameFormProps) => {\r\n  const createValidationSchema = yupResolver(\r\n    yup.object().shape({\r\n      name: yup.string().required('Please enter a team name.'),\r\n    })\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <VerticalForm\r\n        onSubmit={(_, values) => {\r\n          onCreateTeam(values as React.FormEvent<HTMLFormElement>);\r\n          if (next) {\r\n            next();\r\n          }\r\n        }}\r\n        resolver={createValidationSchema}\r\n      >\r\n        <FormInput label=\"Enter a team name\" type=\"text\" name=\"name\" containerClass={'mb-3'} />\r\n\r\n        <ul className=\"list-inline wizard mb-0\">\r\n          <li className=\"next list-inline-item float-end\">\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Next\r\n            </Button>\r\n          </li>\r\n        </ul>\r\n      </VerticalForm>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateTeamNameForm;\r\n","import { Button } from 'react-bootstrap';\r\nimport { VerticalForm } from 'components';\r\nimport { CreateTeamImageFormProps } from './types';\r\nimport { useRedux } from 'hooks';\r\n\r\nconst CreateTeamImageForm: React.FC<CreateTeamImageFormProps> = ({\r\n  next,\r\n  fileInput,\r\n  previewImage,\r\n  onChangeLogoImage,\r\n  onSaveLogoImage,\r\n  onCancelChangeLogoImage,\r\n}: CreateTeamImageFormProps) => {\r\n  const { appSelector } = useRedux();\r\n  const { currentTeam } = appSelector((state) => ({\r\n    currentTeam: state.Team.currentTeam,\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <VerticalForm\r\n        onSubmit={() => {\r\n          if (next) {\r\n            next();\r\n          }\r\n        }}>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <div>\r\n            <div style={{ height: 190, position: 'relative' }}>\r\n              <p className=\"mb-1\" style={{ fontWeight: '600' }}>\r\n                Upload your team logo (optional)\r\n              </p>\r\n              <div className=\"overlay-container mx-auto\">\r\n                <img\r\n                  src={currentTeam && previewImage === currentTeam.pictureUrl ? currentTeam?.pictureUrl : previewImage}\r\n                  alt=\"logo preview\"\r\n                  className=\"rounded ratio ratio-1x1\"\r\n                  style={{ position: 'absolute', width: 150, height: 150, cursor: 'pointer' }}\r\n                  referrerPolicy=\"no-referrer\"\r\n                />\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\"image/png\"\r\n                  style={{ display: 'none' }}\r\n                  name=\"logoImage\"\r\n                  onChange={onChangeLogoImage}\r\n                  ref={fileInput}\r\n                />\r\n                <div\r\n                  className=\"overlay rounded\"\r\n                  onClick={() => {\r\n                    if (fileInput.current) {\r\n                      fileInput.current.click();\r\n                    }\r\n                  }}>\r\n                  <div className=\"overlay-text\">click to upload</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"d-flex align-items-center justify-content-center\">\r\n              <Button className=\"me-2\" onClick={onSaveLogoImage}>\r\n                Save\r\n              </Button>\r\n              <Button className=\"btn btn-secondary\" onClick={onCancelChangeLogoImage}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <ul className=\"list-inline wizard mb-0\">\r\n          <li className=\"next list-inline-item float-end\">\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Next\r\n            </Button>\r\n          </li>\r\n        </ul>\r\n      </VerticalForm>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateTeamImageForm;\r\n","import { Link } from 'react-router-dom';\r\nimport { Row, Col, Card, Button, ProgressBar } from 'react-bootstrap';\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport CreateTeamNameForm from './CreateTeamNameForm';\r\nimport CreateTeamImageForm from './CreateTeamImageForm';\r\nimport InviteMemberButton from './InviteMemberButton';\r\nimport { useTeamSettings } from './hooks';\r\nimport { useRedux } from 'hooks';\r\n\r\nconst CreateTeam = () => {\r\n  const { appSelector } = useRedux();\r\n  const { currentTeam } = appSelector((state) => ({\r\n    currentTeam: state.Team.currentTeam,\r\n  }));\r\n\r\n  const {\r\n    fileInput,\r\n    previewImage,\r\n    onCreateTeam,\r\n    onChangeLogoImage,\r\n    onSaveLogoImage,\r\n    onCancelChangeLogoImage,\r\n    onInvite,\r\n  } = useTeamSettings();\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <div className=\"page-title-box\">\r\n            <h4 className=\"page-title\">Create Team</h4>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card>\r\n            <Card.Body>\r\n              <h4 className=\"header-title mb-3\">Create Team</h4>\r\n\r\n              <Wizard\r\n                render={({ step, steps }) => (\r\n                  <>\r\n                    <ProgressBar\r\n                      animated\r\n                      striped\r\n                      variant=\"success\"\r\n                      now={((steps.indexOf(step) + 1) / steps.length) * 100}\r\n                      className=\"mb-3 progress-sm\"\r\n                    />\r\n\r\n                    <Steps>\r\n                      <Step\r\n                        id=\"create\"\r\n                        render={({ next }) => <CreateTeamNameForm next={next} onCreateTeam={onCreateTeam} />}\r\n                      />\r\n                      <Step\r\n                        id=\"logo\"\r\n                        render={({ next }) => (\r\n                          <CreateTeamImageForm\r\n                            next={next}\r\n                            fileInput={fileInput}\r\n                            previewImage={previewImage}\r\n                            onChangeLogoImage={onChangeLogoImage}\r\n                            onSaveLogoImage={onSaveLogoImage}\r\n                            onCancelChangeLogoImage={onCancelChangeLogoImage}\r\n                          />\r\n                        )}\r\n                      />\r\n                      <Step\r\n                        id=\"finished\"\r\n                        render={() => (\r\n                          <Row>\r\n                            <Col sm={12}>\r\n                              <div className=\"text-center\">\r\n                                <h2 className=\"mt-0\">\r\n                                  <i className=\"mdi mdi-check-all\"></i>\r\n                                </h2>\r\n                                <h3 className=\"mt-0 mb-4\">Team {currentTeam?.name} Created !</h3>\r\n                              </div>\r\n                            </Col>\r\n\r\n                            <Col className=\"d-flex justify-content-between\">\r\n                              <InviteMemberButton onInvite={onInvite} />\r\n                              <Link to=\"/settings/team\">\r\n                                <Button variant=\"primary\">Done</Button>\r\n                              </Link>\r\n                            </Col>\r\n                          </Row>\r\n                        )}\r\n                      />\r\n                    </Steps>\r\n                  </>\r\n                )}\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateTeam;\r\n","import { Button, InputGroup, Form, Modal } from 'react-bootstrap';\r\nimport { useToggle } from 'hooks';\r\nimport { InviteMemberButtonProps } from './types';\r\n\r\nconst InviteMemberButton: React.FC<InviteMemberButtonProps> = ({ onInvite }: InviteMemberButtonProps) => {\r\n  const [isInviteOpen, toggleInvite] = useToggle();\r\n\r\n  return (\r\n    <>\r\n      <Button className=\"btn btn-primary\" onClick={toggleInvite}>\r\n        <i className=\"mdi mdi-plus\"></i> Invite\r\n      </Button>\r\n      <Modal show={isInviteOpen} onHide={toggleInvite}>\r\n        <Modal.Body>\r\n          <Modal.Header onHide={toggleInvite} closeButton>\r\n            <h4 className=\"modal-title\">Invite a new member</h4>\r\n          </Modal.Header>\r\n          <form className=\"ps-3 pe-3 mt-3\" onSubmit={onInvite}>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"email\">Invite by Email</Form.Label>\r\n              <InputGroup className=\"mb-3\">\r\n                <Form.Control id=\"email\" type=\"email\" placeholder=\"example@email.com\" />\r\n                <Button type=\"submit\">Send Invitation</Button>\r\n              </InputGroup>\r\n            </Form.Group>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InviteMemberButton;\r\n","import { toast } from 'react-toastify';\r\nimport {\r\n  updateProfileInfo as updateProfileInfoAPI,\r\n  createProfileImage as createProfileImageAPI,\r\n  uploadProfileImage as uploadProfileImageAPI,\r\n} from 'helpers';\r\nimport { useRef, useState } from 'react';\r\nimport { useRedux } from 'hooks';\r\n\r\nconst usePersonalSettings = () => {\r\n  const { appSelector } = useRedux();\r\n\r\n  const { user } = appSelector((state) => ({\r\n    user: state.Auth.user,\r\n  }));\r\n\r\n  const [userFullname, setUserFullname] = useState<string>(user.fullname);\r\n  const [previewImage, setPreviewImage] = useState<string>(user.profileImageUrl);\r\n  const [profileImageFile, setProfileImageFile] = useState<null | File>();\r\n\r\n  const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n  const onSubmitProfileInfo = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    let fullname = ((e.target as HTMLFormElement).elements.namedItem('fullname') as HTMLInputElement).value;\r\n    fullname = fullname === '' ? user.fullname : fullname;\r\n    let timezone = ((e.target as HTMLFormElement).elements.namedItem('timezone') as HTMLInputElement).value;\r\n    timezone = timezone === '' ? user.timeZone : timezone;\r\n    const fcmRegistrationToken = sessionStorage.getItem('fcmRegistrationToken');\r\n    await updateProfileInfoAPI({ fullname, timezone, fcmRegistrationToken });\r\n    setUserFullname(fullname);\r\n    user.fullname = fullname;\r\n    user.timeZone = timezone;\r\n    sessionStorage.setItem('asyncrum_user', JSON.stringify(user));\r\n    (e.target as HTMLFormElement).reset();\r\n    changeInfoNotify();\r\n  };\r\n\r\n  const onChangeProfileImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!e.target.files) {\r\n      setPreviewImage(user.profileImageUrl);\r\n      return;\r\n    } else {\r\n      setProfileImageFile(e.target.files[0]);\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      if (reader.readyState === 2) {\r\n        setPreviewImage(reader.result as string);\r\n      }\r\n    };\r\n\r\n    reader.readAsDataURL(e.target.files[0]);\r\n  };\r\n\r\n  const onSaveProfileImage = async (e: React.MouseEvent<HTMLElement>) => {\r\n    e.preventDefault();\r\n    if (!profileImageFile) {\r\n      return;\r\n    } else {\r\n      const createProfileImageAPIResponse = await createProfileImageAPI();\r\n      const presignedURL = createProfileImageAPIResponse.data.preSignedURL;\r\n      await uploadProfileImageAPI(presignedURL, profileImageFile);\r\n      changeImageNotify();\r\n    }\r\n  };\r\n\r\n  const onCancelChangeProfileImage = () => {\r\n    setPreviewImage(user.profileImageUrl);\r\n    setProfileImageFile(null);\r\n  };\r\n\r\n  const changeInfoNotify = () => toast(<div>Personal information changed successfully!</div>);\r\n\r\n  const changeImageNotify = () =>\r\n    toast(\r\n      <div>\r\n        Profile image saved successfully!\r\n        <br />\r\n        The change might take a few minutes to be applied.\r\n      </div>\r\n    );\r\n\r\n  return {\r\n    userFullname,\r\n    previewImage,\r\n    profileImageFile,\r\n    fileInput,\r\n    onSubmitProfileInfo,\r\n    onChangeProfileImage,\r\n    onSaveProfileImage,\r\n    onCancelChangeProfileImage,\r\n  };\r\n};\r\n\r\nexport default usePersonalSettings;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useRedux, useToggle } from 'hooks';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  createLogoImage as createLogoImageAPI,\r\n  uploadLogoImage as uploadLogoImageAPI,\r\n  inviteMember as inviteMemberAPI,\r\n} from 'helpers';\r\nimport { createTeam, readTeam, updateTeam, leaveTeam } from 'redux/actions';\r\nimport { Invitation } from '../types';\r\nimport defaultImage from 'assets/images/asyncrum-logo-small.png';\r\n\r\nconst useTeamSettings = () => {\r\n  const { dispatch, appSelector } = useRedux();\r\n\r\n  const { user, currentTeam } = appSelector((state) => ({\r\n    user: state.Auth.user,\r\n    currentTeam: state.Team.currentTeam,\r\n  }));\r\n\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [previewImage, setPreviewImage] = useState<string>(currentTeam?.pictureUrl);\r\n  const [logoImageFile, setLogoImageFile] = useState<null | File>();\r\n  const [isDeleteOpen, toggleDelete] = useToggle();\r\n\r\n  const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (currentTeam) {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setPreviewImage(currentTeam?.pictureUrl);\r\n  }, [currentTeam]);\r\n\r\n  const onCreateTeam = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const name = ((e.target as HTMLFormElement).elements.namedItem('name') as HTMLInputElement).value;\r\n    const code = name.slice(0, 3) + Date.now();\r\n    dispatch(createTeam(name, code));\r\n  };\r\n\r\n  const onSubmitTeamInfo = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!currentTeam) {\r\n      return;\r\n    }\r\n    const name = ((e.target as HTMLFormElement).elements.namedItem('name') as HTMLInputElement).value;\r\n    dispatch(updateTeam(currentTeam.id, name));\r\n    (e.target as HTMLFormElement).reset();\r\n    changeInfoNotify();\r\n  };\r\n\r\n  const onChangeLogoImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!e.target.files) {\r\n      setPreviewImage(currentTeam?.pictureUrl);\r\n      return;\r\n    } else {\r\n      setLogoImageFile(e.target.files[0]);\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      if (reader.readyState === 2) {\r\n        setPreviewImage(reader.result as string);\r\n      }\r\n    };\r\n\r\n    reader.readAsDataURL(e.target.files[0]);\r\n  };\r\n\r\n  const onSaveLogoImage = async (e: React.MouseEvent<HTMLElement>) => {\r\n    e.preventDefault();\r\n    if (!logoImageFile || !currentTeam) {\r\n      return;\r\n    } else {\r\n      const createLogoImageAPIResponse = await createLogoImageAPI(currentTeam.id);\r\n      const presignedURL = createLogoImageAPIResponse.data.preSignedURL;\r\n      await uploadLogoImageAPI(presignedURL, logoImageFile);\r\n      dispatch(readTeam(currentTeam.id));\r\n      changeImageNotify();\r\n    }\r\n  };\r\n\r\n  const onCancelChangeLogoImage = () => {\r\n    setPreviewImage(currentTeam?.pictureUrl ? currentTeam?.pictureUrl : defaultImage);\r\n    setLogoImageFile(null);\r\n  };\r\n\r\n  const onInvite = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!currentTeam) {\r\n      return;\r\n    }\r\n    const email = ((e.target as HTMLFormElement).elements.namedItem('email') as HTMLInputElement).value;\r\n    const invitationData: Invitation = {\r\n      memberId: null,\r\n      memberEmail: email,\r\n    };\r\n    await inviteMemberAPI(currentTeam.id, invitationData);\r\n    (e.target as HTMLFormElement).reset();\r\n    invitationNotify(email);\r\n  };\r\n\r\n  const onLeaveTeam = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(leaveTeam(currentTeam.id, user.id));\r\n  };\r\n\r\n  const changeInfoNotify = () => {\r\n    toast(<div>Team Information changed successfully!</div>);\r\n  };\r\n\r\n  const changeImageNotify = () =>\r\n    toast(\r\n      <div>\r\n        Team logo saved successfully!\r\n        <br />\r\n        The change might take a few minutes to be applied.\r\n      </div>\r\n    );\r\n\r\n  const invitationNotify = (email: string) =>\r\n    toast(\r\n      <div>\r\n        Invitation sent to <b>{email}</b>!\r\n      </div>\r\n    );\r\n\r\n  const closeModalAfterFunction = (\r\n    f: (e: React.FormEvent<HTMLFormElement>) => void,\r\n    event: React.FormEvent<HTMLFormElement>,\r\n    toggle: () => void\r\n  ) => {\r\n    f(event);\r\n    toggle();\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    previewImage,\r\n    defaultImage,\r\n    logoImageFile,\r\n    fileInput,\r\n    isDeleteOpen,\r\n    setPreviewImage,\r\n    onCreateTeam,\r\n    onSubmitTeamInfo,\r\n    onChangeLogoImage,\r\n    onSaveLogoImage,\r\n    onCancelChangeLogoImage,\r\n    onInvite,\r\n    onLeaveTeam,\r\n    toggleDelete,\r\n    closeModalAfterFunction,\r\n  };\r\n};\r\n\r\nexport default useTeamSettings;\r\n"],"names":["next","onCreateTeam","createValidationSchema","yupResolver","yup","shape","name","required","onSubmit","_","values","resolver","label","type","containerClass","className","Button","variant","fileInput","previewImage","onChangeLogoImage","onSaveLogoImage","onCancelChangeLogoImage","currentTeam","appSelector","useRedux","state","Team","style","height","position","fontWeight","src","pictureUrl","alt","width","cursor","referrerPolicy","accept","display","onChange","ref","onClick","current","click","useTeamSettings","onInvite","Row","Col","Card","render","step","steps","ProgressBar","animated","striped","now","indexOf","length","id","sm","InviteMemberButton","to","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","useToggle","isInviteOpen","toggleInvite","show","onHide","closeButton","htmlFor","placeholder","user","Auth","useState","fullname","userFullname","setUserFullname","profileImageUrl","setPreviewImage","profileImageFile","setProfileImageFile","useRef","onSubmitProfileInfo","e","preventDefault","target","elements","namedItem","value","timezone","timeZone","fcmRegistrationToken","sessionStorage","getItem","updateProfileInfoAPI","setItem","JSON","stringify","reset","changeInfoNotify","onSaveProfileImage","createProfileImageAPI","createProfileImageAPIResponse","presignedURL","data","preSignedURL","uploadProfileImageAPI","changeImageNotify","toast","onChangeProfileImage","files","reader","FileReader","onload","readyState","result","readAsDataURL","onCancelChangeProfileImage","dispatch","loading","setLoading","logoImageFile","setLogoImageFile","isDeleteOpen","toggleDelete","useEffect","code","slice","Date","createTeam","onSubmitTeamInfo","updateTeam","createLogoImageAPI","createLogoImageAPIResponse","uploadLogoImageAPI","readTeam","email","invitationData","memberId","memberEmail","inviteMemberAPI","invitationNotify","defaultImage","onLeaveTeam","leaveTeam","closeModalAfterFunction","f","event","toggle"],"sourceRoot":""}