{"version":3,"file":"static/js/435.d9466a2b.chunk.js","mappings":"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","sources":["pages/settings/CreateTeamNameForm.tsx","pages/settings/CreateTeamImageForm.tsx","pages/settings/CreateTeam.tsx","pages/settings/InviteMemberButton.tsx","pages/settings/hooks/usePersonalSettings.tsx","pages/settings/hooks/useTeamSettings.tsx"],"sourcesContent":["import { Button } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { VerticalForm, FormInput } from 'components';\nimport { CreateTeamNameFormProps } from './types';\n\nconst CreateTeamNameForm: React.FC<CreateTeamNameFormProps> = ({ next, onCreateTeam }: CreateTeamNameFormProps) => {\n  const createValidationSchema = yupResolver(\n    yup.object().shape({\n      name: yup.string().required('Please enter a team name.'),\n    })\n  );\n\n  return (\n    <>\n      <VerticalForm\n        onSubmit={(_, values) => {\n          onCreateTeam(values as React.FormEvent<HTMLFormElement>);\n          if (next) {\n            next();\n          }\n        }}\n        resolver={createValidationSchema}\n      >\n        <FormInput label=\"Enter a team name\" type=\"text\" name=\"name\" containerClass={'mb-3'} />\n\n        <ul className=\"list-inline wizard mb-0\">\n          <li className=\"next list-inline-item float-end\">\n            <Button variant=\"primary\" type=\"submit\">\n              Next\n            </Button>\n          </li>\n        </ul>\n      </VerticalForm>\n    </>\n  );\n};\n\nexport default CreateTeamNameForm;\n","import { Button } from 'react-bootstrap';\nimport { VerticalForm } from 'components';\nimport { CreateTeamImageFormProps } from './types';\n\nconst CreateTeamImageForm: React.FC<CreateTeamImageFormProps> = ({\n  next,\n  fileInput,\n  previewImage,\n  onChangeLogoImage,\n  onSaveLogoImage,\n  onCancelChangeLogoImage,\n}: CreateTeamImageFormProps) => {\n  return (\n    <>\n      <VerticalForm\n        onSubmit={() => {\n          if (next) {\n            next();\n          }\n        }}\n      >\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <div>\n            <div style={{ height: 190, position: 'relative' }}>\n              <p className=\"mb-1\" style={{ fontWeight: '600' }}>\n                Upload your team logo (optional)\n              </p>\n              <div className=\"overlay-container mx-auto\">\n                <img\n                  src={previewImage}\n                  alt=\"logo preview\"\n                  className=\"rounded ratio ratio-1x1\"\n                  style={{ position: 'absolute', width: 150, height: 150, cursor: 'pointer' }}\n                  referrerPolicy=\"no-referrer\"\n                />\n                <input\n                  type=\"file\"\n                  // accept='image/jpg, image/png, image/jpeg'\n                  accept=\"image/png\"\n                  style={{ display: 'none' }}\n                  name=\"logoImage\"\n                  onChange={onChangeLogoImage}\n                  ref={fileInput}\n                />\n                <div\n                  className=\"overlay rounded\"\n                  onClick={() => {\n                    if (fileInput.current) {\n                      fileInput.current.click();\n                    }\n                  }}\n                >\n                  <div className=\"overlay-text\">click to upload</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"d-flex align-items-center justify-content-center\">\n              <Button className=\"me-2\" onClick={onSaveLogoImage}>\n                Save\n              </Button>\n              <Button className=\"btn btn-secondary\" onClick={onCancelChangeLogoImage}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <ul className=\"list-inline wizard mb-0\">\n          <li className=\"next list-inline-item float-end\">\n            <Button variant=\"primary\" type=\"submit\">\n              Next\n            </Button>\n          </li>\n        </ul>\n      </VerticalForm>\n    </>\n  );\n};\n\nexport default CreateTeamImageForm;\n","import { Link } from 'react-router-dom';\nimport { Row, Col, Card, Button, ProgressBar } from 'react-bootstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport CreateTeamNameForm from './CreateTeamNameForm';\nimport CreateTeamImageForm from './CreateTeamImageForm';\nimport InviteMemberButton from './InviteMemberButton';\nimport { useTeamSettings } from './hooks';\n\nconst CreateTeam = () => {\n  const {\n    team,\n    fileInput,\n    defaultImage,\n    onCreateTeam,\n    onChangeLogoImage,\n    onSaveLogoImage,\n    onCancelChangeLogoImage,\n    onInvite,\n  } = useTeamSettings();\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <div className=\"page-title-box\">\n            <h4 className=\"page-title\">Create Team</h4>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title mb-3\">Create Team</h4>\n\n              <Wizard\n                render={({ step, steps }) => (\n                  <>\n                    <ProgressBar\n                      animated\n                      striped\n                      variant=\"success\"\n                      now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                      className=\"mb-3 progress-sm\"\n                    />\n\n                    <Steps>\n                      <Step\n                        id=\"create\"\n                        render={({ next }) => <CreateTeamNameForm next={next} onCreateTeam={onCreateTeam} />}\n                      />\n                      <Step\n                        id=\"logo\"\n                        render={({ next }) => (\n                          <CreateTeamImageForm\n                            next={next}\n                            fileInput={fileInput}\n                            previewImage={defaultImage}\n                            onChangeLogoImage={onChangeLogoImage}\n                            onSaveLogoImage={onSaveLogoImage}\n                            onCancelChangeLogoImage={onCancelChangeLogoImage}\n                          />\n                        )}\n                      />\n                      <Step\n                        id=\"finished\"\n                        render={() => (\n                          <Row>\n                            <Col sm={12}>\n                              <div className=\"text-center\">\n                                <h2 className=\"mt-0\">\n                                  <i className=\"mdi mdi-check-all\"></i>\n                                </h2>\n                                <h3 className=\"mt-0 mb-4\">Team {team?.name} Created !</h3>\n                              </div>\n                            </Col>\n\n                            <Col className=\"d-flex justify-content-between\">\n                              <InviteMemberButton onInvite={onInvite} />\n                              <Link to=\"/settings/team\">\n                                <Button variant=\"primary\">Done</Button>\n                              </Link>\n                            </Col>\n                          </Row>\n                        )}\n                      />\n                    </Steps>\n                  </>\n                )}\n              />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <ToastContainer\n        position=\"bottom-center\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </>\n  );\n};\n\nexport default CreateTeam;\n","import { Button, InputGroup, Form, Modal } from 'react-bootstrap';\nimport { useToggle } from 'hooks';\nimport { InviteMemberButtonProps } from './types';\n\nconst InviteMemberButton: React.FC<InviteMemberButtonProps> = ({ onInvite }: InviteMemberButtonProps) => {\n  const [isInviteOpen, toggleInvite] = useToggle();\n\n  return (\n    <>\n      <Button className=\"btn btn-primary\" onClick={toggleInvite}>\n        <i className=\"mdi mdi-plus\"></i> Invite\n      </Button>\n      <Modal show={isInviteOpen} onHide={toggleInvite}>\n        <Modal.Body>\n          <Modal.Header onHide={toggleInvite} closeButton>\n            <h4 className=\"modal-title\">Invite a new member</h4>\n          </Modal.Header>\n          <form className=\"ps-3 pe-3 mt-3\" onSubmit={onInvite}>\n            <Form.Group>\n              <Form.Label htmlFor=\"email\">Invite by Email</Form.Label>\n              <InputGroup className=\"mb-3\">\n                <Form.Control id=\"email\" type=\"email\" placeholder=\"example@email.com\" />\n                <Button type=\"submit\">Send Invitation</Button>\n              </InputGroup>\n            </Form.Group>\n          </form>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default InviteMemberButton;\n","import { toast } from 'react-toastify';\nimport {\n  updateProfileInfo as updateProfileInfoAPI,\n  createProfileImage as createProfileImageAPI,\n  uploadProfileImage as uploadProfileImageAPI,\n} from 'helpers';\nimport { APICore } from 'helpers/api/apiCore';\nimport { useRef, useState } from 'react';\nimport { useRedux } from 'hooks';\n\nconst usePersonalSettings = () => {\n  const { appSelector } = useRedux();\n\n  const { user } = appSelector((state) => ({\n    user: state.Auth.user,\n  }));\n\n  const [userFullname, setUserFullname] = useState<string>(user.fullname);\n  const [previewImage, setPreviewImage] = useState<string>(user.profileImageUrl);\n  const [profileImageFile, setProfileImageFile] = useState<null | File>();\n\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const onSubmitProfileInfo = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const fullname = ((e.target as HTMLFormElement).elements.namedItem('fullname') as HTMLInputElement).value;\n    const nickname = '';\n    await updateProfileInfoAPI({ fullname, nickname });\n    setUserFullname(fullname);\n    user.fullname = fullname;\n    sessionStorage.setItem('asyncrum_user', JSON.stringify(user));\n    (e.target as HTMLFormElement).reset();\n    changeInfoNotify();\n  };\n\n  const onChangeProfileImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) {\n      setPreviewImage(user.profileImageUrl);\n      return;\n    } else {\n      setProfileImageFile(e.target.files[0]);\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setPreviewImage(reader.result as string);\n      }\n    };\n\n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  const onSaveProfileImage = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    if (!profileImageFile) {\n      return;\n    } else {\n      const createProfileImageAPIResponse = await createProfileImageAPI();\n      const presignedURL = createProfileImageAPIResponse.data.preSignedURL;\n      await uploadProfileImageAPI(presignedURL, profileImageFile);\n      changeImageNotify();\n    }\n  };\n\n  const onCancelChangeProfileImage = () => {\n    setPreviewImage(user.profileImageUrl);\n    setProfileImageFile(null);\n  };\n\n  const changeInfoNotify = () => toast(<div>Personal information changed successfully!</div>);\n\n  const changeImageNotify = () =>\n    toast(\n      <div>\n        Profile image saved successfully!\n        <br />\n        The change might take a few minutes to be applied.\n      </div>\n    );\n\n  return {\n    userFullname,\n    previewImage,\n    profileImageFile,\n    fileInput,\n    onSubmitProfileInfo,\n    onChangeProfileImage,\n    onSaveProfileImage,\n    onCancelChangeProfileImage,\n  };\n};\n\nexport default usePersonalSettings;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport {\n  createTeam as createTeamAPI,\n  readTeam as readTeamAPI,\n  updateTeamInfo as updateTeamInfoAPI,\n  createLogoImage as createLogoImageAPI,\n  uploadLogoImage as uploadLogoImageAPI,\n  inviteMember as inviteMemberAPI,\n} from 'helpers';\nimport { Member, Team, Invitation } from '../types';\nimport { APICore } from 'helpers/api/apiCore';\nimport defaultImage from 'assets/images/asyncrum-logo-small.png';\n\nconst useTeamSettings = () => {\n  const api = new APICore();\n  const user = api.getLoggedInUser();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [team, setTeam] = useState<Team>(user.currentTeam);\n  const [teamname, setTeamname] = useState<string>();\n  const [previewImage, setPreviewImage] = useState<string>();\n  const [logoImageFile, setLogoImageFile] = useState<null | File>();\n\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (user.teams) {\n      getTeamData();\n    }\n  }, []);\n\n  useEffect(() => {\n    setPreviewImage(team?.pictureUrl);\n  }, [team]);\n\n  const onCreateTeam = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const name = ((e.target as HTMLFormElement).elements.namedItem('name') as HTMLInputElement).value;\n    const code = name.slice(0, 3) + Date.now();\n    const createTeamAPIResponse = await createTeamAPI({ name, code });\n    const newTeam = createTeamAPIResponse.data;\n    if (user['teams']) {\n      user['teams'].push(newTeam);\n    } else {\n      user['teams'] = [newTeam];\n    }\n    user['currentTeam'] = newTeam;\n    const readTeamAPIResponse = await readTeamAPI(newTeam.id);\n    const teaminfo: Team = {\n      id: readTeamAPIResponse.data.id,\n      name: readTeamAPIResponse.data.name,\n      code: readTeamAPIResponse.data.code,\n      pictureUrl: readTeamAPIResponse.data.pictureUrl,\n      members: readTeamAPIResponse.data.members.map((member: Member) => ({\n        fullname: member.fullname,\n        profileImageUrl: member.profileImageUrl,\n      })),\n    };\n    setTeam(teaminfo);\n    setTeamname(teaminfo.name);\n    setPreviewImage(defaultImage);\n  };\n\n  const getTeamData = async () => {\n    const readTeamAPIResponse = await readTeamAPI(user.currentTeam.id);\n    const teaminfo: Team = {\n      id: readTeamAPIResponse.data.id,\n      name: readTeamAPIResponse.data.name,\n      code: readTeamAPIResponse.data.code,\n      pictureUrl: readTeamAPIResponse.data.pictureUrl,\n      members: readTeamAPIResponse.data.members.map((member: Member) => ({\n        fullname: member.fullname,\n        profileImageUrl: member.profileImageUrl,\n      })),\n    };\n    setTeam(teaminfo);\n    setTeamname(teaminfo.name);\n    setPreviewImage(teaminfo.pictureUrl);\n    setLoading(false);\n    return teaminfo;\n  };\n\n  const onSubmitTeamInfo = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!team) {\n      return;\n    }\n    const name = ((e.target as HTMLFormElement).elements.namedItem('name') as HTMLInputElement).value;\n    await updateTeamInfoAPI(user.currentTeam.id, { name });\n    setTeamname(name);\n    (e.target as HTMLFormElement).reset();\n    changeInfoNotify();\n  };\n\n  const onChangeLogoImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) {\n      setPreviewImage(team?.pictureUrl);\n      return;\n    } else {\n      setLogoImageFile(e.target.files[0]);\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setPreviewImage(reader.result as string);\n      }\n    };\n\n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  const onSaveLogoImage = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    if (!logoImageFile || !team) {\n      return;\n    } else {\n      const createLogoImageAPIResponse = await createLogoImageAPI(user.currentTeam.id);\n      const presignedURL = createLogoImageAPIResponse.data.preSignedURL;\n      await uploadLogoImageAPI(presignedURL, logoImageFile);\n      changeImageNotify();\n    }\n  };\n\n  const onCancelChangeLogoImage = () => {\n    setPreviewImage(team?.pictureUrl ? team?.pictureUrl : defaultImage);\n    setLogoImageFile(null);\n  };\n\n  const onInvite = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!user.currentTeam) {\n      return;\n    }\n    const email = ((e.target as HTMLFormElement).elements.namedItem('email') as HTMLInputElement).value;\n    const invitationData: Invitation = {\n      memberId: null,\n      memberEmail: email,\n    };\n    await inviteMemberAPI(user.currentTeam.id, invitationData);\n    (e.target as HTMLFormElement).reset();\n    invitationNotify(email);\n  };\n\n  const changeInfoNotify = () => {\n    toast(<div>Team Information changed successfully!</div>);\n  };\n\n  const changeImageNotify = () =>\n    toast(\n      <div>\n        Team logo saved successfully!\n        <br />\n        The change might take a few minutes to be applied.\n      </div>\n    );\n\n  const invitationNotify = (email: string) =>\n    toast(\n      <div>\n        Invitation sent to <b>{email}</b>!\n      </div>\n    );\n\n  return {\n    loading,\n    team,\n    teamname,\n    previewImage,\n    defaultImage,\n    logoImageFile,\n    fileInput,\n    setTeamname,\n    setPreviewImage,\n    onCreateTeam,\n    onSubmitTeamInfo,\n    onChangeLogoImage,\n    onSaveLogoImage,\n    onCancelChangeLogoImage,\n    onInvite,\n  };\n};\n\nexport default useTeamSettings;\n"],"names":["next","onCreateTeam","createValidationSchema","yupResolver","yup","shape","name","required","onSubmit","_","values","resolver","label","type","containerClass","className","Button","variant","fileInput","previewImage","onChangeLogoImage","onSaveLogoImage","onCancelChangeLogoImage","style","height","position","fontWeight","src","alt","width","cursor","referrerPolicy","accept","display","onChange","ref","onClick","current","click","useTeamSettings","team","defaultImage","onInvite","Row","Col","Card","render","step","steps","ProgressBar","animated","striped","now","indexOf","length","id","sm","InviteMemberButton","to","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","useToggle","isInviteOpen","toggleInvite","show","onHide","closeButton","htmlFor","placeholder","user","appSelector","useRedux","state","Auth","useState","fullname","userFullname","setUserFullname","profileImageUrl","setPreviewImage","profileImageFile","setProfileImageFile","useRef","onSubmitProfileInfo","e","preventDefault","target","elements","namedItem","value","updateProfileInfoAPI","nickname","sessionStorage","setItem","JSON","stringify","reset","changeInfoNotify","onSaveProfileImage","createProfileImageAPI","createProfileImageAPIResponse","presignedURL","data","preSignedURL","uploadProfileImageAPI","changeImageNotify","toast","onChangeProfileImage","files","reader","FileReader","onload","readyState","result","readAsDataURL","onCancelChangeProfileImage","APICore","getLoggedInUser","loading","setLoading","currentTeam","setTeam","teamname","setTeamname","logoImageFile","setLogoImageFile","useEffect","teams","getTeamData","pictureUrl","code","slice","Date","createTeamAPI","createTeamAPIResponse","newTeam","push","readTeamAPI","readTeamAPIResponse","teaminfo","members","map","member","onSubmitTeamInfo","updateTeamInfoAPI","createLogoImageAPI","createLogoImageAPIResponse","uploadLogoImageAPI","email","invitationData","memberId","memberEmail","inviteMemberAPI","invitationNotify"],"sourceRoot":""}