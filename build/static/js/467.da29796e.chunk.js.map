{"version":3,"file":"static/js/467.da29796e.chunk.js","mappings":"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","sources":["components/ThemeCustomizer/useThemeCustomizer.ts","layouts/Topbar/NotificationDropdown.tsx","layouts/Topbar/ProfileDropdown.tsx","layouts/Topbar/FirebaseConfig.ts","layouts/Topbar/index.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport {\n  changeLayout,\n  changeLayoutColor,\n  changeLayoutWidth,\n  changeSidebarTheme,\n  changeSidebarType,\n} from 'redux/actions';\nimport * as layoutConstants from 'appConstants';\nimport { useRedux } from 'hooks';\n\nexport default function useThemeCustomizer() {\n  const { dispatch, appSelector } = useRedux();\n\n  const { layoutColor, layoutType, layoutWidth, leftSideBarType, leftSideBarTheme } = appSelector((state) => ({\n    layoutColor: state.Layout.layoutColor,\n    layoutType: state.Layout.layoutType,\n    layoutWidth: state.Layout.layoutWidth,\n    leftSideBarTheme: state.Layout.leftSideBarTheme,\n    leftSideBarType: state.Layout.leftSideBarType,\n  }));\n\n  const [disableLayoutWidth, setDisableLayoutWidth] = useState<boolean>(false);\n  const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\n  const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\n\n  /**\n   * change state based on props changes\n   */\n  const _loadStateFromProps = useCallback(() => {\n    setDisableLayoutWidth(\n      layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED &&\n        layoutType !== layoutConstants.LayoutTypes.LAYOUT_FULL\n    );\n\n    setDisableSidebarTheme(\n      layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL &&\n        layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED\n    );\n    setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n  }, [layoutType]);\n\n  useEffect(() => {\n    _loadStateFromProps();\n  }, [_loadStateFromProps]);\n\n  /**\n   * On layout change\n   */\n  const changeLayoutType = (value: string) => {\n    const layout = value;\n    switch (layout) {\n      case 'topnav':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n        break;\n      case 'detached':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_DETACHED));\n        break;\n      case 'full':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_FULL));\n        break;\n      default:\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n        break;\n    }\n  };\n\n  /**\n   * Change the layout color\n   */\n  const changeLayoutColorScheme = (value: string) => {\n    const mode = value;\n    switch (mode) {\n      case 'dark':\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n        break;\n      default:\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n        break;\n    }\n  };\n\n  /**\n   * Change the width mode\n   */\n  const changeWidthMode = (value: string) => {\n    const mode = value;\n\n    switch (mode) {\n      case 'boxed':\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n        break;\n      default:\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n        break;\n    }\n  };\n\n  /**\n   * Changes the theme\n   */\n  const changeLeftSidebarTheme = (value: string) => {\n    const theme = value;\n    switch (theme) {\n      case 'default':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT));\n        break;\n      case 'light':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n        break;\n      default:\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n        break;\n    }\n  };\n\n  /**\n   * Change the leftsiderbar type\n   */\n  const changeLeftSiderbarType = (value: string) => {\n    const type = value;\n    switch (type) {\n      case 'condensed':\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\n        break;\n      case 'scrollable':\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_SCROLLABLE));\n        break;\n      default:\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\n        break;\n    }\n  };\n\n  /**\n   * Reset everything\n   */\n  const reset = () => {\n    changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\n    changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n    changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n    changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT);\n    changeLeftSiderbarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED);\n  };\n\n  return {\n    layoutColor,\n    layoutType,\n    layoutWidth,\n    leftSideBarType,\n    leftSideBarTheme,\n    disableLayoutWidth,\n    disableSidebarTheme,\n    disableSidebarType,\n    changeLayoutType,\n    changeLayoutColorScheme,\n    changeWidthMode,\n    changeLeftSidebarTheme,\n    changeLeftSiderbarType,\n    reset,\n  };\n}\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Dropdown } from 'react-bootstrap';\r\nimport SimpleBar from 'simplebar-react';\r\nimport classNames from 'classnames';\r\nimport { NotificationItem } from '../types';\r\nimport { useToggle } from 'hooks';\r\n\r\n// notifiaction continer styles\r\nconst notificationShowContainerStyle = {\r\n  maxHeight: '300px',\r\n};\r\n\r\ntype NotificationDropdownProps = {\r\n  notifications: Array<NotificationItem>;\r\n};\r\n\r\nconst NotificationDropdown = ({ notifications }: NotificationDropdownProps) => {\r\n  const [isOpen, toggleDropdown] = useToggle();\r\n\r\n  return (\r\n    <Dropdown show={isOpen} onToggle={toggleDropdown}>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-notification\"\r\n        as={Link}\r\n        to=\"#\"\r\n        onClick={toggleDropdown}\r\n        className=\"nav-link dropdown-toggle arrow-none\"\r\n      >\r\n        <i className=\"mdi mdi-bell-outline noti-icon\"></i>\r\n        {notifications.length != 0 ? <span className=\"noti-icon-badge\"></span> : <span></span>}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu className=\"dropdown-menu-animated dropdown-lg\" align=\"end\">\r\n        <div onClick={toggleDropdown}>\r\n          <div className=\"dropdown-item noti-title px-3\">\r\n            <h5 className=\"m-0\">\r\n              <span className=\"float-end\">\r\n                <Link to=\"/notifications\" className=\"text-dark\">\r\n                  <small>Clear All</small>\r\n                </Link>\r\n              </span>\r\n              Notification\r\n            </h5>\r\n          </div>\r\n          <SimpleBar className=\"px-3\" style={notificationShowContainerStyle}>\r\n            {notifications.map((item, index) => {\r\n              return (\r\n                <React.Fragment key={index.toString()}>\r\n                  <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\r\n                  {(item.messages || []).map((message, index) => {\r\n                    return (\r\n                      <Dropdown.Item\r\n                        key={index + '-noti'}\r\n                        className={classNames(\r\n                          'p-0 notify-item card shadow-none mb-2',\r\n                          message.isRead ? 'read-noti' : 'unread-noti'\r\n                        )}\r\n                      >\r\n                        <Card.Body>\r\n                          <span className=\"float-end noti-close-btn text-muted\">\r\n                            <i className=\"mdi mdi-close\"></i>\r\n                          </span>\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <div className=\"flex-shrink-0\">\r\n                              <div className={classNames('notify-icon', message.variant && 'bg-' + message.variant)}>\r\n                                {message.avatar ? (\r\n                                  <img src={message.avatar} className=\"img-fluid rounded-circle\" alt=\"\" />\r\n                                ) : (\r\n                                  <i className={message.icon}></i>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"flex-grow-1 text-truncate ms-2\">\r\n                              <h5 className=\"noti-item-title fw-semibold font-14\">\r\n                                {message.title}{' '}\r\n                                {message.time && <small className=\"fw-normal text-muted ms-1\">{message.time}</small>}\r\n                              </h5>\r\n                              <small className=\"noti-item-subtitle text-muted\">{message.subText}</small>\r\n                            </div>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Dropdown.Item>\r\n                    );\r\n                  })}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n\r\n            <div className=\"text-center\">\r\n              <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\r\n            </div>\r\n          </SimpleBar>\r\n\r\n          <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\r\n            View All\r\n          </Dropdown.Item>\r\n        </div>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default NotificationDropdown;\r\n","import { Link } from 'react-router-dom';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\ntype ProfileDropdownProps = {\r\n  userImage: string;\r\n  username: string;\r\n  userTitle?: string;\r\n};\r\n\r\nconst ProfileDropdown = ({ userTitle, username, userImage }: ProfileDropdownProps) => {\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-profile\"\r\n        as={Link}\r\n        to=\"/settings/user\"\r\n        className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\r\n      >\r\n        <span className=\"account-user-avatar\">\r\n          <img src={userImage} className=\"rounded-circle\" alt=\"user\" referrerPolicy=\"no-referrer\" />\r\n        </span>\r\n        <span>\r\n          <span className=\"account-user-name\">{username}</span>\r\n          <span className=\"account-position\">{userTitle}</span>\r\n        </span>\r\n      </Dropdown.Toggle>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default ProfileDropdown;\r\n","import { initializeApp } from 'firebase/app';\r\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_APIKEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECTID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGEBUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGINGSENDERID,\r\n  appId: process.env.REACT_APP_FIREBASE_APPID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENTID,\r\n};\r\n\r\n// Initialize Firebase\r\nexport default firebaseConfig;\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\nconst messaging = getMessaging(firebaseApp);\r\n\r\nexport const getFirebaseToken = (setTokenFound: any) => {\r\n  return getToken(messaging, { vapidKey: process.env.REACT_APP_FIREBASE_VAPIDKEY })\r\n    .then((currentToken) => {\r\n      if (currentToken) {\r\n        sessionStorage.setItem('fcmRegistrationToken', currentToken);\r\n        setTokenFound(true);\r\n        // Track the token -> client mapping, by sending to backend server\r\n        // show on the UI that permission is secured\r\n      } else {\r\n        console.log('No registration token available. Request permission to generate one.');\r\n        setTokenFound(false);\r\n        // shows on the UI that permission is required\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log('An error occurred while retrieving token. ', err);\r\n      // catch error while creating client token\r\n    });\r\n};\r\n\r\nexport const onMessageListener = () =>\r\n  new Promise((resolve) => {\r\n    onMessage(messaging, (payload) => {\r\n      resolve(payload);\r\n    });\r\n  });\r\n","import { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport { changeSidebarType } from 'redux/actions';\r\nimport * as layoutConstants from 'appConstants';\r\nimport { useRedux, useToggle, useViewport } from 'hooks';\r\nimport NotificationDropdown from './NotificationDropdown';\r\nimport ProfileDropdown from './ProfileDropdown';\r\nimport logoSm from 'assets/images/asyncrum-logo-white-small.png';\r\nimport logo from 'assets/images/asyncrum-logo-white.png';\r\nimport { useEffect, useState } from 'react';\r\nimport { getFirebaseToken, onMessageListener } from './FirebaseConfig';\r\nimport { NotificationItem, Message } from '../types';\r\nimport useThemeCustomizer from 'components/ThemeCustomizer/useThemeCustomizer';\r\nimport { Form } from 'react-bootstrap';\r\n\r\ntype TopbarProps = {\r\n  hideLogo?: boolean;\r\n  navCssClasses?: string;\r\n  openLeftMenuCallBack?: () => void;\r\n  topbarDark?: boolean;\r\n};\r\n\r\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps) => {\r\n  const { layoutColor, changeLayoutColorScheme } = useThemeCustomizer();\r\n  const { dispatch, appSelector } = useRedux();\r\n  const { width } = useViewport();\r\n  const [isMenuOpened, toggleMenu] = useToggle();\r\n  const [isTokenFound, setTokenFound] = useState(false);\r\n  const [notifications, setNotifications] = useState<NotificationItem[]>([]);\r\n\r\n  const { user } = appSelector((state) => ({\r\n    user: state.Auth.user,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    getFirebaseToken(setTokenFound);\r\n  }, []);\r\n\r\n  onMessageListener()\r\n    .then((payload: any) => {\r\n      console.log(payload);\r\n\r\n      const title: string = payload.notification.title;\r\n      const body: string = payload.notification.body;\r\n      const message: Message = {\r\n        id: 1,\r\n        title: title,\r\n        subText: body,\r\n        time: '1 min ago',\r\n        icon: 'mdi mdi-comment-account-outline',\r\n        variant: 'primary',\r\n        isRead: true,\r\n      };\r\n\r\n      const messages: Message[] = [];\r\n      messages.push(message);\r\n\r\n      const notification: NotificationItem = { day: 'Today', messages: messages };\r\n      notifications.push(notification);\r\n\r\n      setNotifications(notifications);\r\n    })\r\n    .catch((err) => console.log('failed: ', err));\r\n\r\n  const containerCssClasses = !hideLogo ? 'container-fluid' : '';\r\n\r\n  const { layoutType, leftSideBarType } = appSelector((state) => ({\r\n    layoutType: state.Layout.layoutType,\r\n    leftSideBarType: state.Layout.leftSideBarType,\r\n  }));\r\n\r\n  /**\r\n   * Toggle the leftmenu when having mobile screen\r\n   */\r\n  const handleLeftMenuCallBack = () => {\r\n    toggleMenu();\r\n    if (openLeftMenuCallBack) openLeftMenuCallBack();\r\n\r\n    switch (layoutType) {\r\n      case layoutConstants.LayoutTypes.LAYOUT_VERTICAL:\r\n        if (width >= 768) {\r\n          if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\r\n            dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\r\n          if (leftSideBarType === 'condensed')\r\n            dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\r\n        }\r\n        break;\r\n\r\n      case layoutConstants.LayoutTypes.LAYOUT_FULL:\r\n        if (document.body) {\r\n          document.body.classList.toggle('hide-menu');\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classNames('navbar-custom', navCssClasses)}>\r\n      <div className={containerCssClasses}>\r\n        {!hideLogo && (\r\n          <Link to=\"/\" className=\"topnav-logo\">\r\n            <span className=\"topnav-logo-lg\">\r\n              <img src={logo} alt=\"logo\" height=\"16\" />\r\n            </span>\r\n            <span className=\"topnav-logo-sm\">\r\n              <img src={logoSm} alt=\"logo\" height=\"16\" />\r\n            </span>\r\n          </Link>\r\n        )}\r\n\r\n        <ul className=\"list-unstyled topbar-menu float-end mb-0\">\r\n          <li className=\"nav-link notification-list\">\r\n            <Form>\r\n              <i className={classNames('uil uil-sun noti-icon', layoutColor === 'light' ? 'text-warning' : '')}></i>\r\n              <Form.Check\r\n                className=\"d-inline-block\"\r\n                type=\"switch\"\r\n                id=\"custom-switch\"\r\n                checked={layoutColor === 'light' ? false : true}\r\n                onChange={(e) => {\r\n                  changeLayoutColorScheme(layoutColor === 'light' ? 'dark' : 'light');\r\n                }}\r\n              />\r\n              <i className={classNames('uil uil-moon noti-icon', layoutColor === 'dark' ? 'text-warning' : '')}></i>\r\n            </Form>\r\n          </li>\r\n          <li className=\"dropdown notification-list\">\r\n            <NotificationDropdown notifications={notifications!} />\r\n          </li>\r\n          <li className=\"dropdown notification-list\">\r\n            <ProfileDropdown userImage={user.profileImageUrl} username={user.fullname} userTitle={'Developer'} />\r\n          </li>\r\n        </ul>\r\n\r\n        {/* toggle for vertical layout */}\r\n        {(layoutType === layoutConstants.LayoutTypes.LAYOUT_VERTICAL ||\r\n          layoutType === layoutConstants.LayoutTypes.LAYOUT_FULL) && (\r\n          <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\r\n            <i className=\"mdi mdi-menu\" />\r\n          </button>\r\n        )}\r\n\r\n        {/* toggle for horizontal layout */}\r\n        {layoutType === layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL && (\r\n          <Link to=\"#\" className={classNames('navbar-toggle', { open: isMenuOpened })} onClick={handleLeftMenuCallBack}>\r\n            <div className=\"lines\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n          </Link>\r\n        )}\r\n\r\n        {/* toggle for detached layout */}\r\n        {layoutType === layoutConstants.LayoutTypes.LAYOUT_DETACHED && (\r\n          <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\r\n            <div className=\"lines\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n          </Link>\r\n        )}\r\n        {/* <TopbarSearch options={searchOptions} /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Topbar;\r\n"],"names":["useThemeCustomizer","useRedux","dispatch","appSelector","state","layoutColor","Layout","layoutType","layoutWidth","leftSideBarTheme","leftSideBarType","useState","disableLayoutWidth","setDisableLayoutWidth","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","_loadStateFromProps","useCallback","layoutConstants","useEffect","changeLayoutType","value","changeLayout","changeLayoutColorScheme","changeLayoutColor","changeWidthMode","changeLayoutWidth","changeLeftSidebarTheme","changeSidebarTheme","changeLeftSiderbarType","changeSidebarType","reset","notificationShowContainerStyle","maxHeight","notifications","useToggle","isOpen","toggleDropdown","Dropdown","show","onToggle","variant","id","as","Link","to","onClick","className","length","align","style","map","item","index","day","messages","message","classNames","isRead","Card","avatar","src","alt","icon","title","time","subText","toString","userTitle","username","userImage","referrerPolicy","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","initializeApp","messaging","getMessaging","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","width","useViewport","isMenuOpened","toggleMenu","setTokenFound","setNotifications","user","Auth","getToken","vapidKey","then","currentToken","sessionStorage","setItem","console","log","catch","err","getFirebaseToken","Promise","resolve","onMessage","payload","notification","body","push","containerCssClasses","handleLeftMenuCallBack","document","classList","toggle","logo","height","logoSm","Form","type","checked","onChange","e","profileImageUrl","fullname","open"],"sourceRoot":""}