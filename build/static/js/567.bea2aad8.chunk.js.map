{"version":3,"file":"static/js/567.bea2aad8.chunk.js","mappings":"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","sources":["pages/settings/InviteMemberButton.tsx","pages/settings/LeftPanel.tsx","pages/settings/MemberCard.tsx","pages/settings/TeamInfoForm.tsx","pages/settings/TeamImageForm.tsx","pages/settings/TeamSettings.tsx","pages/settings/hooks/usePersonalSettings.tsx","pages/settings/hooks/useTeamSettings.tsx"],"sourcesContent":["import { Button, InputGroup, Form, Modal } from 'react-bootstrap';\r\nimport { useToggle } from 'hooks';\r\nimport { InviteMemberButtonProps } from './types';\r\n\r\nconst InviteMemberButton: React.FC<InviteMemberButtonProps> = ({ onInvite }: InviteMemberButtonProps) => {\r\n  const [isInviteOpen, toggleInvite] = useToggle();\r\n\r\n  return (\r\n    <>\r\n      <Button className=\"btn btn-primary\" onClick={toggleInvite}>\r\n        <i className=\"mdi mdi-plus\"></i> Invite\r\n      </Button>\r\n      <Modal show={isInviteOpen} onHide={toggleInvite}>\r\n        <Modal.Body>\r\n          <Modal.Header onHide={toggleInvite} closeButton>\r\n            <h4 className=\"modal-title\">Invite a new member</h4>\r\n          </Modal.Header>\r\n          <form className=\"ps-3 pe-3 mt-3\" onSubmit={onInvite}>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"email\">Invite by Email</Form.Label>\r\n              <InputGroup className=\"mb-3\">\r\n                <Form.Control id=\"email\" type=\"email\" placeholder=\"example@email.com\" />\r\n                <Button type=\"submit\">Send Invitation</Button>\r\n              </InputGroup>\r\n            </Form.Group>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InviteMemberButton;\r\n","import { Link } from 'react-router-dom';\r\nimport { Team } from './types';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { useRedux } from 'hooks';\r\nimport { readTeam } from 'redux/actions';\r\n\r\ntype LeftPanelProps = {\r\n  selected: string;\r\n};\r\n\r\nconst LeftPanel = ({ selected }: LeftPanelProps) => {\r\n  const { dispatch, appSelector } = useRedux();\r\n  const { teamList, currentTeam } = appSelector((state) => ({\r\n    teamList: state.Team.teamList,\r\n    currentTeam: state.Team.currentTeam,\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      {currentTeam && (\r\n        <Dropdown className=\"mb-3\">\r\n          <Dropdown.Toggle className=\"w-100\">\r\n            <i className=\"mdi me-1\"></i> {currentTeam.name}\r\n          </Dropdown.Toggle>\r\n          <Dropdown.Menu className=\"w-100\">\r\n            {teamList.map((team: Team) => {\r\n              return (\r\n                <Dropdown.Item\r\n                  key={team.id}\r\n                  onClick={() => {\r\n                    dispatch(readTeam(team.id));\r\n                  }}\r\n                  active={team.id === currentTeam.id ? true : false}\r\n                >\r\n                  <i className=\"\"></i> {team.name}\r\n                </Dropdown.Item>\r\n              );\r\n            })}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      )}\r\n      <div className=\"email-menu-list\">\r\n        <Link to=\"/settings/user\" className={selected === 'personal' ? 'active text-primary' : ''}>\r\n          <i className=\"mdi mdi-account-outline font-18 align-middle me-2\"></i>Personal Profile\r\n        </Link>\r\n        <Link to=\"/settings/team\" className={selected === 'team' ? 'active text-primary' : ''}>\r\n          <i className=\"mdi mdi-account-group-outline font-18 align-middle me-2\"></i>Team Profile\r\n        </Link>\r\n        <Link to=\"/settings/create-team\">\r\n          <i className=\"mdi mdi-plus font-18 align-middle me-2\"></i>Create Team\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LeftPanel;\r\n","import { Card } from 'react-bootstrap';\r\nimport { Member } from './types';\r\n\r\nconst MemberCard = ({ member }: { member: Member }) => {\r\n  return (\r\n    <Card className=\"d-block mx-2 mb-2 h-100\">\r\n      <Card.Body>\r\n        <div className=\"text-center mb-2\">\r\n          <img src={member.profileImageUrl} className=\"rounded avatar-lg\" alt=\"member\" referrerPolicy=\"no-referrer\" />\r\n        </div>\r\n        <h4 className=\"text-center font-weight-bold mt-3 mb-0\">{member.fullname}</h4>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MemberCard;\r\n","import { Button } from 'react-bootstrap';\r\nimport { FormInput } from 'components';\r\nimport { TeamInfoFormProps } from './types';\r\n\r\nconst TeamInfoForm: React.FC<TeamInfoFormProps> = ({ teamname, onSubmitTeamInfo }: TeamInfoFormProps) => {\r\n  return (\r\n    <form onSubmit={onSubmitTeamInfo}>\r\n      <FormInput\r\n        label=\"Team Name\"\r\n        type=\"text\"\r\n        name=\"name\"\r\n        containerClass={'mb-3'}\r\n        key=\"name\"\r\n        placeholder={teamname}\r\n        required\r\n      />\r\n      <Button color=\"primary\" type=\"submit\">\r\n        Save Changes\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TeamInfoForm;\r\n","import { Button } from 'react-bootstrap';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { TeamImageFormProps } from './types';\r\nimport { useRedux } from 'hooks';\r\n\r\nconst TeamImageForm: React.FC<TeamImageFormProps> = ({\r\n  fileInput,\r\n  previewImage,\r\n  onChangeLogoImage,\r\n  onSaveLogoImage,\r\n  onCancelChangeLogoImage,\r\n}: TeamImageFormProps) => {\r\n  const { appSelector } = useRedux();\r\n  const { currentTeam } = appSelector((state) => ({\r\n    currentTeam: state.Team.currentTeam,\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <div style={{ height: 190, position: 'relative' }}>\r\n        <p className=\"mb-1\" style={{ fontWeight: '600' }}>\r\n          Team Logo\r\n        </p>\r\n        <div className=\"overlay-container\">\r\n          <img\r\n            src={previewImage === currentTeam?.pictureUrl ? currentTeam?.pictureUrl : previewImage}\r\n            alt=\"profile preview\"\r\n            className=\"rounded ratio ratio-1x1\"\r\n            style={{ position: 'absolute', width: 150, height: 150, cursor: 'pointer' }}\r\n            referrerPolicy=\"no-referrer\"\r\n          />\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/png\"\r\n            style={{ display: 'none' }}\r\n            name=\"logoImage\"\r\n            onChange={onChangeLogoImage}\r\n            ref={fileInput}\r\n          />\r\n          <div\r\n            className=\"overlay rounded\"\r\n            onClick={() => {\r\n              if (fileInput.current) {\r\n                fileInput.current.click();\r\n              }\r\n            }}\r\n          >\r\n            <div className=\"overlay-text\">click to upload</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Button className=\"me-2\" onClick={onSaveLogoImage}>\r\n        Save\r\n      </Button>\r\n      <Button className=\"btn btn-secondary\" onClick={onCancelChangeLogoImage}>\r\n        Cancel\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TeamImageForm;\r\n","import { Row, Col, Card, Button, Modal } from 'react-bootstrap';\r\nimport LeftPanel from './LeftPanel';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Member } from './types';\r\nimport MemberCard from './MemberCard';\r\nimport TeamInfoForm from './TeamInfoForm';\r\nimport TeamImageForm from './TeamImageForm';\r\nimport InviteMemberButton from './InviteMemberButton';\r\nimport { useTeamSettings } from './hooks';\r\nimport { useRedux } from 'hooks';\r\n\r\nconst TeamSettings = () => {\r\n  const { appSelector } = useRedux();\r\n  const { currentTeam } = appSelector((state) => ({\r\n    currentTeam: state.Team.currentTeam,\r\n  }));\r\n\r\n  const {\r\n    loading,\r\n    previewImage,\r\n    fileInput,\r\n    isDeleteOpen,\r\n    onSubmitTeamInfo,\r\n    onChangeLogoImage,\r\n    onSaveLogoImage,\r\n    onCancelChangeLogoImage,\r\n    onInvite,\r\n    onLeaveTeam,\r\n    toggleDelete,\r\n    closeModalAfterFunction,\r\n  } = useTeamSettings();\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <div className=\"page-title-box\">\r\n            <h4 className=\"page-title\">Settings</h4>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      {!loading && (\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body>\r\n                <div className=\"page-aside-left\">\r\n                  <LeftPanel selected=\"team\" />\r\n                </div>\r\n\r\n                <div className=\"page-aside-right\">\r\n                  <h4 className=\"mb-3\">Change Team Information</h4>\r\n                  <Row>\r\n                    <Col md={7}>\r\n                      <TeamInfoForm teamname={currentTeam.name} onSubmitTeamInfo={onSubmitTeamInfo} />\r\n                    </Col>\r\n                    <Col md={{ span: 3, offset: 2 }}>\r\n                      <TeamImageForm\r\n                        fileInput={fileInput}\r\n                        previewImage={previewImage}\r\n                        onChangeLogoImage={onChangeLogoImage}\r\n                        onSaveLogoImage={onSaveLogoImage}\r\n                        onCancelChangeLogoImage={onCancelChangeLogoImage}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <hr />\r\n                  <Row className=\"mb-3\">\r\n                    <Col>\r\n                      <span className=\"h4 mb-1 me-3\">Members</span>\r\n                      <InviteMemberButton onInvite={onInvite} />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    {currentTeam?.members?.map((member: Member, i: number) => {\r\n                      return (\r\n                        <Col key={i} sm={6} lg={4} xl={3} className=\"mb-4\">\r\n                          <MemberCard member={member} />\r\n                        </Col>\r\n                      );\r\n                    })}\r\n                  </Row>\r\n                  <hr />\r\n                  <Row>\r\n                    <Col>\r\n                      <h4>Leave {currentTeam.name} team</h4>\r\n                      <p>By leaving the team, you will lose access to all its contents.</p>\r\n                      <Button className=\"btn btn-danger\" onClick={toggleDelete}>\r\n                        Leave Team\r\n                      </Button>\r\n                      <Modal show={isDeleteOpen} onHide={toggleDelete}>\r\n                        <Modal.Body>\r\n                          <Modal.Header onHide={toggleDelete} closeButton>\r\n                            <h4 className=\"modal-title\">Leave {currentTeam.name}</h4>\r\n                          </Modal.Header>\r\n                          <p className=\"mt-4 mb-4 text-center font-weight-bolds\">\r\n                            Are you sure you want to leave {currentTeam.name}?\r\n                          </p>\r\n                          <form\r\n                            className=\"ps-3 pe-3\"\r\n                            onSubmit={(e) => closeModalAfterFunction(onLeaveTeam, e, toggleDelete)}\r\n                          >\r\n                            <div className=\"mb-3 text-center\">\r\n                              <Button className=\"btn btn-danger\" type=\"submit\">\r\n                                Leave Team\r\n                              </Button>\r\n                            </div>\r\n                          </form>\r\n                        </Modal.Body>\r\n                      </Modal>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TeamSettings;\r\n","import { toast } from 'react-toastify';\r\nimport {\r\n  updateProfileInfo as updateProfileInfoAPI,\r\n  createProfileImage as createProfileImageAPI,\r\n  uploadProfileImage as uploadProfileImageAPI,\r\n} from 'helpers';\r\nimport { useRef, useState } from 'react';\r\nimport { useRedux } from 'hooks';\r\n\r\nconst usePersonalSettings = () => {\r\n  const { appSelector } = useRedux();\r\n\r\n  const { user } = appSelector((state) => ({\r\n    user: state.Auth.user,\r\n  }));\r\n\r\n  const [userFullname, setUserFullname] = useState<string>(user.fullname);\r\n  const [previewImage, setPreviewImage] = useState<string>(user.profileImageUrl);\r\n  const [profileImageFile, setProfileImageFile] = useState<null | File>();\r\n\r\n  const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n  const onSubmitProfileInfo = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    let fullname = ((e.target as HTMLFormElement).elements.namedItem('fullname') as HTMLInputElement).value;\r\n    fullname = fullname === '' ? user.fullname : fullname;\r\n    let timezone = ((e.target as HTMLFormElement).elements.namedItem('timezone') as HTMLInputElement).value;\r\n    timezone = timezone === '' ? user.timeZone : timezone;\r\n    const fcmRegistrationToken = sessionStorage.getItem('fcmRegistrationToken');\r\n    await updateProfileInfoAPI({ fullname, timezone, fcmRegistrationToken });\r\n    setUserFullname(fullname);\r\n    user.fullname = fullname;\r\n    user.timeZone = timezone;\r\n    sessionStorage.setItem('asyncrum_user', JSON.stringify(user));\r\n    (e.target as HTMLFormElement).reset();\r\n    changeInfoNotify();\r\n  };\r\n\r\n  const onChangeProfileImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!e.target.files) {\r\n      setPreviewImage(user.profileImageUrl);\r\n      return;\r\n    } else {\r\n      setProfileImageFile(e.target.files[0]);\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      if (reader.readyState === 2) {\r\n        setPreviewImage(reader.result as string);\r\n      }\r\n    };\r\n\r\n    reader.readAsDataURL(e.target.files[0]);\r\n  };\r\n\r\n  const onSaveProfileImage = async (e: React.MouseEvent<HTMLElement>) => {\r\n    e.preventDefault();\r\n    if (!profileImageFile) {\r\n      return;\r\n    } else {\r\n      const createProfileImageAPIResponse = await createProfileImageAPI();\r\n      const presignedURL = createProfileImageAPIResponse.data.preSignedURL;\r\n      await uploadProfileImageAPI(presignedURL, profileImageFile);\r\n      changeImageNotify();\r\n    }\r\n  };\r\n\r\n  const onCancelChangeProfileImage = () => {\r\n    setPreviewImage(user.profileImageUrl);\r\n    setProfileImageFile(null);\r\n  };\r\n\r\n  const changeInfoNotify = () => toast(<div>Personal information changed successfully!</div>);\r\n\r\n  const changeImageNotify = () =>\r\n    toast(\r\n      <div>\r\n        Profile image saved successfully!\r\n        <br />\r\n        The change might take a few minutes to be applied.\r\n      </div>\r\n    );\r\n\r\n  return {\r\n    userFullname,\r\n    previewImage,\r\n    profileImageFile,\r\n    fileInput,\r\n    onSubmitProfileInfo,\r\n    onChangeProfileImage,\r\n    onSaveProfileImage,\r\n    onCancelChangeProfileImage,\r\n  };\r\n};\r\n\r\nexport default usePersonalSettings;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useRedux, useToggle } from 'hooks';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n  createLogoImage as createLogoImageAPI,\r\n  uploadLogoImage as uploadLogoImageAPI,\r\n  inviteMember as inviteMemberAPI,\r\n} from 'helpers';\r\nimport { createTeam, readTeam, updateTeam, leaveTeam } from 'redux/actions';\r\nimport { Invitation } from '../types';\r\nimport defaultImage from 'assets/images/asyncrum-logo-small.png';\r\n\r\nconst useTeamSettings = () => {\r\n  const { dispatch, appSelector } = useRedux();\r\n\r\n  const { user, currentTeam } = appSelector((state) => ({\r\n    user: state.Auth.user,\r\n    currentTeam: state.Team.currentTeam,\r\n  }));\r\n\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [previewImage, setPreviewImage] = useState<string>(currentTeam?.pictureUrl);\r\n  const [logoImageFile, setLogoImageFile] = useState<null | File>();\r\n  const [isDeleteOpen, toggleDelete] = useToggle();\r\n\r\n  const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (currentTeam) {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setPreviewImage(currentTeam?.pictureUrl);\r\n  }, [currentTeam]);\r\n\r\n  const onCreateTeam = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const name = ((e.target as HTMLFormElement).elements.namedItem('name') as HTMLInputElement).value;\r\n    const code = name.slice(0, 3) + Date.now();\r\n    dispatch(createTeam(name, code));\r\n  };\r\n\r\n  const onSubmitTeamInfo = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!currentTeam) {\r\n      return;\r\n    }\r\n    const name = ((e.target as HTMLFormElement).elements.namedItem('name') as HTMLInputElement).value;\r\n    dispatch(updateTeam(currentTeam.id, name));\r\n    (e.target as HTMLFormElement).reset();\r\n    changeInfoNotify();\r\n  };\r\n\r\n  const onChangeLogoImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!e.target.files) {\r\n      setPreviewImage(currentTeam?.pictureUrl);\r\n      return;\r\n    } else {\r\n      setLogoImageFile(e.target.files[0]);\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      if (reader.readyState === 2) {\r\n        setPreviewImage(reader.result as string);\r\n      }\r\n    };\r\n\r\n    reader.readAsDataURL(e.target.files[0]);\r\n  };\r\n\r\n  const onSaveLogoImage = async (e: React.MouseEvent<HTMLElement>) => {\r\n    e.preventDefault();\r\n    if (!logoImageFile || !currentTeam) {\r\n      return;\r\n    } else {\r\n      const createLogoImageAPIResponse = await createLogoImageAPI(currentTeam.id);\r\n      const presignedURL = createLogoImageAPIResponse.data.preSignedURL;\r\n      await uploadLogoImageAPI(presignedURL, logoImageFile);\r\n      dispatch(readTeam(currentTeam.id));\r\n      changeImageNotify();\r\n    }\r\n  };\r\n\r\n  const onCancelChangeLogoImage = () => {\r\n    setPreviewImage(currentTeam?.pictureUrl ? currentTeam?.pictureUrl : defaultImage);\r\n    setLogoImageFile(null);\r\n  };\r\n\r\n  const onInvite = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!currentTeam) {\r\n      return;\r\n    }\r\n    const email = ((e.target as HTMLFormElement).elements.namedItem('email') as HTMLInputElement).value;\r\n    const invitationData: Invitation = {\r\n      memberId: null,\r\n      memberEmail: email,\r\n    };\r\n    await inviteMemberAPI(currentTeam.id, invitationData);\r\n    (e.target as HTMLFormElement).reset();\r\n    invitationNotify(email);\r\n  };\r\n\r\n  const onLeaveTeam = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(leaveTeam(currentTeam.id, user.id));\r\n  };\r\n\r\n  const changeInfoNotify = () => {\r\n    toast(<div>Team Information changed successfully!</div>);\r\n  };\r\n\r\n  const changeImageNotify = () =>\r\n    toast(\r\n      <div>\r\n        Team logo saved successfully!\r\n        <br />\r\n        The change might take a few minutes to be applied.\r\n      </div>\r\n    );\r\n\r\n  const invitationNotify = (email: string) =>\r\n    toast(\r\n      <div>\r\n        Invitation sent to <b>{email}</b>!\r\n      </div>\r\n    );\r\n\r\n  const closeModalAfterFunction = (\r\n    f: (e: React.FormEvent<HTMLFormElement>) => void,\r\n    event: React.FormEvent<HTMLFormElement>,\r\n    toggle: () => void\r\n  ) => {\r\n    f(event);\r\n    toggle();\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    previewImage,\r\n    defaultImage,\r\n    logoImageFile,\r\n    fileInput,\r\n    isDeleteOpen,\r\n    setPreviewImage,\r\n    onCreateTeam,\r\n    onSubmitTeamInfo,\r\n    onChangeLogoImage,\r\n    onSaveLogoImage,\r\n    onCancelChangeLogoImage,\r\n    onInvite,\r\n    onLeaveTeam,\r\n    toggleDelete,\r\n    closeModalAfterFunction,\r\n  };\r\n};\r\n\r\nexport default useTeamSettings;\r\n"],"names":["onInvite","useToggle","isInviteOpen","toggleInvite","className","onClick","show","onHide","closeButton","onSubmit","htmlFor","id","type","placeholder","selected","useRedux","dispatch","appSelector","state","teamList","Team","currentTeam","name","map","team","readTeam","active","to","member","Card","src","profileImageUrl","alt","referrerPolicy","fullname","teamname","onSubmitTeamInfo","label","containerClass","required","Button","color","fileInput","previewImage","onChangeLogoImage","onSaveLogoImage","onCancelChangeLogoImage","style","height","position","fontWeight","pictureUrl","width","cursor","accept","display","onChange","ref","current","click","useTeamSettings","loading","isDeleteOpen","onLeaveTeam","toggleDelete","closeModalAfterFunction","Row","Col","LeftPanel","md","span","offset","InviteMemberButton","members","i","sm","lg","xl","Modal","e","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","user","Auth","useState","userFullname","setUserFullname","setPreviewImage","profileImageFile","setProfileImageFile","useRef","onSubmitProfileInfo","preventDefault","target","elements","namedItem","value","timezone","timeZone","fcmRegistrationToken","sessionStorage","getItem","updateProfileInfoAPI","setItem","JSON","stringify","reset","changeInfoNotify","onSaveProfileImage","createProfileImageAPI","createProfileImageAPIResponse","presignedURL","data","preSignedURL","uploadProfileImageAPI","changeImageNotify","toast","onChangeProfileImage","files","reader","FileReader","onload","readyState","result","readAsDataURL","onCancelChangeProfileImage","setLoading","logoImageFile","setLogoImageFile","useEffect","onCreateTeam","code","slice","Date","now","createTeam","updateTeam","createLogoImageAPI","createLogoImageAPIResponse","uploadLogoImageAPI","email","invitationData","memberId","memberEmail","inviteMemberAPI","invitationNotify","defaultImage","leaveTeam","f","event","toggle"],"sourceRoot":""}