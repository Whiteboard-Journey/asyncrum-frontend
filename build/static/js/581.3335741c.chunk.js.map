{"version":3,"file":"static/js/581.3335741c.chunk.js","mappings":"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","sources":["pages/apps/Whiteboard/Whiteboard.tsx"],"sourcesContent":["import { TDFile, TDShape, TDBinding, TDUser, Tldraw, TldrawApp, TDAsset, useFileSystem } from '@krapi0314/tldraw';\nimport { Utils } from '@krapi0314/tldraw-core';\nimport { useThrottleCallback } from '@react-hook/throttle';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as yorkie from 'yorkie-js-sdk';\nimport { useRedux } from 'hooks';\n\n// 0. Yorkie Client declaration\nlet client: yorkie.Client<yorkie.Indexable>\n\n// 0. Yorkie Document declaration\nlet doc: yorkie.Document<yorkie.Indexable>\n\n// 0. Yorkie type for typescript\ntype options = {\n  apiKey?: string,\n  presence: object,\n  syncLoopDuration: number,\n  reconnectStreamDelay: number\n}\ntype YorkieDocType = {\n  shapes: Record<string, TDShape>\n  bindings: Record<string, TDBinding>\n  assets: Record<string, TDAsset>\n}\n\nconst Whiteboard = () => {\n  const [id, setId] = useState<string>();\n  const { appSelector } = useRedux();\n\n  const { user } = appSelector((state) => ({\n    user: state.Auth.user,\n  }));\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const paramId = params.get('id');\n\n    if(typeof paramId === 'string'){\n      setId(paramId);\n    }\n  }, [])\n\n\n  function useMultiplayerState(roomId: string, userName: string) {\n    const [app, setApp] = useState<TldrawApp>()\n    const [loading, setLoading] = useState(true)\n  \n    // Callbacks --------------\n  \n    const onMount = useCallback(\n      (app: TldrawApp) => {\n        app.loadRoom(roomId, user.fullname ? user.fullname : 'Anony')\n        app.setIsLoading(true)\n        app.pause()\n        setApp(app)\n      },\n      [roomId]\n    )\n  \n    // Update Yorkie doc when the app's shapes change.\n    // Prevent overloading yorkie update api call by throttle\n    const onChangePage = useThrottleCallback(\n      (\n        app: TldrawApp,\n        shapes: Record<string, TDShape | undefined>,\n        bindings: Record<string, TDBinding | undefined>,\n        assets: Record<string, TDAsset | undefined>\n      ) => {\n        if (!app || client === undefined || doc === undefined) return\n  \n        doc.update((root) => {\n          Object.entries(shapes).forEach(([id, shape]) => {\n            if (!shape) {\n              delete root.shapes[id]\n            } else {\n              root.shapes[id] = shape\n            }\n          })\n  \n          Object.entries(bindings).forEach(([id, binding]) => {\n            if (!binding) {\n              delete root.bindings[id]\n            } else {\n              root.bindings[id] = binding\n            }\n          })\n  \n          // Should store app.document.assets which is global asset storage referenced by inner page assets\n          // Document key for assets should be asset.id (string), not index\n          Object.entries(app.assets).forEach(([id, asset]) => {\n            if (!asset) {\n              delete root.assets[asset.id]\n            } else {\n              root.assets[asset.id] = asset\n            }\n          })\n        })\n      },\n      60,\n      false\n    )\n  \n    // UndoManager will be implemented in further demo\n    const onUndo = useCallback(() => {\n      return\n    }, [])\n  \n    // RedoManager will be implemented in further demo\n    const onRedo = useCallback(() => {\n      return\n    }, [])\n  \n    // Handle presence updates when the user's pointer / selection changes\n    const onChangePresence = useThrottleCallback((app: TldrawApp, user: TDUser) => {\n      if (!app || client === undefined || !client.isActive()) return\n  \n      client.updatePresence(\"user\", user)\n    }, 60, false)\n  \n    // Document Changes --------\n  \n    useEffect(() => {\n      if (!app) return\n  \n      // Detach & deactive yorkie client before unload\n      async function handleDisconnect() {\n        if (client === undefined || doc === undefined) return\n\n        console.log(\"datach\")\n  \n        await client.detach(doc);\n        await client.deactivate();\n      }\n  \n      window.addEventListener(\"beforeunload\", handleDisconnect);\n      //window.addEventListener(\"popstate\", handleDisconnect);\n  \n      // Subscribe to changes\n      function handleChanges() {\n        const root = doc.getRoot()\n  \n        // WARNING: hard-coded section --------\n        // Parse proxy object to record\n        // eslint-disable-next-line\n        const shapeRecord: Record<string, TDShape> = JSON.parse(root.shapes.toJSON().replace(/\\\\\\'/g, \"'\"))\n        const bindingRecord: Record<string, TDBinding> = JSON.parse(root.bindings.toJSON())\n        const assetRecord: Record<string, TDAsset> = JSON.parse(root.assets.toJSON())\n\n        // Replace page content with changed(propagated) records\n        app?.replacePageContent(shapeRecord, bindingRecord, assetRecord)\n      }\n  \n      let stillAlive = true\n  \n      // Setup the document's storage and subscriptions\n      async function setupDocument() {\n        try {\n          // 01. Active client with RPCAddr(envoy) with presence\n          //     also add apiKey if provided\n          const options: options = {\n            apiKey: \"\",\n            presence: {\n              user: app?.currentUser,\n            },\n            syncLoopDuration: 0,\n            reconnectStreamDelay: 1000\n          }\n  \n          if (`${process.env.REACT_APP_YORKIE_API_KEY}`) {\n            options.apiKey = `${process.env.REACT_APP_YORKIE_API_KEY}`;\n          }\n  \n          client = new yorkie.Client(\n            `${process.env.REACT_APP_API_URL}/yorkie`, options\n          )\n          await client.activate()\n  \n          // 01-1. Subscribe peers-changed event and update tldraw users state\n          client.subscribe((event) => {\n            if (event.type === 'peers-changed') {\n              const peers = event.value[doc.getKey()]\n  \n              // Compare with local user list and get leaved user list\n              // Then remove leaved users\n              const localUsers = Object.values(app!.room!.users)\n              const remoteUsers = Object.values(peers).map((presence) => presence.user).filter(Boolean)\n              const leavedUsers = localUsers.filter(({ id: id1 }) => !remoteUsers.some(({ id: id2 }) => id2 === id1))\n  \n              leavedUsers.forEach((user) => {\n                app?.removeUser(user.id)\n              })\n  \n              // Then update users\n              app?.updateUsers(\n                remoteUsers\n              )\n            }\n          })\n  \n          // 02. Attach document into the client with specifiy doc name\n          doc = new yorkie.Document<YorkieDocType>(roomId)\n          await client.attach(doc)\n  \n          // 03. Initialize document if document did not exists\n          doc.update((root) => {\n            if (!root.shapes) {\n              root.shapes = {}\n            }\n            if (!root.bindings) {\n              root.bindings = {}\n            }\n            if (!root.assets) {\n              root.assets = {}\n            }\n          }, 'create shapes/bindings/assets object if not exists')\n  \n          // 04. Subscribe document event and handle changes\n          doc.subscribe((event) => {\n            if (event.type === 'remote-change') {\n              handleChanges()\n            }\n          })\n  \n          // 05. Sync client\n          await client.sync()\n  \n          if (stillAlive) {\n            // Update the document with initial content\n            handleChanges()\n  \n            // Zoom to fit the content & finish loading\n            if (app) {\n              app.zoomToFit()\n              if (app.zoom > 1) {\n                app.resetZoom()\n              }\n              app.setIsLoading(false)\n            }\n  \n            setLoading(false)\n          }\n        } catch (e) {\n          console.error(e)\n        }\n      }\n  \n      setupDocument()\n  \n      return () => {\n        window.removeEventListener(\"beforeunload\", handleDisconnect);\n        //window.removeEventListener(\"popstate\", handleDisconnect);\n        stillAlive = false\n      }\n    }, [app])\n  \n    return {\n      onMount,\n      onChangePage,\n      onUndo,\n      onRedo,\n      loading,\n      onChangePresence,\n    }\n  }\n\n  function useMultiplayerAssets() {\n    const onAssetCreate = useCallback(\n      // 1. Get presigned url from aws getPresignedUrl lambda function\n      // 2. Upload (put) asset with presigned url\n      async (app: TldrawApp, file: File, id: string): Promise<string | false> => {\n        const fileName = encodeURIComponent((id ?? Utils.uniqueId()) + '-' + file.name)\n        const fileType = encodeURIComponent(file.type)\n  \n        const res = await fetch(`${process.env.REACT_APP_AWS_PRESIGNED_URL_ADDR}?fileName=${fileName}&fileType=${fileType}`)\n        const { uploadURL, fileUrl } = await res.json()\n  \n        const upload = await fetch(uploadURL, {\n          method: 'PUT',\n          body: file\n        })\n  \n        if (!upload.ok) return false\n  \n        return fileUrl\n      },\n      []\n    )\n    \n    const onAssetDelete = useCallback(\n      // 1. Call deleteS3Object aws lamdba function to delete file on s3 bucket\n      async (app: TldrawApp, assetId: string): Promise<boolean> => {\n        let fileName = \"\"\n        \n        Object.entries(app.assets).forEach(([id, asset]) => {\n          if (assetId === asset.id) {\n            const filePath: string = asset.src\n            fileName = filePath.split('/')[4]\n          }\n        })\n  \n        await fetch(`${process.env.REACT_APP_AWS_DELETE_OBJECT_ADDR}?fileName=${fileName}`)\n  \n        return true\n      }, [])\n  \n    const onAssetUpload = useCallback(\n      // 1. Get presigned url from aws getPresignedUrl lambda function\n      // 2. Upload (put) asset with presigned url\n      async (app: TldrawApp, file: File, id: string): Promise<string | false> => {\n        const fileName = encodeURIComponent((id ?? Utils.uniqueId()) + '-' + file.name)\n        const fileType = encodeURIComponent(file.type)\n  \n        const res = await fetch(`${process.env.REACT_APP_AWS_PRESIGNED_URL_ADDR}?fileName=${fileName}&fileType=${fileType}`)\n        const { uploadURL, fileUrl } = await res.json()\n  \n        const upload = await fetch(uploadURL, {\n          method: 'PUT',\n          body: file\n        })\n  \n        if (!upload.ok) return false\n  \n        return fileUrl\n      },\n      []\n    )\n  \n    return {\n      onAssetCreate,\n      onAssetDelete,\n      onAssetUpload\n    }\n  }\n\n  const fileSystemEvents = useFileSystem();\n  const { ...events } = useMultiplayerState(id ? id : 'default', '');\n  const { ...assetEvents } = useMultiplayerAssets();\n\n  return (\n    <div>\n      <Tldraw autofocus disableAssets={false} showPages={false} {...assetEvents} {...fileSystemEvents} {...events} />\n    </div>\n  );\n};\n\nexport { Whiteboard };\n"],"names":["client","doc","Whiteboard","useState","id","setId","user","appSelector","useRedux","state","Auth","useEffect","paramId","URLSearchParams","window","location","search","get","fileSystemEvents","useFileSystem","roomId","userName","app","setApp","loading","setLoading","onMount","useCallback","loadRoom","fullname","setIsLoading","pause","onChangePage","useThrottleCallback","shapes","bindings","assets","undefined","update","root","Object","entries","forEach","shape","binding","asset","onUndo","onRedo","onChangePresence","isActive","updatePresence","addEventListener","handleDisconnect","stillAlive","setupDocument","removeEventListener","console","log","detach","deactivate","handleChanges","getRoot","shapeRecord","JSON","parse","toJSON","replace","bindingRecord","assetRecord","replacePageContent","options","apiKey","presence","currentUser","syncLoopDuration","reconnectStreamDelay","process","yorkie","activate","subscribe","event","type","peers","value","getKey","localUsers","values","room","users","remoteUsers","map","filter","Boolean","id1","some","removeUser","updateUsers","attach","sync","zoomToFit","zoom","resetZoom","error","useMultiplayerState","events","onAssetCreate","file","fileName","encodeURIComponent","Utils","name","fileType","fetch","res","json","uploadURL","fileUrl","method","body","ok","onAssetDelete","assetId","filePath","src","split","REACT_APP_AWS_DELETE_OBJECT_ADDR","onAssetUpload","useMultiplayerAssets","assetEvents","autofocus","disableAssets","showPages"],"sourceRoot":""}