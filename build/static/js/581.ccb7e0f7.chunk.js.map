{"version":3,"file":"static/js/581.ccb7e0f7.chunk.js","mappings":"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","sources":["pages/apps/Whiteboard/Whiteboard.tsx"],"sourcesContent":["import { TDFile, TDShape, TDBinding, TDUser, Tldraw, TldrawApp, TDAsset, useFileSystem } from \"@krapi0314/tldraw\"\nimport { Utils } from '@krapi0314/tldraw-core'\nimport { useThrottleCallback } from '@react-hook/throttle'\nimport { useCallback, useEffect, useState } from \"react\";\nimport * as yorkie from \"yorkie-js-sdk\";\n\nconst params = new URLSearchParams(window.location.search);\nconst id = params.get('id');\nconst url = params.get('url');\nconst user = JSON.parse(sessionStorage.getItem('asyncrum_user')!)\n\n// 0. Yorkie Client declaration\nlet client: yorkie.Client<yorkie.Indexable>\n\n// 0. Yorkie Document declaration\nlet doc: yorkie.Document<yorkie.Indexable>\n\n// 0. Yorkie type for typescript\ntype YorkieDocType = {\n  shapes: Record<string, TDShape>\n  bindings: Record<string, TDBinding>\n  assets: Record<string, TDAsset>\n}\n\n// const client = new yorkie.Client('https://api.asyncrum.com:8090');\n// const doc = new yorkie.Document<YorkieType>(id ? id : 'temp');\n\nconst Whiteboard = () => {\n\n  function useMultiplayerState(roomId: string, url?: string) {\n    const [app, setApp] = useState<TldrawApp>();\n    const [loading, setLoading] = useState(true);\n\n    // Callbacks --------------\n\n    const onMount = useCallback(\n      async (app: TldrawApp) => {\n        console.log(user)\n        app.loadRoom(roomId, user.fullname ? user.fullname : \"Anony\");\n        app.setIsLoading(true)\n        app.pause();\n        // if (url) {\n        //   fetch(url)\n        //     .then((res) => res.blob())\n        //     .then(async (data) => {\n        //       let json: string = await new Promise((resolve) => {\n        //         const reader = new FileReader();\n        //         reader.onloadend = () => {\n        //           if (reader.readyState === FileReader.DONE) {\n        //             resolve(reader.result as string);\n        //           }\n        //         }\n        //         reader.readAsText(data, 'utf8');\n        //       });\n        //       json = json.slice(json.indexOf('{'), json.lastIndexOf('}') + 1);\n        //       const file: TDFile = JSON.parse(json);\n        //       app.loadDocument(file.document);\n        //     });\n        // }\n        setApp(app);\n      },\n      [roomId, url]\n    );\n\n    // Update Yorkie doc when the app's shapes change.\n    // Prevent overloading yorkie update api call by throttle\n    const onChangePage = useThrottleCallback(\n      (\n        app: TldrawApp,\n        shapes: Record<string, TDShape | undefined>,\n        bindings: Record<string, TDBinding | undefined>,\n        assets: Record<string, TDAsset | undefined>\n      ) => {\n        if (!app || client === undefined || doc === undefined) return\n\n        doc.update((root) => {\n          Object.entries(shapes).forEach(([id, shape]) => {\n            if (!shape) {\n              delete root.shapes[id]\n            } else {\n              root.shapes[id] = shape\n            }\n          })\n\n          Object.entries(bindings).forEach(([id, binding]) => {\n            if (!binding) {\n              delete root.bindings[id]\n            } else {\n              root.bindings[id] = binding\n            }\n          })\n\n          // Should store app.document.assets which is global asset storage referenced by inner page assets\n          // Document key for assets should be asset.id (string), not index\n          Object.entries(app.assets).forEach(([id, asset]) => {\n            if (!asset) {\n              delete root.assets[asset.id]\n            } else {\n              root.assets[asset.id] = asset\n            }\n          })\n        })\n      },\n      60,\n      false\n    )\n\n    // UndoManager will be implemented in further demo\n    const onUndo = useCallback(() => {\n    }, [])\n\n    // RedoManager will be implemented in further demo\n    const onRedo = useCallback(() => {\n    }, [])\n\n    // Handle presence updates when the user's pointer / selection changes\n    const onChangePresence = useThrottleCallback((app: TldrawApp, user: TDUser) => {\n      if (!app || client === undefined || !client.isActive()) return\n\n      client.updatePresence(\"user\", user)\n    }, 60, false)\n\n    // Document Changes --------\n    \n    useEffect(() => {\n      if (!app) return\n  \n      // Detach & deactive yorkie client before unload\n      function handleDisconnect() {\n        if (client === undefined || doc === undefined) return\n  \n        client.detach(doc);\n        client.deactivate();\n      }\n  \n      window.addEventListener(\"beforeunload\", handleDisconnect);\n  \n      // Subscribe to changes\n      function handleChanges() {\n        const root = doc.getRoot()\n  \n        // WARNING: hard-coded section --------\n        // Parse proxy object to record\n        const shapeRecord: Record<string, TDShape> = JSON.parse(root.shapes.toJSON().replace(/\\\\\\'/g, \"'\"))\n        const bindingRecord: Record<string, TDBinding> = JSON.parse(root.bindings.toJSON())\n        const assetRecord: Record<string, TDAsset> = JSON.parse(root.assets.toJSON())\n  \n        // Replace page content with changed(propagated) records\n        app?.replacePageContent(shapeRecord, bindingRecord, assetRecord)\n      }\n  \n      let stillAlive = true\n  \n      // Setup the document's storage and subscriptions\n      async function setupDocument() {\n        try {\n          // 01. Active client with RPCAddr(envoy) with presence\n          const options = {\n            presence: {\n              user: app?.currentUser,\n            },\n            syncLoopDuration: 0,\n            reconnectStreamDelay: 1000\n          }\n          client = new yorkie.Client(\n            `https://api.asyncrum.com:8090`, options\n          )\n          await client.activate()\n  \n          // 01-1. Subscribe peers-changed event and update tldraw users state\n          client.subscribe((event) => {\n            if (event.type === 'peers-changed') {\n              const peers = event.value[doc.getKey()]\n              \n              // Compare with local user list and get leaved user list\n              // Then remove leaved users\n              const localUsers = Object.values(app!.room!.users)\n              const remoteUsers = Object.values(peers).map((presence) => presence.user).filter(Boolean)\n              const leavedUsers = localUsers.filter(({ id : id1 }) => !remoteUsers.some(({ id : id2 }) => id2 === id1))\n  \n              leavedUsers.forEach((user) => {\n                app?.removeUser(user.id)\n              })\n              \n              // Then update users\n              app?.updateUsers(\n                remoteUsers\n              )\n            }\n          })\n  \n          // 02. Attach document into the client with specifiy doc name\n          doc = new yorkie.Document<YorkieDocType>(roomId)\n          await client.attach(doc)\n  \n          // 03. Initialize document if document did not exists\n          doc.update((root) => {\n            if (!root.shapes) {\n              root.shapes = {}\n            }\n            if (!root.bindings) {\n              root.bindings = {}\n            }\n            if (!root.assets) {\n              root.assets = {}\n            }\n          }, 'create shapes/bindings/assets object if not exists')\n  \n          // 04. Subscribe document event and handle changes\n          doc.subscribe((event) => {\n            if (event.type === 'remote-change') {\n              handleChanges()\n            }\n          })\n  \n          // 05. Sync client\n          await client.sync()\n  \n          if (stillAlive) {\n            // Update the document with initial content\n            handleChanges()\n  \n            // Zoom to fit the content & finish loading\n            if (app) {\n              app.zoomToFit()\n              if (app.zoom > 1) {\n                app.resetZoom()\n              }\n              app.setIsLoading(false)\n            }\n  \n            setLoading(false)\n          }\n        } catch (e) {\n          console.error(e)\n        }\n      }\n  \n      setupDocument()\n  \n      return () => {\n        window.removeEventListener(\"beforeunload\", handleDisconnect);\n        stillAlive = false\n      }\n    }, [app])\n  \n    return {\n      onMount,\n      onChangePage,\n      onUndo,\n      onRedo,\n      loading,\n      onChangePresence,\n    }\n  }\n\n  function useMultiplayerAssets() {\n    const onAssetCreate = useCallback(\n      // Send the asset to our upload endpoint, which in turn will send it to AWS and\n      // Respond with the URL of the uploaded file.\n      async (app: TldrawApp, file: File, id: string): Promise<string | false> => {\n        const fileName = encodeURIComponent((id ?? Utils.uniqueId()) + '-' + file.name)\n        const fileType = encodeURIComponent(file.type)\n  \n        const res = await fetch(`https://toygu5z9eb.execute-api.ap-northeast-2.amazonaws.com/default/getPresignedURL?fileName=${fileName}&fileType=${fileType}`)\n        const { uploadURL, fileUrl } = await res.json()\n  \n        const upload = await fetch(uploadURL, {\n          method: 'PUT',\n          body: file\n        })\n  \n        if (!upload.ok) return false\n  \n        return fileUrl\n      },\n      []\n    )\n  \n    // onAssetDelete will be implemented in further demo\n    const onAssetDelete = useCallback(async (app: TldrawApp, id: string): Promise<boolean> => {\n      // noop\n      return true\n    }, [])\n  \n    const onAssetUpload = useCallback(\n      // Send the asset to our upload endpoint, which in turn will send it to AWS and\n      // Respond with the URL of the uploaded file.\n  \n      async (app: TldrawApp, file: File, id: string): Promise<string | false> => {\n        const fileName = encodeURIComponent((id ?? Utils.uniqueId()) + '-' + file.name)\n        const fileType = encodeURIComponent(file.type)\n  \n        const res = await fetch(`https://toygu5z9eb.execute-api.ap-northeast-2.amazonaws.com/default/getPresignedURL?fileName=${fileName}&fileType=${fileType}`)\n        const { uploadURL, fileUrl } = await res.json()\n  \n        const upload = await fetch(uploadURL, {\n          method: 'PUT',\n          body: file\n        })\n  \n        if (!upload.ok) return false\n  \n        return fileUrl\n      },\n      []\n    )\n  \n    return {\n      onAssetCreate,\n      onAssetDelete,\n      onAssetUpload\n    }\n  }\n  \n  const fileSystemEvents = useFileSystem();\n  const { ...events } = useMultiplayerState(id ? id : 'temp', url ? url : '');\n  const { ...assetEvents } = useMultiplayerAssets()\n\n  return (\n    <div>\n      <Tldraw\n        autofocus\n        disableAssets={false}\n        showPages={false}\n        {...assetEvents}\n        {...fileSystemEvents}\n        {...events}\n      />\n    </div>);\n}\n\nexport { Whiteboard };"],"names":["client","doc","params","URLSearchParams","window","location","search","id","get","url","user","JSON","parse","sessionStorage","getItem","Whiteboard","fileSystemEvents","useFileSystem","roomId","useState","app","setApp","loading","setLoading","onMount","useCallback","console","log","loadRoom","fullname","setIsLoading","pause","onChangePage","useThrottleCallback","shapes","bindings","assets","undefined","update","root","Object","entries","forEach","shape","binding","asset","onUndo","onRedo","onChangePresence","isActive","updatePresence","useEffect","addEventListener","handleDisconnect","stillAlive","setupDocument","removeEventListener","detach","deactivate","handleChanges","getRoot","shapeRecord","toJSON","replace","bindingRecord","assetRecord","replacePageContent","options","presence","currentUser","syncLoopDuration","reconnectStreamDelay","yorkie","activate","subscribe","event","type","peers","value","getKey","localUsers","values","room","users","remoteUsers","map","filter","Boolean","id1","some","removeUser","updateUsers","attach","sync","zoomToFit","zoom","resetZoom","error","useMultiplayerState","events","onAssetCreate","file","fileName","encodeURIComponent","Utils","name","fileType","fetch","res","json","uploadURL","fileUrl","method","body","ok","onAssetDelete","onAssetUpload","useMultiplayerAssets","assetEvents","autofocus","disableAssets","showPages"],"sourceRoot":""}