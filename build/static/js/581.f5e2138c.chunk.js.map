{"version":3,"file":"static/js/581.f5e2138c.chunk.js","mappings":"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","sources":["pages/apps/Whiteboard/Whiteboard.tsx"],"sourcesContent":["import { TDShape, TDBinding, TDUser, Tldraw, TldrawApp, TDAsset, useFileSystem } from '@krapi0314/tldraw';\r\nimport { Utils } from '@krapi0314/tldraw-core';\r\nimport { useThrottleCallback } from '@react-hook/throttle';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport * as yorkie from 'yorkie-js-sdk';\r\nimport { useRedux } from 'hooks';\r\n\r\n// 0. Yorkie Client declaration\r\nlet client: yorkie.Client<yorkie.Indexable>;\r\n\r\n// 0. Yorkie Document declaration\r\nlet doc: yorkie.Document<yorkie.Indexable>;\r\n\r\n// 0. Yorkie type for typescript\r\ntype options = {\r\n  apiKey?: string;\r\n  presence: object;\r\n  syncLoopDuration: number;\r\n  reconnectStreamDelay: number;\r\n};\r\ntype YorkieDocType = {\r\n  shapes: Record<string, TDShape>;\r\n  bindings: Record<string, TDBinding>;\r\n  assets: Record<string, TDAsset>;\r\n};\r\n\r\nconst Whiteboard = () => {\r\n  const [id, setId] = useState<string>();\r\n  const { appSelector } = useRedux();\r\n\r\n  const { user } = appSelector((state) => ({\r\n    user: state.Auth.user,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const paramId = params.get('id');\r\n\r\n    if (typeof paramId === 'string') {\r\n      setId(paramId);\r\n    }\r\n  }, []);\r\n\r\n  function useMultiplayerState(roomId: string, userName: string) {\r\n    const [app, setApp] = useState<TldrawApp>();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Callbacks --------------\r\n\r\n    const onMount = useCallback(\r\n      (app: TldrawApp) => {\r\n        app.loadRoom(roomId, user.fullname ? user.fullname : 'Anony');\r\n        app.setIsLoading(true);\r\n        app.pause();\r\n        setApp(app);\r\n      },\r\n      [roomId]\r\n    );\r\n\r\n    // Update Yorkie doc when the app's shapes change.\r\n    // Prevent overloading yorkie update api call by throttle\r\n    const onChangePage = useThrottleCallback(\r\n      (\r\n        app: TldrawApp,\r\n        shapes: Record<string, TDShape | undefined>,\r\n        bindings: Record<string, TDBinding | undefined>,\r\n        assets: Record<string, TDAsset | undefined>\r\n      ) => {\r\n        if (!app || client === undefined || doc === undefined) return;\r\n\r\n        doc.update((root) => {\r\n          Object.entries(shapes).forEach(([id, shape]) => {\r\n            if (!shape) {\r\n              delete root.shapes[id];\r\n            } else {\r\n              root.shapes[id] = shape;\r\n            }\r\n          });\r\n\r\n          Object.entries(bindings).forEach(([id, binding]) => {\r\n            if (!binding) {\r\n              delete root.bindings[id];\r\n            } else {\r\n              root.bindings[id] = binding;\r\n            }\r\n          });\r\n\r\n          // Should store app.document.assets which is global asset storage referenced by inner page assets\r\n          // Document key for assets should be asset.id (string), not index\r\n          Object.entries(app.assets).forEach(([id, asset]) => {\r\n            if (!asset) {\r\n              delete root.assets[asset.id];\r\n            } else {\r\n              root.assets[asset.id] = asset;\r\n            }\r\n          });\r\n        });\r\n      },\r\n      60,\r\n      false\r\n    );\r\n\r\n    // UndoManager will be implemented in further demo\r\n    const onUndo = useCallback(() => {\r\n      return;\r\n    }, []);\r\n\r\n    // RedoManager will be implemented in further demo\r\n    const onRedo = useCallback(() => {\r\n      return;\r\n    }, []);\r\n\r\n    // Handle presence updates when the user's pointer / selection changes\r\n    const onChangePresence = useThrottleCallback(\r\n      (app: TldrawApp, user: TDUser) => {\r\n        if (!app || client === undefined || !client.isActive()) return;\r\n\r\n        client.updatePresence('user', user);\r\n      },\r\n      60,\r\n      false\r\n    );\r\n\r\n    // Document Changes --------\r\n\r\n    useEffect(() => {\r\n      if (!app) return;\r\n\r\n      // Detach & deactive yorkie client before unload\r\n      async function handleDisconnect() {\r\n        if (client === undefined || doc === undefined) return;\r\n\r\n        await client.detach(doc);\r\n        await client.deactivate();\r\n      }\r\n\r\n      window.addEventListener('beforeunload', handleDisconnect);\r\n      //window.addEventListener(\"popstate\", handleDisconnect);\r\n\r\n      // Subscribe to changes\r\n      function handleChanges() {\r\n        const root = doc.getRoot();\r\n\r\n        // WARNING: hard-coded section --------\r\n        // Parse proxy object to record\r\n        // eslint-disable-next-line\r\n        const shapeRecord: Record<string, TDShape> = JSON.parse(root.shapes.toJSON().replace(/\\\\\\'/g, \"'\"));\r\n        const bindingRecord: Record<string, TDBinding> = JSON.parse(root.bindings.toJSON());\r\n        const assetRecord: Record<string, TDAsset> = JSON.parse(root.assets.toJSON());\r\n\r\n        // Replace page content with changed(propagated) records\r\n        app?.replacePageContent(shapeRecord, bindingRecord, assetRecord);\r\n      }\r\n\r\n      let stillAlive = true;\r\n\r\n      // Setup the document's storage and subscriptions\r\n      async function setupDocument() {\r\n        try {\r\n          // 01. Active client with RPCAddr(envoy) with presence\r\n          //     also add apiKey if provided\r\n          const options: options = {\r\n            apiKey: '',\r\n            presence: {\r\n              user: app?.currentUser,\r\n            },\r\n            syncLoopDuration: 0,\r\n            reconnectStreamDelay: 1000,\r\n          };\r\n\r\n          if (`${process.env.REACT_APP_YORKIE_API_KEY}`) {\r\n            options.apiKey = `${process.env.REACT_APP_YORKIE_API_KEY}`;\r\n          }\r\n\r\n          client = new yorkie.Client(`${process.env.REACT_APP_YORKIE_URL}`, options);\r\n          await client.activate();\r\n\r\n          // 01-1. Subscribe peers-changed event and update tldraw users state\r\n          client.subscribe((event) => {\r\n            if (event.type === 'peers-changed') {\r\n              const peers = event.value[doc.getKey()];\r\n\r\n              // Compare with local user list and get leaved user list\r\n              // Then remove leaved users\r\n              const localUsers = Object.values(app!.room!.users);\r\n              const remoteUsers = Object.values(peers)\r\n                .map((presence) => presence.user)\r\n                .filter(Boolean);\r\n              const leavedUsers = localUsers.filter(({ id: id1 }) => !remoteUsers.some(({ id: id2 }) => id2 === id1));\r\n\r\n              leavedUsers.forEach((user) => {\r\n                app?.removeUser(user.id);\r\n              });\r\n\r\n              // Then update users\r\n              app?.updateUsers(remoteUsers);\r\n            }\r\n          });\r\n\r\n          // 02. Attach document into the client with specifiy doc name\r\n          doc = new yorkie.Document<YorkieDocType>(roomId);\r\n          await client.attach(doc);\r\n\r\n          // 03. Initialize document if document did not exists\r\n          doc.update((root) => {\r\n            if (!root.shapes) {\r\n              root.shapes = {};\r\n            }\r\n            if (!root.bindings) {\r\n              root.bindings = {};\r\n            }\r\n            if (!root.assets) {\r\n              root.assets = {};\r\n            }\r\n          }, 'create shapes/bindings/assets object if not exists');\r\n\r\n          // 04. Subscribe document event and handle changes\r\n          doc.subscribe((event) => {\r\n            if (event.type === 'remote-change') {\r\n              handleChanges();\r\n            }\r\n          });\r\n\r\n          // 05. Sync client\r\n          await client.sync();\r\n\r\n          if (stillAlive) {\r\n            // Update the document with initial content\r\n            handleChanges();\r\n\r\n            // Zoom to fit the content & finish loading\r\n            if (app) {\r\n              app.zoomToFit();\r\n              if (app.zoom > 1) {\r\n                app.resetZoom();\r\n              }\r\n              app.setIsLoading(false);\r\n            }\r\n\r\n            setLoading(false);\r\n          }\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      }\r\n\r\n      setupDocument();\r\n\r\n      return () => {\r\n        window.removeEventListener('beforeunload', handleDisconnect);\r\n        //window.removeEventListener(\"popstate\", handleDisconnect);\r\n        stillAlive = false;\r\n      };\r\n    }, [app]);\r\n\r\n    return {\r\n      onMount,\r\n      onChangePage,\r\n      onUndo,\r\n      onRedo,\r\n      loading,\r\n      onChangePresence,\r\n    };\r\n  }\r\n\r\n  function useMultiplayerAssets() {\r\n    const onAssetCreate = useCallback(\r\n      // 1. Get presigned url from aws getPresignedUrl lambda function\r\n      // 2. Upload (put) asset with presigned url\r\n      async (app: TldrawApp, file: File, id: string): Promise<string | false> => {\r\n        const fileName = encodeURIComponent((id ?? Utils.uniqueId()) + '-' + file.name);\r\n        const fileType = encodeURIComponent(file.type);\r\n\r\n        const res = await fetch(\r\n          `${process.env.REACT_APP_AWS_PRESIGNED_URL_ADDR}?fileName=${fileName}&fileType=${fileType}`\r\n        );\r\n        const { uploadURL, fileUrl } = await res.json();\r\n\r\n        const upload = await fetch(uploadURL, {\r\n          method: 'PUT',\r\n          body: file,\r\n        });\r\n\r\n        if (!upload.ok) return false;\r\n\r\n        return fileUrl;\r\n      },\r\n      []\r\n    );\r\n\r\n    const onAssetDelete = useCallback(\r\n      // 1. Call deleteS3Object aws lamdba function to delete file on s3 bucket\r\n      async (app: TldrawApp, assetId: string): Promise<boolean> => {\r\n        let fileName = '';\r\n\r\n        Object.entries(app.assets).forEach(([id, asset]) => {\r\n          if (assetId === asset.id) {\r\n            const filePath: string = asset.src;\r\n            fileName = filePath.split('/')[4];\r\n          }\r\n        });\r\n\r\n        await fetch(`${process.env.REACT_APP_AWS_DELETE_OBJECT_ADDR}?fileName=${fileName}`);\r\n\r\n        return true;\r\n      },\r\n      []\r\n    );\r\n\r\n    const onAssetUpload = useCallback(\r\n      // 1. Get presigned url from aws getPresignedUrl lambda function\r\n      // 2. Upload (put) asset with presigned url\r\n      async (app: TldrawApp, file: File, id: string): Promise<string | false> => {\r\n        const fileName = encodeURIComponent((id ?? Utils.uniqueId()) + '-' + file.name);\r\n        const fileType = encodeURIComponent(file.type);\r\n\r\n        const res = await fetch(\r\n          `${process.env.REACT_APP_AWS_PRESIGNED_URL_ADDR}?fileName=${fileName}&fileType=${fileType}`\r\n        );\r\n        const { uploadURL, fileUrl } = await res.json();\r\n\r\n        const upload = await fetch(uploadURL, {\r\n          method: 'PUT',\r\n          body: file,\r\n        });\r\n\r\n        if (!upload.ok) return false;\r\n\r\n        return fileUrl;\r\n      },\r\n      []\r\n    );\r\n\r\n    return {\r\n      onAssetCreate,\r\n      onAssetDelete,\r\n      onAssetUpload,\r\n    };\r\n  }\r\n\r\n  const fileSystemEvents = useFileSystem();\r\n  const { ...events } = useMultiplayerState(id ? id : 'default', '');\r\n  const { ...assetEvents } = useMultiplayerAssets();\r\n\r\n  return (\r\n    <div>\r\n      <Tldraw autofocus disableAssets={false} showPages={false} {...assetEvents} {...fileSystemEvents} {...events} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Whiteboard };\r\n"],"names":["client","doc","Whiteboard","useState","id","setId","user","appSelector","useRedux","state","Auth","useEffect","paramId","URLSearchParams","window","location","search","get","fileSystemEvents","useFileSystem","roomId","userName","app","setApp","loading","setLoading","onMount","useCallback","loadRoom","fullname","setIsLoading","pause","onChangePage","useThrottleCallback","shapes","bindings","assets","undefined","update","root","Object","entries","forEach","shape","binding","asset","onUndo","onRedo","onChangePresence","isActive","updatePresence","addEventListener","handleDisconnect","stillAlive","setupDocument","removeEventListener","detach","deactivate","handleChanges","getRoot","shapeRecord","JSON","parse","toJSON","replace","bindingRecord","assetRecord","replacePageContent","options","apiKey","presence","currentUser","syncLoopDuration","reconnectStreamDelay","process","yorkie","activate","subscribe","event","type","peers","value","getKey","localUsers","values","room","users","remoteUsers","map","filter","Boolean","id1","some","removeUser","updateUsers","attach","sync","zoomToFit","zoom","resetZoom","console","error","useMultiplayerState","events","onAssetCreate","file","fileName","encodeURIComponent","Utils","name","fileType","fetch","res","json","uploadURL","fileUrl","method","body","ok","onAssetDelete","assetId","filePath","src","split","REACT_APP_AWS_DELETE_OBJECT_ADDR","onAssetUpload","useMultiplayerAssets","assetEvents","autofocus","disableAssets","showPages"],"sourceRoot":""}