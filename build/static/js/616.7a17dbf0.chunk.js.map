{"version":3,"file":"static/js/616.7a17dbf0.chunk.js","mappings":"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","sources":["pages/account/AccountLayout.tsx","pages/account/Register.tsx","pages/account/hooks/useAccountLayout.ts","pages/account/hooks/useForgetPassword.ts","pages/account/hooks/useLogin.ts","pages/account/hooks/useOAuthLogin.ts","pages/account/hooks/useLogout.ts","pages/account/hooks/useRegister.ts"],"sourcesContent":["import React from 'react';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport Logo from 'assets/images/asyncrum-logo-white.png';\nimport { useAccountLayout } from './hooks';\n\ntype AccountLayoutProps = {\n    bottomLinks?: React.ReactNode;\n    children?: React.ReactNode;\n};\n\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps) => {\n    const { t } = useTranslation();\n\n    useAccountLayout();\n\n    return (\n        <>\n            <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\n                <Container>\n                    <Row className=\"justify-content-center\">\n                        <Col md={8} lg={6} xl={5} xxl={4}>\n                            <Card>\n                                {/* logo */}\n                                <Card.Header className=\"pt-4 pb-3 text-center bg-primary\">\n                                    <Link to=\"/\">\n                                        <span>\n                                            <img src={Logo} alt=\"\" height=\"36\" />\n                                        </span>\n                                    </Link>\n                                </Card.Header>\n                                <Card.Body className=\"p-4\">{children}</Card.Body>\n                            </Card>\n\n                            {/* bottom links */}\n                            {bottomLinks}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n            <footer className=\"footer footer-alt\">\n                {t(`2022 Â© Asyncrum - Software Maestro 13th Team WBJ`)}\n            </footer>\n        </>\n    );\n};\n\nexport default AccountLayout;\n","import { Navigate, Link } from 'react-router-dom';\nimport { Button, Alert, Row, Col } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { VerticalForm, FormInput } from 'components';\nimport AccountLayout from './AccountLayout';\nimport { useRegister } from './hooks';\nimport naverIcon from 'assets/images/btnW_icon_circle.png'\nimport googleIcon from 'assets/images/google.png'\nimport config from 'config';\n\nexport type UserData = {\n    fullname: string;\n    email: string;\n    password: string;\n};\n\nconst BottomLink = () => {\n    const { t } = useTranslation();\n\n    return (\n        <Row className=\"mt-3\">\n            <Col className=\"text-center\">\n                <p className=\"text-muted\">\n                    {t('Already have an account?')}{' '}\n                    <Link to={'/account/login'} className=\"text-muted ms-1\">\n                        <b>{t('Log In')}</b>\n                    </Link>\n                </p>\n            </Col>\n        </Row>\n    );\n};\n\nconst Register = () => {\n    const { t } = useTranslation();\n    const { loading, userSignUp, error, schemaResolver, onSubmit } = useRegister();\n\n    return (\n        <>\n            {userSignUp ? <Navigate to={'/account/confirm'}></Navigate> : null}\n\n            <AccountLayout bottomLinks={<BottomLink />}>\n                <div className=\"text-center w-75 m-auto\">\n                    <h4 className=\"text-dark-50 text-center mt-0 fw-bold\">{t('Free Sign Up')}</h4>\n                    <p className=\"text-muted mb-4\">\n                        {t(\"Don't have an account? Create your account, it takes less than a minute.\")}\n                    </p>\n                </div>\n\n                {error && (\n                    <Alert variant=\"danger\" className=\"my-2\">\n                        {error}\n                    </Alert>\n                )}\n\n                <VerticalForm<UserData> onSubmit={onSubmit} resolver={schemaResolver} defaultValues={{}}>\n                    <FormInput\n                        label={t('Email address')}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder={t('Enter your email')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Password')}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder={t('Enter your password')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Confirm Password')}\n                        type=\"password\"\n                        name=\"confirmPassword\"\n                        placeholder={t('Enter your password again')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Full Name')}\n                        type=\"text\"\n                        name=\"fullname\"\n                        placeholder={t('Enter your name')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('I accept Terms and Conditions')}\n                        type=\"checkbox\"\n                        name=\"checkboxsignup\"\n                        containerClass={'mb-3 text-muted'}\n                    />\n\n                    <div className=\"mb-3 mb-0 text-center\">\n                        <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n                            {t('Sign Up')}\n                        </Button>\n                    </div>\n\n                    <div className=\"pt-3 mb-3 mb-0 text-center border-top\">\n                        <Button href={config.API_URL+\"/oauth2/authorization/naver?redirect_uri=http://localhost:3000/account/oauth\"}className=\"signin-button\" variant=\"primary\" type=\"submit\" disabled={loading}>\n                            <img className=\"signin-icon\" src={naverIcon} alt=\"Naver Icon\" /> Sign in with Naver\n                        </Button>\n                        <Button href={config.API_URL+\"/oauth2/authorization/google?redirect_uri=http://localhost:3000/account/oauth\"} className=\"signin-button\" variant=\"primary\" type=\"submit\" disabled={loading}>\n                            <img className=\"signin-icon\" src={googleIcon} alt=\"Google Icon\" /> Sign in with Google\n                        </Button>\n                    </div>\n                </VerticalForm>\n            </AccountLayout>\n        </>\n    );\n};\n\nexport default Register;\n","import { useEffect } from 'react';\n\nexport default function useAccountLayout() {\n    useEffect(() => {\n        if (document.body) document.body.classList.add('authentication-bg');\n\n        return () => {\n            if (document.body) document.body.classList.remove('authentication-bg');\n        };\n    }, []);\n}\n","import { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { resetAuth, forgotPassword } from 'redux/actions';\nimport { useRedux } from 'hooks';\nimport { UserData } from '../ForgetPassword';\n\nexport default function useForgetPassword() {\n    const { dispatch, appSelector } = useRedux();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    const { loading, passwordReset, resetPasswordSuccess, error } = appSelector((state) => ({\n        loading: state.Auth.loading,\n        user: state.Auth.user,\n        error: state.Auth.error,\n        passwordReset: state.Auth.passwordReset,\n        resetPasswordSuccess: state.Auth.resetPasswordSuccess,\n    }));\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            username: yup.string().required(t('Please enter Username')),\n        })\n    );\n\n    /*\n     * handle form submission\n     */\n    const onSubmit = (formData: UserData) => {\n        dispatch(forgotPassword(formData['username']));\n    };\n\n    return {\n        loading,\n        passwordReset,\n        resetPasswordSuccess,\n        error,\n        schemaResolver,\n        onSubmit,\n    };\n}\n","import { useEffect } from 'react';\nimport { Location, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { resetAuth, loginUser } from 'redux/actions';\nimport { useRedux } from 'hooks';\nimport { UserData } from '../Login';\n\ntype LocationState = {\n    from?: Location;\n};\n\nexport default function useLogin() {\n    const { t } = useTranslation();\n    const { dispatch, appSelector } = useRedux();\n\n    const location: Location = useLocation();\n    let redirectUrl: string = '/';\n\n    if (location.state) {\n        const { from } = location.state as LocationState;\n        redirectUrl = from ? from.pathname : '/';\n    }\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    const { loading, userLoggedIn, user, error } = appSelector((state) => ({\n        loading: state.Auth.loading,\n        user: state.Auth.user,\n        error: state.Auth.error,\n        userLoggedIn: state.Auth.userLoggedIn,\n    }));\n\n    /*\n    form validation schema\n    */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            username: yup.string().required(t('Please enter username')),\n            password: yup.string().required(t('Please enter password')),\n        })\n    );\n\n    /*\n    handle form submission\n    */\n    const onSubmit = (formData: UserData) => {\n        dispatch(loginUser(formData['username'], formData['password']));\n    };\n\n    return {\n        loading,\n        userLoggedIn,\n        user,\n        error,\n        schemaResolver,\n        onSubmit,\n        redirectUrl,\n    };\n}\n","import { useEffect } from 'react';\nimport { Location, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { resetAuth, oauthLoginUser } from 'redux/actions';\nimport { useRedux } from 'hooks';\n\ntype LocationState = {\n    from?: Location;\n};\n\nexport default function useOAuthLogin() {\n    const { t } = useTranslation();\n    const { dispatch, appSelector } = useRedux();\n\n    const location: Location = useLocation();\n    let redirectUrl: string = '/';\n\n    if (location.state) {\n        const { from } = location.state as LocationState;\n        redirectUrl = from ? from.pathname : '/';\n    }\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    const { loading, userLoggedIn, user, error } = appSelector((state) => ({\n        loading: state.Auth.loading,\n        user: state.Auth.user,\n        error: state.Auth.error,\n        userLoggedIn: state.Auth.userLoggedIn,\n    }));\n\n    /*\n    handle form submission\n    */\n    const onSubmit = (token: string) => {\n        dispatch(oauthLoginUser(token));\n    };\n\n    return {\n        loading,\n        userLoggedIn,\n        user,\n        error,\n        onSubmit,\n        redirectUrl,\n    };\n}\n","import { useEffect } from 'react';\nimport { logoutUser } from 'redux/actions';\nimport { useRedux } from 'hooks';\n\nexport default function useLogout() {\n    const { dispatch } = useRedux();\n\n    useEffect(() => {\n        dispatch(logoutUser());\n    }, [dispatch]);\n}\n","import { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { resetAuth, signupUser } from 'redux/actions';\nimport { useRedux } from 'hooks';\nimport { UserData } from '../Register';\n\nexport default function useRegister() {\n    const { t } = useTranslation();\n    const { dispatch, appSelector } = useRedux();\n\n    const { loading, userSignUp, error } = appSelector((state) => ({\n        loading: state.Auth.loading,\n        error: state.Auth.error,\n        userSignUp: state.Auth.userSignUp,\n    }));\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            fullname: yup.string().required(t('Please enter your full name')),\n            email: yup.string().required('Please enter your email').email('Please enter a valid email address'),\n            password: yup.string().required(t('Please enter password')),\n            confirmPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match'),\n            checkboxsignup: yup.boolean().oneOf([true], 'You must agree to the terms and conditions')\n        })\n    );\n\n    /*\n     * handle form submission\n     */\n    const onSubmit = (formData: UserData) => {\n        dispatch(signupUser(formData['fullname'], formData['email'], formData['password']));\n    };\n\n    return {\n        loading,\n        userSignUp,\n        error,\n        schemaResolver,\n        onSubmit,\n    };\n}\n"],"names":["bottomLinks","children","t","useTranslation","useAccountLayout","className","md","lg","xl","xxl","to","src","Logo","alt","height","BottomLink","useRegister","loading","userSignUp","error","schemaResolver","onSubmit","variant","resolver","defaultValues","label","type","name","placeholder","containerClass","disabled","href","config","naverIcon","googleIcon","useEffect","document","body","classList","add","remove","useForgetPassword","useRedux","dispatch","appSelector","resetAuth","state","Auth","user","passwordReset","resetPasswordSuccess","yupResolver","yup","shape","username","required","formData","forgotPassword","useLogin","location","useLocation","redirectUrl","from","pathname","userLoggedIn","password","loginUser","useOAuthLogin","token","oauthLoginUser","useLogout","logoutUser","fullname","email","confirmPassword","oneOf","checkboxsignup","signupUser"],"sourceRoot":""}