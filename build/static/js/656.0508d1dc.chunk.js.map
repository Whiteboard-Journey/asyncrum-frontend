{"version":3,"file":"static/js/656.0508d1dc.chunk.js","mappings":"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","sources":["pages/docs/hooks/useModal.ts","pages/docs/Dashboard.tsx"],"sourcesContent":["import { useToggle } from 'hooks';\nimport { useState } from 'react';\n\nexport default function useModal() {\n    const [isOpen, toggleModal] = useToggle();\n\n    const [size, setSize] = useState<'sm' | 'lg' | 'xl'>();\n    const [className, setClassName] = useState<string>('');\n    const [scroll, setScroll] = useState<boolean>(false);\n\n    // Opens large modal\n    const openModalWithSize = (size: 'sm' | 'lg' | 'xl') => {\n        setSize(size);\n        setClassName('');\n        setScroll(false);\n        toggleModal();\n    };\n\n    // Opens modal with custom class\n    const openModalWithClass = (className: string) => {\n        setClassName(className);\n        setScroll(false);\n        toggleModal();\n    };\n\n    // Opens large modal\n    const openModalWithScroll = () => {\n        setScroll(true);\n        setSize('sm');\n        setClassName('');\n        toggleModal();\n    };\n\n    return {\n        isOpen,\n        size,\n        className,\n        scroll,\n        toggleModal,\n        openModalWithSize,\n        openModalWithClass,\n        openModalWithScroll,\n    };\n}\n","import { Row, Col, Button, ButtonGroup, Card, Dropdown, OverlayTrigger, Tooltip, Modal, Pagination } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { DailyStandup, Whiteboard } from './types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useToggle } from 'hooks';\nimport axios from 'axios';\nimport config from 'config';\nimport { TDDocument, TDFile, TldrawApp } from '@krapi0314/tldraw';\nimport moment from 'moment';\nimport Carousel from 'react-multi-carousel';\nimport 'react-multi-carousel/lib/styles.css';\nimport { useModal } from './hooks';\nimport { VideoRecorder } from 'components';\n\nconst user = JSON.parse(sessionStorage.getItem('asyncrum_user')!)\nconst whiteboardPageURL = '/whiteboard?url=';\n\nconst onCreateWhiteboard = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const title = (((event.target as HTMLFormElement).elements as {[key: string]: any})['title'].value);\n    const description = (((event.target as HTMLFormElement).elements as {[key: string]: any})['description'].value);\n    const scope = \"team\";\n\n    axios.post(`${config.API_URL + \"/api/v1/whiteboards\"}`, { title, description, scope }, { headers: { Authorization: 'Bearer ' + user.token }})\n    .then((response) => {\n        const preSignedURL = response.data.preSignedURL;\n        const whiteboardID = response.data.id;\n        const document: TDDocument = {\n            id: \"doc\",\n            name: \"New Document\",\n            version: TldrawApp.version,\n            pages: {\n                page: {\n                    id: \"page\",\n                    name: \"Page 1\",\n                    childIndex: 1,\n                    shapes: {},\n                    bindings: {}\n                }\n            },\n            pageStates: {\n                page: {\n                    id: \"page\",\n                    selectedIds: [],\n                    camera: {\n                        point: [0, 0],\n                        zoom: 1\n                    }\n                }\n            },\n            assets: {}\n        };\n\n        const file: TDFile = {\n            name: document.name || 'New Document',\n            fileHandle: null,\n            document,\n            assets: {},\n        };\n        \n        const json = JSON.stringify(file, null, 2)\n        \n        const blob = new Blob([json], {\n            type: 'application/vnd.Tldraw+json',\n        })\n        \n        const fileToUpload = new File([blob], title)\n\n        const formData = new FormData();\n        formData.append(\"data\", fileToUpload);\n        const uploadAxios = axios.create({ transformRequest: [(data: any, headers: any) => {\n            delete headers.common.Authorization;\n            headers['content-type'] = 'application/octet-stream';\n            return formData;\n        }] });\n        uploadAxios.put(preSignedURL, formData).then(() => {\n            axios.get(`${config.API_URL + \"/api/v1/whiteboards/\" + whiteboardID }`, { headers: { Authorization: 'Bearer ' + user.token }})\n                .then((res) => {\n                    window.location.href = whiteboardPageURL+res.data.whiteboardUrl+'&id='+whiteboardID;\n                });\n        });\n    });\n}\n\nconst onEditWhiteboard = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    \n    const id = (((event.target as HTMLFormElement).elements as {[key: string]: any})['id'].value);\n    const title = (((event.target as HTMLFormElement).elements as {[key: string]: any})['title'].value);\n    const description = (((event.target as HTMLFormElement).elements as {[key: string]: any})['description'].value);\n    const scope = \"\";\n\n    axios.patch(`${config.API_URL + \"/api/v1/whiteboards/\" + id }`, { title, description, scope }, { headers: { Authorization: 'Bearer ' + user.token }})\n        .then(() => window.location.reload());\n}\n\nconst convertDateTime = (datetime: string) => {\n    const convertedDatetime = new Date(datetime);\n    convertedDatetime.setTime(convertedDatetime.getTime() - convertedDatetime.getTimezoneOffset()*60*1000);\n    return convertedDatetime;\n}\n\nconst getTimeFromNow = (datetime: string) => {\n    return moment(convertDateTime(datetime)).fromNow();\n}\n\nconst onDeleteWhiteboard = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    \n    const id = (((event.target as HTMLFormElement).elements as {[key: string]: any})['id'].value);\n\n    axios.delete(`${config.API_URL + \"/api/v1/whiteboards/\" + id }`, { headers: { Authorization: 'Bearer ' + user.token }})\n        .then(() => window.location.reload());\n}\n\nconst onViewDailyStandups = (id: number[]) => {\n    const body = {\n        \"title\": null,\n        \"description\": null,\n        \"scope\": \"team\",\n    }\n    axios.patch(config.API_URL + \"/api/v1/records/\" + id[0], body, { headers: { Authorization: 'Bearer ' + user.token }});\n    axios.patch(config.API_URL + \"/api/v1/records/\" + id[1], body, { headers: { Authorization: 'Bearer ' + user.token }});\n    // window.location.reload();\n}\n\nconst DailyStandupCard = ({ dailyStandup }: {dailyStandup: DailyStandup}) => {\n    const cam_w = 320, cam_h = 240, screen_w = 960, screen_h = 540\n    const { isOpen: isViewOpen, size, className, scroll, toggleModal: toggleView, openModalWithClass } =\n        useModal();\n\n    return (\n        <Card className=\"d-block me-3\">\n            <Card.Body onClick={() => {\n                    openModalWithClass('modal-full-width');\n                    onViewDailyStandups(dailyStandup.id);\n                }} style={{cursor:'pointer'}}>\n                <div className={(dailyStandup.seen ? \"opacity-25\" : \"\") + \" text-center\"}>\n                    <img src={dailyStandup.profileImageUrl} className=\"rounded-circle avatar-lg\" alt={dailyStandup.author} referrerPolicy=\"no-referrer\" />\n                </div>\n                <h4 className={(dailyStandup.seen ? \"text-light\" : \"\") + \" text-center font-weight-bold mt-2\"}>\n                    {dailyStandup.author}\n                </h4>\n                <p className={(dailyStandup.seen ? \"text-light\" : \"text-muted\") + \" text-center font-12 mb-1\"}>\n                    {getTimeFromNow(dailyStandup.createdDate)}\n                </p>\n                <Modal show={isViewOpen} onHide={toggleView} dialogClassName={className} size={size} scrollable={scroll}>\n                    <Modal.Body>\n                        <Modal.Header onHide={toggleView} closeButton>\n                            <h4 className=\"modal-title\">{dailyStandup.author + \" - \" + getTimeFromNow(dailyStandup.createdDate)}</h4>\n                        </Modal.Header>\n                        <video src={dailyStandup.camRecordFileUrl} controls autoPlay playsInline width={cam_w} height={cam_h} style={{marginLeft: 'auto', marginRight: 'auto', display: 'block'}} />\n                        <video src={dailyStandup.screenRecordFileUrl} controls autoPlay playsInline width={screen_w} height={screen_h} style={{marginLeft: 'auto', marginRight: 'auto', display: 'block'}} />\n                    </Modal.Body>\n                </Modal>\n            </Card.Body>\n        </Card>\n    );\n}\n\nconst WhiteboardCard = ({ whiteboard }: {whiteboard: Whiteboard}) => {\n    const [isEditOpen, toggleEdit] = useToggle();\n    const [isDeleteOpen, toggleDelete] = useToggle();\n    const [isReadMore, setIsReadMore] = useState(true);\n    const toggleReadMore = () => {\n        setIsReadMore(!isReadMore);\n    };\n\n    return (\n        <Card className=\"d-block\">\n            <Card.Body>\n                <Dropdown className=\"card-widgets\" align=\"end\">\n                    <Dropdown.Toggle\n                        variant=\"link\"\n                        as=\"a\"\n                        className=\"card-drop arrow-none cursor-pointer p-0 shadow-none\"\n                    >\n                        <i className=\"dripicons-dots-3\"></i>\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Share</Dropdown.Item>\n                        <Dropdown.Item onClick={toggleEdit}>Edit</Dropdown.Item>\n                            <Modal show={isEditOpen} onHide={toggleEdit}>\n                                <Modal.Body>\n                                    <Modal.Header onHide={toggleEdit} closeButton>\n                                        <h4 className=\"modal-title\">Edit Whiteboard Information</h4>\n                                    </Modal.Header>\n                                    <form className=\"ps-3 pe-3\" onSubmit={onEditWhiteboard}>\n                                        <input type=\"hidden\" id=\"id\" value={whiteboard.id} />\n                                        <div className=\"mt-3 mb-3\">\n                                            <label htmlFor=\"title\" className=\"form-label\">\n                                                Title\n                                            </label>\n                                            <input\n                                                className=\"form-control\"\n                                                type=\"text\"\n                                                id=\"title\"\n                                                maxLength={255}\n                                                required\n                                                placeholder={whiteboard.title}\n                                            />\n                                        </div>\n\n                                        <div className=\"mb-3\">\n                                            <label htmlFor=\"description\" className=\"form-label\">\n                                                Description\n                                            </label>\n                                            <input\n                                                className=\"form-control\"\n                                                type=\"text\"\n                                                id=\"description\"\n                                                maxLength={255}\n                                                required\n                                                placeholder={whiteboard.description}\n                                            />\n                                        </div>\n\n                                        <div className=\"mb-3 text-center\">\n                                            <button className=\"btn btn-primary\" type=\"submit\">\n                                                Edit\n                                            </button>\n                                        </div>\n                                    </form>\n                                </Modal.Body>\n                            </Modal>\n                        <Dropdown.Item>Duplicate</Dropdown.Item>\n                        <Dropdown.Item className='text-danger' onClick={toggleDelete}>Delete</Dropdown.Item>\n                            <Modal show={isDeleteOpen} onHide={toggleDelete}>\n                                <Modal.Body>\n                                    <Modal.Header onHide={toggleDelete} closeButton>\n                                        <h4 className=\"modal-title\">Delete {whiteboard.title}</h4>\n                                    </Modal.Header>\n                                    <p className=\"mt-4 mb-4 text-center font-weight-bolds\">Are you sure you want to delete this whiteboard permanently?</p>\n                                    <form className=\"ps-3 pe-3\" onSubmit={onDeleteWhiteboard}>\n                                        <input type=\"hidden\" id=\"id\" value={whiteboard.id} />\n                                        <div className=\"mb-3 text-center\">\n                                            <button className=\"btn btn-danger\" type=\"submit\">\n                                                Delete\n                                            </button>\n                                        </div>\n                                    </form>\n                                </Modal.Body>\n                            </Modal>\n                    </Dropdown.Menu>\n                </Dropdown>\n                <h4 className=\"mt-0\">\n                    <Link to={whiteboardPageURL + whiteboard.whiteboardFileUrl + '&id=' + whiteboard.id} className=\"text-title\">\n                        {whiteboard.title.length > 25 ? whiteboard.title.slice(0, 25) + \" ...\" : whiteboard.title}\n                    </Link>\n                </h4>\n                {whiteboard.description && (\n                    <p className=\"font-13 my-3\">\n                        { isReadMore ? \n                            whiteboard.description.slice(0, 35) :\n                        whiteboard.description }\n                        { whiteboard.description.length > 35 ?\n                            (<span onClick={toggleReadMore} className=\"fw-bold text-info\" role=\"button\">\n                                { isReadMore ? \" ...read more\" : \" show less\" }\n                            </span>) : \"\"\n                        }\n                    </p>\n                )}\n                <div>\n                    <span className=\"font-13\">Author: </span>\n                    <OverlayTrigger\n                        placement={'bottom'}\n                        overlay={\n                            <Tooltip>{whiteboard.author}</Tooltip>\n                        }\n                    >\n                        <img src={whiteboard.authorProfileImageUrl} className=\"rounded-circle avatar-xs\" alt={whiteboard.author} />\n                    </OverlayTrigger>\n                </div>\n                <p className=\"text-muted text-end font-12 mt-3 mb-1\">\n                    Last modified: {getTimeFromNow(whiteboard.lastModifiedDate)}\n                </p>\n            </Card.Body>\n        </Card>\n    );\n}\n\nconst Dashboard = () => {\n    const [whiteboards, setWhiteboards] = useState<Whiteboard[]>([]);\n    const [whiteboardLoading, setWhiteboardLoading] = useState<Boolean>(true);\n    const [isCreateWhiteboardOpen, toggleCreateWhiteboard] = useToggle();\n    const { isOpen: isRecordOpen, size, className, scroll, toggleModal: toggleRecord, openModalWithClass } =\n        useModal();\n    const [dailyStandups, setDailyStandups] = useState<DailyStandup[]>([]);\n    const [dailyStandupLoading, setDailyStandupLoading] = useState<Boolean>(true);\n    const [whiteboardPageNumber, setWhiteboardPageNumber] = useState<number>(1);\n    const [numberOfWhiteboards, setNumberOfWhiteboards] = useState<number>(0);\n    const carouselRef = useRef<Carousel>(null);\n    \n    useEffect(() => {\n        const user = JSON.parse(sessionStorage.getItem('asyncrum_user')!);\n        let dailyStandups: DailyStandup[] = [];\n        axios.get(config.API_URL+`/api/v1/records?scope=team&pageIndex=0&topId=0`, { headers: { Authorization: 'Bearer ' + user.token }})\n        .then(res => {\n            for (const record of res.data.records) {\n                if (moment().diff(moment(convertDateTime(record.createdDate)), 'hours') > 24 && record.seenMemberIdGroup?.indexOf(user.id) > -1) {\n                    continue;\n                }\n                if (dailyStandups.at(-1)?.author === record.author.fullname\n                && dailyStandups.at(-1)?.title.slice(0, 13) === record.title.slice(0, 13)) {\n                    if (record.title.slice(-6) === \"screen\") {\n                        dailyStandups.at(-1)!.id.push(record.id);\n                        dailyStandups.at(-1)!.screenRecordFileUrl = record.recordFileUrl;\n                    } else {\n                        dailyStandups.at(-1)!.id.push(record.id);\n                        dailyStandups.at(-1)!.camRecordFileUrl = record.recordFileUrl;\n                    }\n                } else {\n                    if (record.title.slice(-6) === \"screen\") {\n                        dailyStandups.push({\n                            id: [record.id],\n                            author: record.author.fullname,\n                            title: record.title,\n                            profileImageUrl: record.author.profileImageUrl,\n                            createdDate: record.createdDate,\n                            camRecordFileUrl: \"\",\n                            screenRecordFileUrl: record.recordFileUrl,\n                            seen: record.seenMemberIdGroup?.indexOf(user.id) > -1 ? true : false,\n                        });\n                    } else {\n                        dailyStandups.push({\n                            id: [record.id],\n                            author: record.author.fullname,\n                            title: record.title,\n                            profileImageUrl: record.author.profileImageUrl,\n                            createdDate: record.createdDate,\n                            camRecordFileUrl: record.recordFileUrl,\n                            screenRecordFileUrl: \"\",\n                            seen: record.seenMemberIdGroup?.indexOf(user.id) > -1 ? true : false,\n                        });\n                    }\n                }\n            }\n            setDailyStandups(dailyStandups.reverse());\n            setDailyStandupLoading(false);\n            const slide = dailyStandups.findIndex(dailyStandup => !dailyStandup.seen)\n            if (carouselRef && carouselRef.current) {\n                carouselRef.current.goToSlide(slide);\n            }\n        });\n    }, []);\n\n    useEffect(() => {\n        const user = JSON.parse(sessionStorage.getItem('asyncrum_user')!);\n        let whiteboards: Whiteboard[] = [];\n        axios.get(config.API_URL+`/api/v1/whiteboards?scope=team&pageIndex=${whiteboardPageNumber-1}&topId=0`, { headers: { Authorization: 'Bearer ' + user.token }})\n        .then(res => {\n            for (const whiteboard of res.data.whiteboards) {\n                whiteboards.push({\n                    id: whiteboard.id,\n                    title: whiteboard.title,\n                    description: whiteboard.description,\n                    createdDate: whiteboard.createdDate,\n                    lastModifiedDate: whiteboard.lastModifiedDate,\n                    scope: whiteboard.scope,\n                    author: whiteboard.author.fullname,\n                    authorProfileImageUrl: whiteboard.author.profileImageUrl,\n                    whiteboardFileUrl: whiteboard.whiteboardFileUrl,\n                });\n            }\n            setWhiteboards(whiteboards);\n            setNumberOfWhiteboards(res.data.size_ALL_PAGE);\n            setWhiteboardLoading(false);\n        });\n    }, [whiteboardPageNumber]);\n\n    const WhiteboardPagination = () => {\n        const whiteboardPerPage = 12;\n        let items = [];\n    \n        const onPageNumberClick = (e: React.MouseEvent<HTMLElement>) => {\n            setWhiteboardPageNumber(parseInt((e.target as any).innerText));   \n        }\n    \n        for (let number = 1; number <= Math.ceil(numberOfWhiteboards / whiteboardPerPage) ; number++) {\n            items.push(<Pagination.Item key={number.toString()} active={number === whiteboardPageNumber} onClick={onPageNumberClick}>{number}</Pagination.Item>);\n        }\n    \n        return (\n            <Pagination className=\"mx-auto\">\n                <Pagination.Prev />\n                {items}\n                <Pagination.Next />\n            </Pagination>\n        );\n    };\n\n    return(\n        <>\n            <Row>\n                <Col>\n                    <div className=\"page-title-box\">\n                        <h4 className=\"page-title\">Daily Standups</h4>\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mb-4\">\n                <Col>\n                <Button onClick={() => {openModalWithClass('modal-full-width')}}><i className=\"mdi mdi-plus\"></i> Record</Button>\n                    <Modal show={isRecordOpen} onHide={toggleRecord} dialogClassName={className} size={size} scrollable={scroll}>\n                        <Modal.Body>\n                            <Modal.Header onHide={toggleRecord} closeButton>\n                                <h4 className=\"modal-title\">Record</h4>\n                            </Modal.Header>\n                            <VideoRecorder />\n                        </Modal.Body>\n                    </Modal>\n                </Col>\n            </Row>\n            <Row>\n                {!dailyStandupLoading && \n                <Carousel \n                ref={carouselRef}\n                additionalTransfrom={0}\n                arrows\n                centerMode={false}\n                className=\"\"\n                containerClass=\"container\"\n                dotListClass=\"\"\n                draggable\n                focusOnSelect={false}\n                infinite={false}\n                itemClass=\"\"\n                keyBoardControl\n                minimumTouchDrag={80}\n                pauseOnHover\n                renderArrowsWhenDisabled={false}\n                renderButtonGroupOutside={false}\n                renderDotsOutside={false}\n                responsive={{\n                  desktop: {\n                    breakpoint: {\n                      max: 3000,\n                      min: 1024\n                    },\n                    items: 6,\n                    partialVisibilityGutter: 40\n                  },\n                  mobile: {\n                    breakpoint: {\n                      max: 464,\n                      min: 0\n                    },\n                    items: 1,\n                    partialVisibilityGutter: 30\n                  },\n                  tablet: {\n                    breakpoint: {\n                      max: 1024,\n                      min: 464\n                    },\n                    items: 2,\n                    partialVisibilityGutter: 30\n                  }\n                }}\n                rewind={false}\n                rewindWithAnimation={false}\n                rtl={false}\n                shouldResetAutoplay\n                showDots={false}\n                sliderClass=\"\"\n                slidesToSlide={1}\n            >\n                    {dailyStandups.map((dailyStandup: DailyStandup, i: number) => {\n                        return (\n                        <div>\n                            <DailyStandupCard dailyStandup={dailyStandup} />\n                        </div>\n                        );\n                    })}\n                </Carousel>\n                }\n            </Row>\n            <hr />\n            <Row>\n                <Col>\n                    <div className=\"page-title-box\">\n                        <h4 className=\"page-title\">Whiteboards</h4>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col></Col>\n            </Row>\n            <Row className=\"mb-2\">\n                <Col sm={4}>\n                    <Button onClick={toggleCreateWhiteboard}><i className=\"mdi mdi-plus\"></i> Create Whiteboard</Button>\n                    <Modal show={isCreateWhiteboardOpen} onHide={toggleCreateWhiteboard}>\n                        <Modal.Body>\n                            <Modal.Header onHide={toggleCreateWhiteboard} closeButton>\n                                <h4 className=\"modal-title\">Create a new whiteboard</h4>\n                            </Modal.Header>\n                            <form className=\"ps-3 pe-3\" onSubmit={onCreateWhiteboard}>\n                                <div className=\"mt-3 mb-3\">\n                                    <label htmlFor=\"title\" className=\"form-label\">\n                                        Title\n                                    </label>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        id=\"title\"\n                                        maxLength={255}\n                                        required\n                                        placeholder=\"Untitled\"\n                                    />\n                                </div>\n\n                                <div className=\"mb-3\">\n                                    <label htmlFor=\"description\" className=\"form-label\">\n                                        Description\n                                    </label>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"textarea\"\n                                        id=\"description\"\n                                        maxLength={255}\n                                        required\n                                        placeholder=\"Description\"\n                                    />\n                                </div>\n\n                                <div className=\"mb-3 text-center\">\n                                    <button className=\"btn btn-primary\" type=\"submit\">\n                                        Create\n                                    </button>\n                                </div>\n                            </form>\n                        </Modal.Body>\n                    </Modal>\n                </Col>\n                <Col sm={8}>\n                    <div className=\"text-sm-end\">\n                        <div className=\"btn-group mb-3\">\n                            <Button variant=\"primary\">All</Button>\n                        </div>\n                        <ButtonGroup className=\"mb-3 ms-1\">\n                            <Button variant=\"light\">Owned by me</Button>\n                            <Button variant=\"light\">Not owned by me</Button>\n                        </ButtonGroup>\n                    </div>\n                </Col>\n            </Row>\n            {!whiteboardLoading && \n            (<>\n            <Row>\n                {whiteboards.map((whiteboard: Whiteboard, i: number) => {\n                    return (\n                        <Col md={6} xxl={3} key={'wb-' + whiteboard.id}>\n                            <WhiteboardCard whiteboard={whiteboard} />\n                        </Col>\n                    );\n                })}\n            </Row>\n            <Row>\n                <Col className=\"d-flex\">\n                    <WhiteboardPagination />\n                </Col>\n            </Row>\n            </>)\n            }\n        </>\n    );\n}\n\nexport default Dashboard;"],"names":["useModal","useToggle","isOpen","toggleModal","useState","size","setSize","className","setClassName","scroll","setScroll","openModalWithSize","openModalWithClass","openModalWithScroll","user","JSON","parse","sessionStorage","getItem","whiteboardPageURL","onCreateWhiteboard","event","preventDefault","title","target","elements","value","description","axios","config","scope","headers","Authorization","token","then","response","preSignedURL","data","whiteboardID","id","document","name","version","TldrawApp","pages","page","childIndex","shapes","bindings","pageStates","selectedIds","camera","point","zoom","assets","file","fileHandle","json","stringify","blob","Blob","type","fileToUpload","File","formData","FormData","append","transformRequest","common","put","res","window","location","href","whiteboardUrl","onEditWhiteboard","reload","convertDateTime","datetime","convertedDatetime","Date","setTime","getTime","getTimezoneOffset","getTimeFromNow","moment","fromNow","onDeleteWhiteboard","DailyStandupCard","dailyStandup","isViewOpen","toggleView","Card","onClick","body","onViewDailyStandups","style","cursor","seen","src","profileImageUrl","alt","author","referrerPolicy","createdDate","Modal","show","onHide","dialogClassName","scrollable","closeButton","camRecordFileUrl","controls","autoPlay","playsInline","width","height","marginLeft","marginRight","display","screenRecordFileUrl","WhiteboardCard","whiteboard","isEditOpen","toggleEdit","isDeleteOpen","toggleDelete","isReadMore","setIsReadMore","Dropdown","align","variant","as","onSubmit","htmlFor","maxLength","required","placeholder","to","whiteboardFileUrl","length","slice","role","OverlayTrigger","placement","overlay","Tooltip","authorProfileImageUrl","lastModifiedDate","whiteboards","setWhiteboards","whiteboardLoading","setWhiteboardLoading","isCreateWhiteboardOpen","toggleCreateWhiteboard","isRecordOpen","toggleRecord","dailyStandups","setDailyStandups","dailyStandupLoading","setDailyStandupLoading","whiteboardPageNumber","setWhiteboardPageNumber","numberOfWhiteboards","setNumberOfWhiteboards","carouselRef","useRef","useEffect","records","record","diff","seenMemberIdGroup","indexOf","at","fullname","push","recordFileUrl","reverse","slide","findIndex","current","goToSlide","size_ALL_PAGE","WhiteboardPagination","items","onPageNumberClick","e","parseInt","innerText","number","Math","ceil","Pagination","active","toString","Row","Col","Button","ref","additionalTransfrom","arrows","centerMode","containerClass","dotListClass","draggable","focusOnSelect","infinite","itemClass","keyBoardControl","minimumTouchDrag","pauseOnHover","renderArrowsWhenDisabled","renderButtonGroupOutside","renderDotsOutside","responsive","desktop","breakpoint","max","min","partialVisibilityGutter","mobile","tablet","rewind","rewindWithAnimation","rtl","shouldResetAutoplay","showDots","sliderClass","slidesToSlide","map","i","sm","ButtonGroup","md","xxl"],"sourceRoot":""}