{"version":3,"file":"static/js/801.91317d48.chunk.js","mappings":"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","sources":["components/form/VerticalForm.tsx","components/form/FormInput.tsx","components/ThemeCustomizer/LayoutTypes.tsx","components/ThemeCustomizer/LayoutColor.tsx","components/ThemeCustomizer/LayoutWidth.tsx","components/ThemeCustomizer/LeftSideBarTheme.tsx","components/ThemeCustomizer/LeftSideBarType.tsx","components/ThemeCustomizer/ThemeCustomizer.tsx","components/ThemeCustomizer/useThemeCustomizer.ts","components/FAQs.tsx","components/PricingCard.tsx","components/PageTitle.tsx","components/hooks/useVideoRecorder.ts","components/VideoRecorder.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm, Resolver, SubmitHandler, DefaultValues } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n  defaultValues?: DefaultValues<TFormValues>;\n  resolver?: Resolver<any>;\n  children?: React.ReactNode;\n  onSubmit: SubmitHandler<any>;\n  formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import { InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { FieldErrors, Control } from 'react-hook-form';\nimport { useToggle } from 'hooks';\n\ntype PasswordInputProps = {\n  name: string;\n  placeholder?: string;\n  refCallback?: any;\n  errors: FieldErrors;\n  control?: Control<any>;\n  register?: any;\n  className?: string;\n};\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }: PasswordInputProps) => {\n  const [showPassword, togglePassword] = useToggle();\n\n  return (\n    <InputGroup className=\"mb-0\">\n      <Form.Control\n        type={showPassword ? 'text' : 'password'}\n        placeholder={placeholder}\n        name={name}\n        id={name}\n        as=\"input\"\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        autoComplete={name}\n      />\n      <div\n        className={classNames('input-group-text', 'input-group-password', {\n          'show-password': showPassword,\n        })}\n        data-password={showPassword ? 'true' : 'false'}\n      >\n        <span className=\"password-eye\" onClick={togglePassword}></span>\n      </div>\n    </InputGroup>\n  );\n};\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n  label?: string;\n  type?: string;\n  name: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  refCallback?: any;\n  children?: React.ReactNode;\n  rows?: string;\n};\n\nconst FormInput = ({\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  refCallback,\n  children,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n  return (\n    <>\n      {type === 'hidden' ? (\n        <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n      ) : (\n        <>\n          {type === 'password' ? (\n            <>\n              <Form.Group className={containerClass}>\n                {label ? (\n                  <>\n                    {' '}\n                    <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                  </>\n                ) : null}\n                <PasswordInput\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors!}\n                  register={register}\n                  className={className}\n                />\n\n                {errors && errors[name] ? (\n                  <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                  </Form.Control.Feedback>\n                ) : null}\n              </Form.Group>\n            </>\n          ) : (\n            <>\n              {type === 'select' ? (\n                <Form.Group className={containerClass}>\n                  {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                  <Form.Select\n                    type={type}\n                    label={label}\n                    name={name}\n                    id={name}\n                    ref={(r: HTMLInputElement) => {\n                      if (refCallback) refCallback(r);\n                    }}\n                    comp={comp}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    {...otherProps}\n                  >\n                    {children}\n                  </Form.Select>\n\n                  {errors && errors[name] ? (\n                    <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n                  ) : null}\n                </Form.Group>\n              ) : (\n                <>\n                  {type === 'checkbox' || type === 'radio' ? (\n                    <Form.Group className={containerClass}>\n                      <Form.Check\n                        type={type}\n                        label={label}\n                        name={name}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                          if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        {...otherProps}\n                      />\n\n                      {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n                      ) : null}\n                    </Form.Group>\n                  ) : (\n                    <Form.Group className={containerClass}>\n                      {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                      <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        id={name}\n                        as={comp}\n                        ref={(r: HTMLInputElement) => {\n                          if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        {...otherProps}\n                        autoComplete={name}\n                      >\n                        {children ? children : null}\n                      </Form.Control>\n\n                      {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n                      ) : null}\n                    </Form.Group>\n                  )}\n                </>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LayoutTypesProps = {\n  changeLayoutType: (value: string) => void;\n  layoutType: string;\n  layoutConstants: typeof layoutConstants.LayoutTypes;\n};\n\nconst LayoutTypes = ({ changeLayoutType, layoutType, layoutConstants }: LayoutTypesProps) => {\n  return (\n    <>\n      <h5 className=\"mt-3\">Layout</h5>\n\n      <hr className=\"mt-1\" />\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          onChange={(e) => changeLayoutType(e.target.value)}\n          name=\"layout-type\"\n          value={layoutConstants.LAYOUT_VERTICAL}\n          id=\"vertical-layout\"\n          checked={layoutType === layoutConstants.LAYOUT_VERTICAL}\n        />\n        <Form.Check.Label htmlFor=\"vertical-layout\">Vertical Layout</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          onChange={(e) => changeLayoutType(e.target.value)}\n          name=\"layout-type\"\n          value={layoutConstants.LAYOUT_HORIZONTAL}\n          id=\"horizontal-layout\"\n          checked={layoutType === layoutConstants.LAYOUT_HORIZONTAL}\n        />\n        <Form.Check.Label htmlFor=\"horizontal-layout\">Horizontal Layout</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          onChange={(e) => changeLayoutType(e.target.value)}\n          name=\"layout-type\"\n          value={layoutConstants.LAYOUT_DETACHED}\n          id=\"detached-layout\"\n          checked={layoutType === layoutConstants.LAYOUT_DETACHED}\n        />\n        <Form.Check.Label htmlFor=\"detached-layout\">Detached Layout</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          onChange={(e) => changeLayoutType(e.target.value)}\n          name=\"layout-type\"\n          value={layoutConstants.LAYOUT_FULL}\n          id=\"full-mode-layout\"\n          checked={layoutType === layoutConstants.LAYOUT_FULL}\n        />\n        <Form.Check.Label htmlFor=\"full-mode-layout\">Full Layout</Form.Check.Label>\n      </Form.Check>\n    </>\n  );\n};\n\nexport default LayoutTypes;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LayoutColorProps = {\n  changeLayoutColorScheme: (value: string) => void;\n  layoutColor: string;\n  layoutConstants: typeof layoutConstants.LayoutColor;\n};\n\nconst LayoutColor = ({ changeLayoutColorScheme, layoutColor, layoutConstants }: LayoutColorProps) => {\n  return (\n    <>\n      <h5 className=\"mt-4\">Color Scheme</h5>\n\n      <hr className=\"mt-1\" />\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          onChange={(e) => changeLayoutColorScheme(e.target.value)}\n          name=\"layout-color\"\n          value={layoutConstants.LAYOUT_COLOR_LIGHT}\n          id=\"light-mode\"\n          checked={layoutColor === layoutConstants.LAYOUT_COLOR_LIGHT}\n        />\n        <Form.Check.Label htmlFor=\"vertical-layout\">Light Mode</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          onChange={(e) => changeLayoutColorScheme(e.target.value)}\n          name=\"layout-color\"\n          value={layoutConstants.LAYOUT_COLOR_DARK}\n          id=\"dark-mode\"\n          checked={layoutColor === layoutConstants.LAYOUT_COLOR_DARK}\n        />\n        <Form.Check.Label htmlFor=\"horizontal-layout\">Dark Mode</Form.Check.Label>\n      </Form.Check>\n    </>\n  );\n};\n\nexport default LayoutColor;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LayoutWidthProps = {\n  changeWidthMode: (value: string) => void;\n  layoutWidth: string;\n  layoutConstants: typeof layoutConstants.LayoutWidth;\n};\n\nconst LayoutWidth = ({ changeWidthMode, layoutWidth, layoutConstants }: LayoutWidthProps) => {\n  return (\n    <>\n      <h5 className=\"mt-4\">Width</h5>\n\n      <hr className=\"mt-1\" />\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          name=\"width\"\n          id=\"fluid-check\"\n          value={layoutConstants.LAYOUT_WIDTH_FLUID}\n          onChange={(e) => changeWidthMode(e.target.value)}\n          checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_FLUID}\n        />\n        <Form.Check.Label htmlFor=\"fluid-check\">Fluid</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          name=\"width\"\n          id=\"boxed-check\"\n          value={layoutConstants.LAYOUT_WIDTH_BOXED}\n          onChange={(e) => changeWidthMode(e.target.value)}\n          checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_BOXED}\n        />\n        <Form.Check.Label htmlFor=\"boxed-check\">Boxed</Form.Check.Label>\n      </Form.Check>\n    </>\n  );\n};\n\nexport default LayoutWidth;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LeftSideBarThemeProps = {\n  changeLeftSidebarTheme: (value: string) => void;\n  leftSideBarTheme: string;\n  layoutConstants: typeof layoutConstants.SideBarTheme;\n};\n\nconst LeftSideBarTheme = ({ changeLeftSidebarTheme, leftSideBarTheme, layoutConstants }: LeftSideBarThemeProps) => {\n  return (\n    <>\n      <h5 className=\"mt-4\">Left Sidebar Color</h5>\n      <hr className=\"mt-1\" />\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          name=\"theme\"\n          id=\"brand-check\"\n          value={layoutConstants.LEFT_SIDEBAR_THEME_DEFAULT}\n          onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n          checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_DEFAULT}\n        />\n        <Form.Check.Label htmlFor=\"brand-check\">Default</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          name=\"theme\"\n          id=\"light-check\"\n          value={layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\n          onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n          checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\n        />\n        <Form.Check.Label htmlFor=\"light-check\">Light</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          name=\"theme\"\n          id=\"dark-check\"\n          value={layoutConstants.LEFT_SIDEBAR_THEME_DARK}\n          onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n          checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_DARK}\n        />\n        <Form.Check.Label htmlFor=\"dark-check\">Dark</Form.Check.Label>\n      </Form.Check>\n    </>\n  );\n};\n\nexport default LeftSideBarTheme;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LeftSideBarTypeProps = {\n  changeLeftSiderbarType: (value: string) => void;\n  leftSideBarType: string;\n  layoutConstants: typeof layoutConstants.SideBarWidth;\n};\n\nconst LeftSideBarType = ({ changeLeftSiderbarType, leftSideBarType, layoutConstants }: LeftSideBarTypeProps) => {\n  return (\n    <>\n      <Form.Check className=\"form-check form-switch mb-1 mt-3\">\n        <Form.Check.Input\n          type=\"radio\"\n          name=\"leftsidebar-size\"\n          id=\"default-check\"\n          value={layoutConstants.LEFT_SIDEBAR_TYPE_FIXED}\n          onChange={(e) => changeLeftSiderbarType(e.target.value)}\n          checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_FIXED}\n        />\n        <Form.Check.Label htmlFor=\"default-check\">Fixed</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          name=\"leftsidebar-size\"\n          id=\"condensed-check\"\n          value={layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\n          onChange={(e) => changeLeftSiderbarType(e.target.value)}\n          checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\n        />\n        <Form.Check.Label htmlFor=\"condensed-check\">Condensed</Form.Check.Label>\n      </Form.Check>\n\n      <Form.Check className=\"form-check form-switch mb-1\">\n        <Form.Check.Input\n          type=\"radio\"\n          name=\"leftsidebar-size\"\n          id=\"compact-check\"\n          value={layoutConstants.LEFT_SIDEBAR_TYPE_SCROLLABLE}\n          onChange={(e) => changeLeftSiderbarType(e.target.value)}\n          checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_SCROLLABLE}\n        />\n        <Form.Check.Label htmlFor=\"compact-check\">Scrollable</Form.Check.Label>\n      </Form.Check>\n    </>\n  );\n};\n\nexport default LeftSideBarType;\n","import * as layoutConstants from 'appConstants';\nimport LayoutTypes from './LayoutTypes';\nimport LayoutColor from './LayoutColor';\nimport LayoutWidth from './LayoutWidth';\nimport LeftSideBarTheme from './LeftSideBarTheme';\nimport LeftSideBarType from './LeftSideBarType';\nimport useThemeCustomizer from './useThemeCustomizer';\n\nconst ThemeCustomizer = () => {\n  const {\n    layoutColor,\n    layoutType,\n    layoutWidth,\n    leftSideBarType,\n    leftSideBarTheme,\n    disableLayoutWidth,\n    disableSidebarTheme,\n    disableSidebarType,\n    changeLayoutType,\n    changeLayoutColorScheme,\n    changeWidthMode,\n    changeLeftSidebarTheme,\n    changeLeftSiderbarType,\n    reset,\n  } = useThemeCustomizer();\n\n  return (\n    <div className=\"p-3\">\n      <div className=\"alert alert-warning\" role=\"alert\">\n        <strong>Customize </strong> the overall color scheme, sidebar menu, etc.\n      </div>\n\n      {/* Layouts */}\n      <LayoutTypes\n        changeLayoutType={changeLayoutType}\n        layoutType={layoutType}\n        layoutConstants={layoutConstants.LayoutTypes}\n      />\n\n      {/* color scheme */}\n      <LayoutColor\n        changeLayoutColorScheme={changeLayoutColorScheme}\n        layoutColor={layoutColor}\n        layoutConstants={layoutConstants.LayoutColor}\n      />\n\n      {/* Width */}\n      {disableLayoutWidth && (\n        <LayoutWidth\n          changeWidthMode={changeWidthMode}\n          layoutWidth={layoutWidth}\n          layoutConstants={layoutConstants.LayoutWidth}\n        />\n      )}\n\n      {/* Left Sidebar */}\n      {disableSidebarTheme && (\n        <LeftSideBarTheme\n          changeLeftSidebarTheme={changeLeftSidebarTheme}\n          leftSideBarTheme={leftSideBarTheme}\n          layoutConstants={layoutConstants.SideBarTheme}\n        />\n      )}\n\n      {/* Left Sidebar Size */}\n      {disableSidebarType && (\n        <LeftSideBarType\n          changeLeftSiderbarType={changeLeftSiderbarType}\n          leftSideBarType={leftSideBarType}\n          layoutConstants={layoutConstants.SideBarWidth}\n        />\n      )}\n\n      <div className=\"d-grid mt-4\">\n        <button className=\"btn btn-primary\" id=\"resetBtn\" onClick={() => reset()}>\n          Reset to Default\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ThemeCustomizer;\n","import { useState, useEffect, useCallback } from 'react';\nimport {\n  changeLayout,\n  changeLayoutColor,\n  changeLayoutWidth,\n  changeSidebarTheme,\n  changeSidebarType,\n} from 'redux/actions';\nimport * as layoutConstants from 'appConstants';\nimport { useRedux } from 'hooks';\n\nexport default function useThemeCustomizer() {\n  const { dispatch, appSelector } = useRedux();\n\n  const { layoutColor, layoutType, layoutWidth, leftSideBarType, leftSideBarTheme } = appSelector((state) => ({\n    layoutColor: state.Layout.layoutColor,\n    layoutType: state.Layout.layoutType,\n    layoutWidth: state.Layout.layoutWidth,\n    leftSideBarTheme: state.Layout.leftSideBarTheme,\n    leftSideBarType: state.Layout.leftSideBarType,\n  }));\n\n  const [disableLayoutWidth, setDisableLayoutWidth] = useState<boolean>(false);\n  const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\n  const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\n\n  /**\n   * change state based on props changes\n   */\n  const _loadStateFromProps = useCallback(() => {\n    setDisableLayoutWidth(\n      layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED &&\n        layoutType !== layoutConstants.LayoutTypes.LAYOUT_FULL\n    );\n\n    setDisableSidebarTheme(\n      layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL &&\n        layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED\n    );\n    setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n  }, [layoutType]);\n\n  useEffect(() => {\n    _loadStateFromProps();\n  }, [_loadStateFromProps]);\n\n  /**\n   * On layout change\n   */\n  const changeLayoutType = (value: string) => {\n    const layout = value;\n    switch (layout) {\n      case 'topnav':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n        break;\n      case 'detached':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_DETACHED));\n        break;\n      case 'full':\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_FULL));\n        break;\n      default:\n        dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n        break;\n    }\n  };\n\n  /**\n   * Change the layout color\n   */\n  const changeLayoutColorScheme = (value: string) => {\n    const mode = value;\n    switch (mode) {\n      case 'dark':\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n        break;\n      default:\n        dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n        break;\n    }\n  };\n\n  /**\n   * Change the width mode\n   */\n  const changeWidthMode = (value: string) => {\n    const mode = value;\n\n    switch (mode) {\n      case 'boxed':\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n        break;\n      default:\n        dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n        break;\n    }\n  };\n\n  /**\n   * Changes the theme\n   */\n  const changeLeftSidebarTheme = (value: string) => {\n    const theme = value;\n    switch (theme) {\n      case 'default':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT));\n        break;\n      case 'light':\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n        break;\n      default:\n        dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n        break;\n    }\n  };\n\n  /**\n   * Change the leftsiderbar type\n   */\n  const changeLeftSiderbarType = (value: string) => {\n    const type = value;\n    switch (type) {\n      case 'condensed':\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\n        break;\n      case 'scrollable':\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_SCROLLABLE));\n        break;\n      default:\n        dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\n        break;\n    }\n  };\n\n  /**\n   * Reset everything\n   */\n  const reset = () => {\n    changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\n    changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n    changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n    changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT);\n    changeLeftSiderbarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED);\n  };\n\n  return {\n    layoutColor,\n    layoutType,\n    layoutWidth,\n    leftSideBarType,\n    leftSideBarTheme,\n    disableLayoutWidth,\n    disableSidebarTheme,\n    disableSidebarType,\n    changeLayoutType,\n    changeLayoutColorScheme,\n    changeWidthMode,\n    changeLeftSidebarTheme,\n    changeLeftSiderbarType,\n    reset,\n  };\n}\n","import { Row, Col } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nexport type FAQItem = {\n  id: number;\n  question: string;\n  answer: string;\n  titleClass?: string;\n  textClass?: string;\n};\n\ntype FAQsProps = {\n  rawFaqs: FAQItem[];\n};\n\nconst FAQs = ({ rawFaqs }: FAQsProps) => {\n  return (\n    <Row className=\"mt-5\">\n      {rawFaqs.map((ques, index) => {\n        return ques.id % 2 !== 0 ? (\n          <Col key={index.toString()} lg={{ span: 5, offset: 1 }}>\n            <div>\n              <div className=\"faq-question-q-box\">Q.</div>\n              <h4 className={classNames('faq-question', ques.titleClass)}>{ques.question}</h4>\n              <p className={classNames('faq-answer mb-4', ques.textClass)}>{ques.answer}</p>\n            </div>\n          </Col>\n        ) : (\n          <Col key={index.toString()} lg={5}>\n            <div>\n              <div className=\"faq-question-q-box\">Q.</div>\n              <h4 className={classNames('faq-question', ques.titleClass)}>{ques.question}</h4>\n              <p className={classNames('faq-answer mb-4', ques.textClass)}>{ques.answer}</p>\n            </div>\n          </Col>\n        );\n      })}\n    </Row>\n  );\n};\n\nexport { FAQs };\n","import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nexport type PricingPlan = {\n  id: number;\n  name: string;\n  icon: string;\n  price: string;\n  duration: string;\n  features: Array<string>;\n  isRecommended: boolean;\n};\n\ntype PricingCardProps = {\n  plans: Array<PricingPlan>;\n  containerClass?: string;\n};\n\nconst PricingCard = ({ plans, containerClass }: PricingCardProps) => {\n  return (\n    <Row className={containerClass}>\n      {plans.map((plan, index) => {\n        return (\n          <Col md={4} key={index.toString()}>\n            <Card\n              className={classNames('card-pricing', {\n                'card-pricing-recommended': plan.isRecommended,\n              })}\n            >\n              <Card.Body className=\"text-center\">\n                {plan.isRecommended && <div className=\"card-pricing-plan-tag\">Recommended</div>}\n                <p className=\"card-pricing-plan-name fw-bold text-uppercase\">{plan.name}</p>\n                <i className={classNames('card-pricing-icon', plan.icon, 'text-primary')}></i>\n                <h2 className=\"card-pricing-price\">\n                  {plan.price} <span>/ {plan.duration}</span>\n                </h2>\n                <ul className=\"card-pricing-features\">\n                  {plan.features.map((feature, index1) => {\n                    return <li key={index1.toString()}>{feature}</li>;\n                  })}\n                </ul>\n                <button className=\"btn btn-primary mt-4 mb-2 btn-rounded\">Choose Plan</button>\n              </Card.Body>\n            </Card>\n          </Col>\n        );\n      })}\n    </Row>\n  );\n};\n\nexport { PricingCard };\n","import { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n  label: string;\n  path: string;\n  active?: boolean;\n};\n\ntype PageTitleProps = {\n  breadCrumbItems: Array<BreadcrumbItems>;\n  title: string;\n};\n\nconst PageTitle = ({ breadCrumbItems, title }: PageTitleProps) => {\n  return (\n    <Row>\n      <Col>\n        <div className=\"page-title-box\">\n          <div className=\"page-title-right\">\n            <Breadcrumb listProps={{ className: 'm-0' }}>\n              <Breadcrumb.Item href=\"/\">Asyncrum</Breadcrumb.Item>\n\n              {breadCrumbItems.map((item, index) => {\n                return item.active ? (\n                  <Breadcrumb.Item active key={index.toString()}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                ) : (\n                  <Breadcrumb.Item key={index.toString()} href={item.path}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                );\n              })}\n            </Breadcrumb>\n          </div>\n          <h4 className=\"page-title\">{title}</h4>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PageTitle;\n","import { useReactMediaRecorder } from 'react-media-recorder';\nimport { useEffect, useRef, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport { createRecord as createRecordAPI, uploadRecord as uploadRecordAPI } from 'helpers';\nimport { useRedux } from 'hooks';\n\nconst useVideoRecorder = () => {\n  const { appSelector } = useRedux();\n\n  const { user, currentTeam } = appSelector((state) => ({\n    user: state.Auth.user,\n    currentTeam: state.Team.currentTeam,\n  }));\n  const [recordingState, setRecordingState] = useState<'idle' | 'recording' | 'recorded'>('idle');\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const webcamRef = useRef<Webcam>(null);\n\n  const title = user.fullname + ' ' + Date.now();\n  const description = 'Daily standups - ' + title;\n\n  const {\n    status: camStatus,\n    startRecording: camStartRecording,\n    stopRecording: camStopRecording,\n    mediaBlobUrl: camMediaBlobUrl,\n    previewStream,\n  } = useReactMediaRecorder({ video: true });\n\n  const {\n    startRecording: screenStartRecording,\n    stopRecording: screenStopRecording,\n    mediaBlobUrl: screenMediaBlobUrl,\n  } = useReactMediaRecorder({ video: true, screen: true });\n\n  const uploadVideo = async (url: string, type: string) => {\n    const camMedia = await fetch(url);\n    const blob = await camMedia.blob();\n    const body = {\n      title: title + ' ' + type,\n      description: description + ' ' + type,\n      scope: 'team',\n      teamId: currentTeam.id,\n    };\n\n    const createRecordAPIResponse = await createRecordAPI(body);\n    const presignedURL = createRecordAPIResponse.data.preSignedURL;\n    const fileToUpload = new File([blob], title + ' ' + type + '.mp4', { type: 'video/mp4' });\n    await uploadRecordAPI(presignedURL, fileToUpload);\n  };\n\n  const uploadVideoes = async () => {\n    if (!camMediaBlobUrl || !screenMediaBlobUrl) {\n      alert('Recordings are not ready');\n      return;\n    }\n\n    await uploadVideo(camMediaBlobUrl, 'cam');\n    await uploadVideo(screenMediaBlobUrl, 'screen');\n\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    if (videoRef.current && previewStream) {\n      videoRef.current.srcObject = previewStream;\n    }\n  }, [previewStream]);\n\n  return {\n    recordingState,\n    webcamRef,\n    videoRef,\n    previewStream,\n    camMediaBlobUrl,\n    screenMediaBlobUrl,\n    setRecordingState,\n    camStartRecording,\n    camStopRecording,\n    screenStartRecording,\n    screenStopRecording,\n    uploadVideoes,\n  };\n};\n\nexport default useVideoRecorder;\n","import Webcam from 'react-webcam';\nimport { useVideoRecorder } from './hooks';\n\nconst VideoRecorder: React.FC = () => {\n  const videoConstraints = { facingMode: 'user' };\n  const cam_w = 320,\n    cam_h = 240,\n    screen_w = 960,\n    screen_h = 540;\n  const {\n    recordingState,\n    webcamRef,\n    videoRef,\n    previewStream,\n    camMediaBlobUrl,\n    screenMediaBlobUrl,\n    setRecordingState,\n    camStartRecording,\n    camStopRecording,\n    screenStartRecording,\n    screenStopRecording,\n    uploadVideoes,\n  } = useVideoRecorder();\n\n  return (\n    <div className=\"video-recorder\">\n      <div>\n        {recordingState === 'idle' && (\n          <Webcam\n            audio={false}\n            ref={webcamRef}\n            videoConstraints={videoConstraints}\n            width={cam_w}\n            height={cam_h}\n            style={{ marginLeft: 'auto', marginRight: 'auto', display: 'block' }}\n          />\n        )}\n        {recordingState === 'recording' && previewStream && (\n          <div>\n            <video\n              ref={videoRef}\n              width={cam_w}\n              height={cam_h}\n              controls\n              playsInline\n              autoPlay\n              style={{ marginLeft: 'auto', marginRight: 'auto', display: 'block' }}\n            />\n          </div>\n        )}\n        {recordingState === 'recorded' && (\n          <div>\n            <video\n              src={camMediaBlobUrl}\n              controls\n              autoPlay\n              playsInline\n              width={cam_w}\n              height={cam_h}\n              style={{ marginLeft: 'auto', marginRight: 'auto', display: 'block' }}\n            />\n            <video\n              src={screenMediaBlobUrl}\n              controls\n              autoPlay\n              playsInline\n              width={screen_w}\n              height={screen_h}\n              style={{ marginLeft: 'auto', marginRight: 'auto', display: 'block' }}\n            />\n          </div>\n        )}\n        {recordingState !== 'recording' ? (\n          recordingState === 'idle' ? (\n            <div className=\"mt-4 mb-3 text-center\">\n              <button\n                className=\"btn btn-primary\"\n                onClick={() => {\n                  screenStartRecording();\n                  camStartRecording();\n                  setRecordingState('recording');\n                }}\n              >\n                Start Recording\n              </button>\n            </div>\n          ) : (\n            <div className=\"mt-4 mb-3 text-center\">\n              <button\n                className=\"btn btn-primary me-3\"\n                onClick={() => {\n                  setRecordingState('idle');\n                }}\n              >\n                Reshoot\n              </button>\n              <button className=\"btn btn-primary\" onClick={uploadVideoes}>\n                Save Recording\n              </button>\n            </div>\n          )\n        ) : (\n          <div className=\"mt-4 mb-3 text-center\">\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => {\n                camStopRecording();\n                screenStopRecording();\n                setRecordingState('recorded');\n              }}\n            >\n              Stop Recording\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoRecorder;\n"],"names":["defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","useToggle","showPassword","togglePassword","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","label","labelClassName","containerClass","otherProps","rows","comp","changeLayoutType","layoutType","layoutConstants","onChange","e","target","value","LAYOUT_VERTICAL","checked","htmlFor","LAYOUT_HORIZONTAL","LAYOUT_DETACHED","LAYOUT_FULL","changeLayoutColorScheme","layoutColor","LAYOUT_COLOR_LIGHT","LAYOUT_COLOR_DARK","changeWidthMode","layoutWidth","LAYOUT_WIDTH_FLUID","LAYOUT_WIDTH_BOXED","changeLeftSidebarTheme","leftSideBarTheme","LEFT_SIDEBAR_THEME_DEFAULT","LEFT_SIDEBAR_THEME_LIGHT","LEFT_SIDEBAR_THEME_DARK","changeLeftSiderbarType","leftSideBarType","LEFT_SIDEBAR_TYPE_FIXED","LEFT_SIDEBAR_TYPE_CONDENSED","LEFT_SIDEBAR_TYPE_SCROLLABLE","useRedux","dispatch","appSelector","state","Layout","useState","disableLayoutWidth","setDisableLayoutWidth","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","_loadStateFromProps","useCallback","useEffect","changeLayout","changeLayoutColor","changeLayoutWidth","changeSidebarTheme","changeSidebarType","reset","useThemeCustomizer","role","FAQs","rawFaqs","Row","ques","index","Col","lg","span","offset","titleClass","question","textClass","answer","toString","PricingCard","plans","plan","md","Card","isRecommended","icon","price","duration","features","feature","index1","breadCrumbItems","title","Breadcrumb","listProps","href","item","active","path","user","Auth","currentTeam","Team","recordingState","setRecordingState","videoRef","useRef","webcamRef","fullname","Date","now","description","useReactMediaRecorder","video","camStartRecording","status","startRecording","camStopRecording","stopRecording","camMediaBlobUrl","mediaBlobUrl","previewStream","screen","screenStartRecording","screenStopRecording","screenMediaBlobUrl","uploadVideo","url","fetch","camMedia","blob","body","scope","teamId","createRecordAPI","createRecordAPIResponse","presignedURL","data","preSignedURL","fileToUpload","File","uploadRecordAPI","uploadVideoes","alert","window","location","reload","current","srcObject","useVideoRecorder","audio","videoConstraints","facingMode","width","height","style","marginLeft","marginRight","display","controls","playsInline","autoPlay","src"],"sourceRoot":""}