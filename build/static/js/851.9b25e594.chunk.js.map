{"version":3,"file":"static/js/851.9b25e594.chunk.js","mappings":"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","sources":["components/form/VerticalForm.tsx","components/form/FormInput.tsx","components/ThemeCustomizer/LayoutTypes.tsx","components/ThemeCustomizer/LayoutColor.tsx","components/ThemeCustomizer/LayoutWidth.tsx","components/ThemeCustomizer/LeftSideBarTheme.tsx","components/ThemeCustomizer/LeftSideBarType.tsx","components/ThemeCustomizer/ThemeCustomizer.tsx","components/ThemeCustomizer/useThemeCustomizer.ts","components/FAQs.tsx","components/PricingCard.tsx","components/PageTitle.tsx","components/VideoRecorder.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm, Resolver, SubmitHandler, DefaultValues } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: DefaultValues<TFormValues>;\n    resolver?: Resolver<any>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<any>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { FieldErrors, Control } from 'react-hook-form';\nimport { useToggle } from 'hooks';\n\ntype PasswordInputProps = {\n    name: string;\n    placeholder?: string;\n    refCallback?: any;\n    errors: FieldErrors;\n    control?: Control<any>;\n    register?: any;\n    className?: string;\n};\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }: PasswordInputProps) => {\n    const [showPassword, togglePassword] = useToggle();\n\n    return (\n        <InputGroup className=\"mb-0\">\n            <Form.Control\n                type={showPassword ? 'text' : 'password'}\n                placeholder={placeholder}\n                name={name}\n                id={name}\n                as=\"input\"\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                autoComplete={name}\n            />\n            <div\n                className={classNames('input-group-text', 'input-group-password', {\n                    'show-password': showPassword,\n                })}\n                data-password={showPassword ? 'true' : 'false'}\n            >\n                <span className=\"password-eye\" onClick={togglePassword}></span>\n            </div>\n        </InputGroup>\n    );\n};\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    label?: string;\n    type?: string;\n    name: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    refCallback?: any;\n    children?: React.ReactNode;\n    rows?: string;\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors!}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <Form.Group className={containerClass}>\n                                    {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                    <Form.Select\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        id={name}\n                                        ref={(r: HTMLInputElement) => {\n                                            if (refCallback) refCallback(r);\n                                        }}\n                                        comp={comp}\n                                        className={className}\n                                        isInvalid={errors && errors[name] ? true : false}\n                                        {...(register ? register(name) : {})}\n                                        {...otherProps}\n                                    >\n                                        {children}\n                                    </Form.Select>\n\n                                    {errors && errors[name] ? (\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors[name]['message']}\n                                        </Form.Control.Feedback>\n                                    ) : null}\n                                </Form.Group>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <Form.Group className={containerClass}>\n                                            <Form.Check\n                                                type={type}\n                                                label={label}\n                                                name={name}\n                                                id={name}\n                                                ref={(r: HTMLInputElement) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                            />\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r: HTMLInputElement) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}\n                                            >\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LayoutTypesProps = {\n    changeLayoutType: (value: string) => void;\n    layoutType: string;\n    layoutConstants: typeof layoutConstants.LayoutTypes;\n};\n\nconst LayoutTypes = ({ changeLayoutType, layoutType, layoutConstants }: LayoutTypesProps) => {\n    return (\n        <>\n            <h5 className=\"mt-3\">Layout</h5>\n\n            <hr className=\"mt-1\" />\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_VERTICAL}\n                    id=\"vertical-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_VERTICAL}\n                />\n                <Form.Check.Label htmlFor=\"vertical-layout\">Vertical Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_HORIZONTAL}\n                    id=\"horizontal-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_HORIZONTAL}\n                />\n                <Form.Check.Label htmlFor=\"horizontal-layout\">Horizontal Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_DETACHED}\n                    id=\"detached-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_DETACHED}\n                />\n                <Form.Check.Label htmlFor=\"detached-layout\">Detached Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_FULL}\n                    id=\"full-mode-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_FULL}\n                />\n                <Form.Check.Label htmlFor=\"full-mode-layout\">Full Layout</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutTypes;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LayoutColorProps = {\n    changeLayoutColorScheme: (value: string) => void;\n    layoutColor: string;\n    layoutConstants: typeof layoutConstants.LayoutColor;\n};\n\nconst LayoutColor = ({ changeLayoutColorScheme, layoutColor, layoutConstants }: LayoutColorProps) => {\n    return (\n        <>\n            <h5 className=\"mt-4\">Color Scheme</h5>\n\n            <hr className=\"mt-1\" />\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutColorScheme(e.target.value)}\n                    name=\"layout-color\"\n                    value={layoutConstants.LAYOUT_COLOR_LIGHT}\n                    id=\"light-mode\"\n                    checked={layoutColor === layoutConstants.LAYOUT_COLOR_LIGHT}\n                />\n                <Form.Check.Label htmlFor=\"vertical-layout\">Light Mode</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutColorScheme(e.target.value)}\n                    name=\"layout-color\"\n                    value={layoutConstants.LAYOUT_COLOR_DARK}\n                    id=\"dark-mode\"\n                    checked={layoutColor === layoutConstants.LAYOUT_COLOR_DARK}\n                />\n                <Form.Check.Label htmlFor=\"horizontal-layout\">Dark Mode</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutColor;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LayoutWidthProps = {\n    changeWidthMode: (value: string) => void;\n    layoutWidth: string;\n    layoutConstants: typeof layoutConstants.LayoutWidth;\n};\n\nconst LayoutWidth = ({ changeWidthMode, layoutWidth, layoutConstants }: LayoutWidthProps) => {\n    return (\n        <>\n            <h5 className=\"mt-4\">Width</h5>\n\n            <hr className=\"mt-1\" />\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"width\"\n                    id=\"fluid-check\"\n                    value={layoutConstants.LAYOUT_WIDTH_FLUID}\n                    onChange={(e) => changeWidthMode(e.target.value)}\n                    checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_FLUID}\n                />\n                <Form.Check.Label htmlFor=\"fluid-check\">Fluid</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"width\"\n                    id=\"boxed-check\"\n                    value={layoutConstants.LAYOUT_WIDTH_BOXED}\n                    onChange={(e) => changeWidthMode(e.target.value)}\n                    checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_BOXED}\n                />\n                <Form.Check.Label htmlFor=\"boxed-check\">Boxed</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutWidth;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LeftSideBarThemeProps = {\n    changeLeftSidebarTheme: (value: string) => void;\n    leftSideBarTheme: string;\n    layoutConstants: typeof layoutConstants.SideBarTheme;\n};\n\nconst LeftSideBarTheme = ({ changeLeftSidebarTheme, leftSideBarTheme, layoutConstants }: LeftSideBarThemeProps) => {\n    return (\n        <>\n            <h5 className=\"mt-4\">Left Sidebar Color</h5>\n            <hr className=\"mt-1\" />\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"brand-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_DEFAULT}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_DEFAULT}\n                />\n                <Form.Check.Label htmlFor=\"brand-check\">Default</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"light-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\n                />\n                <Form.Check.Label htmlFor=\"light-check\">Light</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"dark-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_DARK}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_DARK}\n                />\n                <Form.Check.Label htmlFor=\"dark-check\">Dark</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LeftSideBarTheme;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from 'appConstants';\n\ntype LeftSideBarTypeProps = {\n    changeLeftSiderbarType: (value: string) => void;\n    leftSideBarType: string;\n    layoutConstants: typeof layoutConstants.SideBarWidth;\n};\n\nconst LeftSideBarType = ({ changeLeftSiderbarType, leftSideBarType, layoutConstants }: LeftSideBarTypeProps) => {\n    return (\n        <>\n            <Form.Check className=\"form-check form-switch mb-1 mt-3\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"default-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_FIXED}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_FIXED}\n                />\n                <Form.Check.Label htmlFor=\"default-check\">Fixed</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"condensed-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\n                />\n                <Form.Check.Label htmlFor=\"condensed-check\">Condensed</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"compact-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_SCROLLABLE}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_SCROLLABLE}\n                />\n                <Form.Check.Label htmlFor=\"compact-check\">Scrollable</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LeftSideBarType;\n","import * as layoutConstants from 'appConstants';\nimport LayoutTypes from './LayoutTypes';\nimport LayoutColor from './LayoutColor';\nimport LayoutWidth from './LayoutWidth';\nimport LeftSideBarTheme from './LeftSideBarTheme';\nimport LeftSideBarType from './LeftSideBarType';\nimport useThemeCustomizer from './useThemeCustomizer';\n\nconst ThemeCustomizer = () => {\n    const {\n        layoutColor,\n        layoutType,\n        layoutWidth,\n        leftSideBarType,\n        leftSideBarTheme,\n        disableLayoutWidth,\n        disableSidebarTheme,\n        disableSidebarType,\n        changeLayoutType,\n        changeLayoutColorScheme,\n        changeWidthMode,\n        changeLeftSidebarTheme,\n        changeLeftSiderbarType,\n        reset,\n    } = useThemeCustomizer();\n\n    return (\n        <div className=\"p-3\">\n            <div className=\"alert alert-warning\" role=\"alert\">\n                <strong>Customize </strong> the overall color scheme, sidebar menu, etc.\n            </div>\n\n            {/* Layouts */}\n            <LayoutTypes\n                changeLayoutType={changeLayoutType}\n                layoutType={layoutType}\n                layoutConstants={layoutConstants.LayoutTypes}\n            />\n\n            {/* color scheme */}\n            <LayoutColor\n                changeLayoutColorScheme={changeLayoutColorScheme}\n                layoutColor={layoutColor}\n                layoutConstants={layoutConstants.LayoutColor}\n            />\n\n            {/* Width */}\n            {disableLayoutWidth && (\n                <LayoutWidth\n                    changeWidthMode={changeWidthMode}\n                    layoutWidth={layoutWidth}\n                    layoutConstants={layoutConstants.LayoutWidth}\n                />\n            )}\n\n            {/* Left Sidebar */}\n            {disableSidebarTheme && (\n                <LeftSideBarTheme\n                    changeLeftSidebarTheme={changeLeftSidebarTheme}\n                    leftSideBarTheme={leftSideBarTheme}\n                    layoutConstants={layoutConstants.SideBarTheme}\n                />\n            )}\n\n            {/* Left Sidebar Size */}\n            {disableSidebarType && (\n                <LeftSideBarType\n                    changeLeftSiderbarType={changeLeftSiderbarType}\n                    leftSideBarType={leftSideBarType}\n                    layoutConstants={layoutConstants.SideBarWidth}\n                />\n            )}\n\n            <div className=\"d-grid mt-4\">\n                <button className=\"btn btn-primary\" id=\"resetBtn\" onClick={() => reset()}>\n                    Reset to Default\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default ThemeCustomizer;\n","import { useState, useEffect, useCallback } from 'react';\nimport {\n    changeLayout,\n    changeLayoutColor,\n    changeLayoutWidth,\n    changeSidebarTheme,\n    changeSidebarType,\n} from 'redux/actions';\nimport * as layoutConstants from 'appConstants';\nimport { useRedux } from 'hooks';\n\nexport default function useThemeCustomizer() {\n    const { dispatch, appSelector } = useRedux();\n\n    const { layoutColor, layoutType, layoutWidth, leftSideBarType, leftSideBarTheme } = appSelector((state) => ({\n        layoutColor: state.Layout.layoutColor,\n        layoutType: state.Layout.layoutType,\n        layoutWidth: state.Layout.layoutWidth,\n        leftSideBarTheme: state.Layout.leftSideBarTheme,\n        leftSideBarType: state.Layout.leftSideBarType,\n    }));\n\n    const [disableLayoutWidth, setDisableLayoutWidth] = useState<boolean>(false);\n    const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\n    const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\n\n    /**\n     * change state based on props changes\n     */\n    const _loadStateFromProps = useCallback(() => {\n        setDisableLayoutWidth(\n            layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED &&\n                layoutType !== layoutConstants.LayoutTypes.LAYOUT_FULL\n        );\n\n        setDisableSidebarTheme(\n            layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL &&\n                layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED\n        );\n        setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n    }, [layoutType]);\n\n    useEffect(() => {\n        _loadStateFromProps();\n    }, [_loadStateFromProps]);\n\n    /**\n     * On layout change\n     */\n    const changeLayoutType = (value: string) => {\n        var layout = value;\n        switch (layout) {\n            case 'topnav':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n                break;\n            case 'detached':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_DETACHED));\n                break;\n            case 'full':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_FULL));\n                break;\n            default:\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n                break;\n        }\n    };\n\n    /**\n     * Change the layout color\n     */\n    const changeLayoutColorScheme = (value: string) => {\n        var mode = value;\n        switch (mode) {\n            case 'dark':\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n                break;\n            default:\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n                break;\n        }\n    };\n\n    /**\n     * Change the width mode\n     */\n    const changeWidthMode = (value: string) => {\n        var mode = value;\n\n        switch (mode) {\n            case 'boxed':\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n                break;\n            default:\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n                break;\n        }\n    };\n\n    /**\n     * Changes the theme\n     */\n    const changeLeftSidebarTheme = (value: string) => {\n        var theme = value;\n        switch (theme) {\n            case 'default':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT));\n                break;\n            case 'light':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n                break;\n            default:\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n                break;\n        }\n    };\n\n    /**\n     * Change the leftsiderbar type\n     */\n    const changeLeftSiderbarType = (value: string) => {\n        var type = value;\n        switch (type) {\n            case 'condensed':\n                dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\n                break;\n            case 'scrollable':\n                dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_SCROLLABLE));\n                break;\n            default:\n                dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\n                break;\n        }\n    };\n\n    /**\n     * Reset everything\n     */\n    const reset = () => {\n        changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\n        changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n        changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n        changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT);\n        changeLeftSiderbarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED);\n    };\n\n    return {\n        layoutColor,\n        layoutType,\n        layoutWidth,\n        leftSideBarType,\n        leftSideBarTheme,\n        disableLayoutWidth,\n        disableSidebarTheme,\n        disableSidebarType,\n        changeLayoutType,\n        changeLayoutColorScheme,\n        changeWidthMode,\n        changeLeftSidebarTheme,\n        changeLeftSiderbarType,\n        reset,\n    };\n}\n","import { Row, Col } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nexport type FAQItem = {\n    id: number;\n    question: string;\n    answer: string;\n    titleClass?: string;\n    textClass?: string;\n};\n\ntype FAQsProps = {\n    rawFaqs: FAQItem[];\n};\n\nconst FAQs = ({ rawFaqs }: FAQsProps) => {\n    return (\n        <Row className=\"mt-5\">\n            {rawFaqs.map((ques, index) => {\n                return ques.id % 2 !== 0 ? (\n                    <Col key={index.toString()} lg={{ span: 5, offset: 1 }}>\n                        <div>\n                            <div className=\"faq-question-q-box\">Q.</div>\n                            <h4 className={classNames('faq-question', ques.titleClass)}>{ques.question}</h4>\n                            <p className={classNames('faq-answer mb-4', ques.textClass)}>{ques.answer}</p>\n                        </div>\n                    </Col>\n                ) : (\n                    <Col key={index.toString()} lg={5}>\n                        <div>\n                            <div className=\"faq-question-q-box\">Q.</div>\n                            <h4 className={classNames('faq-question', ques.titleClass)}>{ques.question}</h4>\n                            <p className={classNames('faq-answer mb-4', ques.textClass)}>{ques.answer}</p>\n                        </div>\n                    </Col>\n                );\n            })}\n        </Row>\n    );\n};\n\nexport { FAQs };\n","import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nexport type PricingPlan = {\n    id: number;\n    name: string;\n    icon: string;\n    price: string;\n    duration: string;\n    features: Array<string>;\n    isRecommended: boolean;\n};\n\ntype PricingCardProps = {\n    plans: Array<PricingPlan>;\n    containerClass?: string;\n};\n\nconst PricingCard = ({ plans, containerClass }: PricingCardProps) => {\n    return (\n        <Row className={containerClass}>\n            {plans.map((plan, index) => {\n                return (\n                    <Col md={4} key={index.toString()}>\n                        <Card\n                            className={classNames('card-pricing', {\n                                'card-pricing-recommended': plan.isRecommended,\n                            })}\n                        >\n                            <Card.Body className=\"text-center\">\n                                {plan.isRecommended && <div className=\"card-pricing-plan-tag\">Recommended</div>}\n                                <p className=\"card-pricing-plan-name fw-bold text-uppercase\">{plan.name}</p>\n                                <i className={classNames('card-pricing-icon', plan.icon, 'text-primary')}></i>\n                                <h2 className=\"card-pricing-price\">\n                                    {plan.price} <span>/ {plan.duration}</span>\n                                </h2>\n                                <ul className=\"card-pricing-features\">\n                                    {plan.features.map((feature, index1) => {\n                                        return <li key={index1.toString()}>{feature}</li>;\n                                    })}\n                                </ul>\n                                <button className=\"btn btn-primary mt-4 mb-2 btn-rounded\">Choose Plan</button>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                );\n            })}\n        </Row>\n    );\n};\n\nexport { PricingCard };\n","import { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string;\n    path: string;\n    active?: boolean;\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>;\n    title: string;\n};\n\nconst PageTitle = ({ breadCrumbItems, title }: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Asyncrum</Breadcrumb.Item>\n\n                            {breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index.toString()}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index.toString()} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import { Button } from 'react-bootstrap';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { useEffect, useRef, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport axios from 'axios';\nimport config from 'config';\n\nconst videoConstraints = { facingMode: 'user' }\nconst cam_w = 320, cam_h = 240, screen_w = 960, screen_h = 540\n\nconst VideoRecorder: React.FC = () => {\n  const user = JSON.parse(sessionStorage.getItem('asyncrum_user')!);\n  const title = user.fullname + \" \" + Date.now();\n  const description = \"Daily standups - \" + title\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const webcamRef = useRef<Webcam>(null)\n  const [recordingState, setRecordingState] = useState<'idle' | 'recording' | 'recorded'>('idle')\n\n  const {\n    status: camStatus,\n    startRecording: camStartRecording,\n    stopRecording: camStopRecording,\n    mediaBlobUrl: camMediaBlobUrl,\n    previewStream,\n  } = useReactMediaRecorder({ video: true });\n\n  const {\n    startRecording: screenStartRecording,\n    stopRecording: screenStopRecording,\n    mediaBlobUrl: screenMediaBlobUrl,\n  } = useReactMediaRecorder({ video: true, screen: true });\n\n  const uploadVideo = async (url: string, type: string) => {\n    let camMedia = await fetch(url!);\n    let blob = await camMedia.blob();\n    let response = await axios.post(config.API_URL+'/api/v1/records', {\n      \"title\": title + \" \" + type,\n      \"description\": description + \" \" + type,\n      \"scope\": \"team\"\n    }, { headers: { Authorization: 'Bearer ' + user.token }});\n\n    const preSignedURL = response.data.preSignedURL;\n    const fileToUpload = new File([blob], title + \" \" + type + \".mp4\", {type: 'video/mp4'});\n    const uploadAxios = axios.create({ transformRequest: [(data: any, headers: any) => {\n      delete headers.common.Authorization;\n      headers['Content-Type'] = 'video/mp4';\n      return data;\n    }] });\n    await uploadAxios.put(preSignedURL, fileToUpload);\n  }\n\n  const uploadScreenVideo = async () => {\n    await fetch(screenMediaBlobUrl!)\n      .then(res => res.blob())\n      .then(blob => {\n        axios.post(config.API_URL+'/api/v1/records', {\n          \"title\": title + \" screen\",\n          \"description\": description + \" screen\",\n          \"scope\": \"TEAM\"\n        }, { headers: { Authorization: 'Bearer ' + user.token }})\n        .then(async (res) => {\n          const preSignedURL = res.data.preSignedURL;\n          const fileToUpload = new File([blob], title + \" screen.mp4\", {type: 'video/mp4'});\n          const uploadAxios = axios.create({ transformRequest: [(data: any, headers: any) => {\n            delete headers.common.Authorization;\n            headers['Content-Type'] = 'video/mp4';\n            return data;\n          }] });\n          await uploadAxios.put(preSignedURL, fileToUpload);\n        });\n      });\n  }\n\n  const uploadVideoes = async () => {\n    if (!camMediaBlobUrl || !screenMediaBlobUrl) {\n      alert(\"Recordings are not ready\");\n      return;\n    }\n\n    await uploadVideo(camMediaBlobUrl, \"cam\");\n    await uploadVideo(screenMediaBlobUrl, \"screen\");\n\n    window.location.reload();\n  }\n\n  useEffect(() => {\n    if (videoRef.current && previewStream) {\n      videoRef.current.srcObject = previewStream;\n    }\n  }, [previewStream])\n\n  useEffect(() => {\n  }, [recordingState, screenMediaBlobUrl]);\n\n  return (\n    <div className=\"video-recorder\">\n        <div>\n          {\n            recordingState === 'idle' &&\n            <Webcam audio={false} ref={webcamRef} videoConstraints={videoConstraints} width={cam_w} height={cam_h} style={{marginLeft: 'auto', marginRight: 'auto', display: 'block'}} />\n          }\n          {\n            (recordingState === 'recording' && previewStream) &&\n            <div>\n              <video ref={videoRef} width={cam_w} height={cam_h} controls playsInline autoPlay style={{marginLeft: 'auto', marginRight: 'auto', display: 'block'}}/>\n            </div>\n          }\n          {\n            recordingState === 'recorded' &&\n            <div>\n              <video src={camMediaBlobUrl!} controls autoPlay playsInline width={cam_w} height={cam_h} style={{marginLeft: 'auto', marginRight: 'auto', display: 'block'}} />\n              <video src={screenMediaBlobUrl!} controls autoPlay playsInline width={screen_w} height={screen_h} style={{marginLeft: 'auto', marginRight: 'auto', display: 'block'}} />\n            </div>\n          }\n          {\n            recordingState !== 'recording'\n              ? recordingState === 'idle'\n                ? (\n                  <div className='mt-4 mb-3 text-center'>\n                    <button className=\"btn btn-primary\" onClick={() => { screenStartRecording(); camStartRecording(); setRecordingState('recording'); }}>Start Recording</button>\n                  </div>\n                  )\n                : (\n                  <div className='mt-4 mb-3 text-center'>\n                    <button className=\"btn btn-primary me-3\" onClick={() => { setRecordingState('idle') }}>Reshoot</button>\n                    <button className='btn btn-primary' onClick={uploadVideoes}>Save Recording</button>\n                  </div>\n                )\n              : (\n                <div className='mt-4 mb-3 text-center'>\n                  <button className=\"btn btn-danger\" onClick={() => { camStopRecording(); screenStopRecording(); setRecordingState('recorded'); }}>Stop Recording</button>\n                </div>\n                )\n          }\n        </div>\n    </div >\n  );\n}\n\nexport default VideoRecorder;"],"names":["defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","useToggle","showPassword","togglePassword","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","label","labelClassName","containerClass","otherProps","rows","comp","changeLayoutType","layoutType","layoutConstants","onChange","e","target","value","LAYOUT_VERTICAL","checked","htmlFor","LAYOUT_HORIZONTAL","LAYOUT_DETACHED","LAYOUT_FULL","changeLayoutColorScheme","layoutColor","LAYOUT_COLOR_LIGHT","LAYOUT_COLOR_DARK","changeWidthMode","layoutWidth","LAYOUT_WIDTH_FLUID","LAYOUT_WIDTH_BOXED","changeLeftSidebarTheme","leftSideBarTheme","LEFT_SIDEBAR_THEME_DEFAULT","LEFT_SIDEBAR_THEME_LIGHT","LEFT_SIDEBAR_THEME_DARK","changeLeftSiderbarType","leftSideBarType","LEFT_SIDEBAR_TYPE_FIXED","LEFT_SIDEBAR_TYPE_CONDENSED","LEFT_SIDEBAR_TYPE_SCROLLABLE","useRedux","dispatch","appSelector","state","Layout","useState","disableLayoutWidth","setDisableLayoutWidth","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","_loadStateFromProps","useCallback","useEffect","changeLayout","changeLayoutColor","changeLayoutWidth","changeSidebarTheme","changeSidebarType","reset","useThemeCustomizer","role","FAQs","rawFaqs","Row","ques","index","Col","lg","span","offset","titleClass","question","textClass","answer","toString","PricingCard","plans","plan","md","Card","isRecommended","icon","price","duration","features","feature","index1","breadCrumbItems","title","Breadcrumb","listProps","href","item","active","path","videoConstraints","facingMode","user","JSON","parse","sessionStorage","getItem","fullname","Date","now","description","videoRef","useRef","webcamRef","recordingState","setRecordingState","useReactMediaRecorder","video","camStartRecording","status","startRecording","camStopRecording","stopRecording","camMediaBlobUrl","mediaBlobUrl","previewStream","screen","screenStartRecording","screenStopRecording","screenMediaBlobUrl","uploadVideo","url","fetch","camMedia","blob","axios","config","headers","Authorization","token","response","preSignedURL","data","fileToUpload","File","uploadAxios","transformRequest","common","put","uploadVideoes","alert","window","location","reload","current","srcObject","audio","width","height","style","marginLeft","marginRight","display","controls","playsInline","autoPlay","src"],"sourceRoot":""}