{"version":3,"file":"static/js/937.59545661.chunk.js","mappings":"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","sources":["pages/account/AccountLayout.tsx","pages/account/Login.tsx","pages/account/OAuthButton.tsx","pages/account/hooks/useAccountLayout.ts","pages/account/hooks/useForgetPassword.ts","pages/account/hooks/useLogin.ts","pages/account/hooks/useOAuthLogin.ts","pages/account/hooks/useLogout.ts","pages/account/hooks/useRegister.ts"],"sourcesContent":["import React from 'react';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport Logo from 'assets/images/asyncrum-logo-white.png';\nimport { useAccountLayout } from './hooks';\n\ntype AccountLayoutProps = {\n  bottomLinks?: React.ReactNode;\n  children?: React.ReactNode;\n};\n\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps) => {\n  const { t } = useTranslation();\n\n  useAccountLayout();\n\n  return (\n    <>\n      <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col md={8} lg={6} xl={5} xxl={4}>\n              <Card>\n                {/* logo */}\n                <Card.Header className=\"pt-4 pb-3 text-center bg-primary\">\n                  <Link to=\"/\">\n                    <span>\n                      <img src={Logo} alt=\"\" height=\"36\" />\n                    </span>\n                  </Link>\n                </Card.Header>\n                <Card.Body className=\"p-4\">{children}</Card.Body>\n              </Card>\n\n              {/* bottom links */}\n              {bottomLinks}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <footer className=\"footer footer-alt\">{t(`2022 Â© Asyncrum - Software Maestro 13th Team WBJ`)}</footer>\n    </>\n  );\n};\n\nexport default AccountLayout;\n","import { Button, Alert, Row, Col } from 'react-bootstrap';\nimport { Link, Navigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { VerticalForm, FormInput } from 'components';\nimport AccountLayout from './AccountLayout';\nimport { useLogin } from './hooks';\nimport OAuthButton from './OAuthButton';\n\nexport type UserData = {\n  username: string;\n  password: string;\n};\n\nconst BottomLink = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Row className=\"mt-3\">\n      <Col className=\"text-center\">\n        <p className=\"text-muted\">\n          {t(\"Don't have an account?\")}{' '}\n          <Link to={'/account/register'} className=\"text-muted ms-1\">\n            <b>{t('Sign Up')}</b>\n          </Link>\n        </p>\n      </Col>\n    </Row>\n  );\n};\n\nconst Login = () => {\n  const { t } = useTranslation();\n\n  const { loading, userLoggedIn, user, error, schemaResolver, onSubmit, redirectUrl } = useLogin();\n\n  return (\n    <>\n      {(userLoggedIn || user) && <Navigate to={redirectUrl} replace />}\n\n      <AccountLayout bottomLinks={<BottomLink />}>\n        <div className=\"text-center w-75 m-auto\">\n          <h4 className=\"text-dark-50 text-center mt-0 mb-4 fw-bold\">{t('Log In')}</h4>\n        </div>\n\n        {error && (\n          <Alert variant=\"danger\" className=\"my-2\">\n            {error}\n          </Alert>\n        )}\n\n        <VerticalForm<UserData>\n          onSubmit={onSubmit}\n          resolver={schemaResolver}\n          defaultValues={{ username: 'test@gmail.com', password: 'test' }}>\n          <FormInput\n            label={t('Username')}\n            type=\"text\"\n            name=\"username\"\n            placeholder={t('Enter your Username')}\n            containerClass={'mb-3'}\n          />\n          <FormInput\n            label={t('Password')}\n            type=\"password\"\n            name=\"password\"\n            placeholder={t('Enter your password')}\n            containerClass={'mb-3'}>\n            <Link to=\"/account/forget-password\" className=\"text-muted float-end\">\n              <small>{t('Forgot your password?')}</small>\n            </Link>\n          </FormInput>\n          <div className=\"mb-3 mb-0 text-center\">\n            <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n              {t('Log In')}\n            </Button>\n          </div>\n\n          <div className=\"pt-3 mb-3 mb-0 text-center border-top\">\n            <OAuthButton type=\"naver\" loading={loading} />\n            <OAuthButton type=\"google\" loading={loading} />\n          </div>\n        </VerticalForm>\n      </AccountLayout>\n    </>\n  );\n};\n\nexport default Login;\n","import { Button } from 'react-bootstrap';\nimport naverIcon from 'assets/images/btnW_icon_circle.png';\nimport googleIcon from 'assets/images/google.png';\nimport config from 'config';\n\ntype Props = {\n  type: string;\n  loading: boolean;\n};\n\nconst OAuthButton = ({ type, loading }: Props) => {\n  return (\n    <Button\n      href={`${config.API_URL}/oauth2/authorization/${type}?redirect_uri=${config.WEB_URL}/account/oauth`}\n      className=\"signin-button\"\n      variant=\"primary\"\n      type=\"submit\"\n      disabled={loading}>\n      <img\n        className=\"signin-icon\"\n        src={type === 'naver' ? naverIcon : googleIcon}\n        alt={type === 'naver' ? 'Naver' : 'Google' + ' Icon'}\n      />{' '}\n      Sign in with\n      {type === 'naver' ? ' Naver' : ' Google'}\n    </Button>\n  );\n};\n\nexport default OAuthButton;\n","import { useEffect } from 'react';\n\nexport default function useAccountLayout() {\n  useEffect(() => {\n    if (document.body) document.body.classList.add('authentication-bg');\n\n    return () => {\n      if (document.body) document.body.classList.remove('authentication-bg');\n    };\n  }, []);\n}\n","import { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { resetAuth, forgotPassword } from 'redux/actions';\nimport { useRedux } from 'hooks';\nimport { UserData } from '../ForgetPassword';\n\nexport default function useForgetPassword() {\n  const { dispatch, appSelector } = useRedux();\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    dispatch(resetAuth());\n  }, [dispatch]);\n\n  const { loading, passwordReset, resetPasswordSuccess, error } = appSelector((state) => ({\n    loading: state.Auth.loading,\n    user: state.Auth.user,\n    error: state.Auth.error,\n    passwordReset: state.Auth.passwordReset,\n    resetPasswordSuccess: state.Auth.resetPasswordSuccess,\n  }));\n\n  /*\n   * form validation schema\n   */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      username: yup.string().required(t('Please enter Username')),\n    })\n  );\n\n  /*\n   * handle form submission\n   */\n  const onSubmit = (formData: UserData) => {\n    dispatch(forgotPassword(formData['username']));\n  };\n\n  return {\n    loading,\n    passwordReset,\n    resetPasswordSuccess,\n    error,\n    schemaResolver,\n    onSubmit,\n  };\n}\n","import { useEffect } from 'react';\nimport { Location, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { resetAuth, loginUser } from 'redux/actions';\nimport { useRedux } from 'hooks';\nimport { UserData } from '../Login';\n\ntype LocationState = {\n  from?: Location;\n};\n\nexport default function useLogin() {\n  const { t } = useTranslation();\n  const { dispatch, appSelector } = useRedux();\n\n  const location: Location = useLocation();\n  let redirectUrl = '/';\n\n  if (location.state) {\n    const { from } = location.state as LocationState;\n    redirectUrl = from ? from.pathname : '/';\n  }\n\n  useEffect(() => {\n    dispatch(resetAuth());\n  }, [dispatch]);\n\n  const { loading, userLoggedIn, user, error } = appSelector((state) => ({\n    loading: state.Auth.loading as boolean,\n    user: state.Auth.user,\n    error: state.Auth.error,\n    userLoggedIn: state.Auth.userLoggedIn,\n  }));\n\n  /*\n    form validation schema\n    */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      username: yup.string().required(t('Please enter username')),\n      password: yup.string().required(t('Please enter password')),\n    })\n  );\n\n  /*\n    handle form submission\n    */\n  const onSubmit = (formData: UserData) => {\n    dispatch(loginUser(formData['username'], formData['password']));\n  };\n\n  return {\n    loading,\n    userLoggedIn,\n    user,\n    error,\n    schemaResolver,\n    onSubmit,\n    redirectUrl,\n  };\n}\n","import { useEffect } from 'react';\nimport { Location, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { resetAuth, oauthLoginUser } from 'redux/actions';\nimport { useRedux } from 'hooks';\n\ntype LocationState = {\n  from?: Location;\n};\n\nexport default function useOAuthLogin() {\n  const { t } = useTranslation();\n  const { dispatch, appSelector } = useRedux();\n\n  const location: Location = useLocation();\n  let redirectUrl = '/';\n\n  if (location.state) {\n    const { from } = location.state as LocationState;\n    redirectUrl = from ? from.pathname : '/';\n  }\n\n  useEffect(() => {\n    dispatch(resetAuth());\n  }, [dispatch]);\n\n  const { loading, userLoggedIn, user, error } = appSelector((state) => ({\n    loading: state.Auth.loading,\n    user: state.Auth.user,\n    error: state.Auth.error,\n    userLoggedIn: state.Auth.userLoggedIn,\n  }));\n\n  /*\n    handle form submission\n    */\n  const onSubmit = (token: string) => {\n    dispatch(oauthLoginUser(token));\n  };\n\n  return {\n    loading,\n    userLoggedIn,\n    user,\n    error,\n    onSubmit,\n    redirectUrl,\n  };\n}\n","import { useEffect } from 'react';\nimport { logoutUser } from 'redux/actions';\nimport { useRedux } from 'hooks';\n\nexport default function useLogout() {\n  const { dispatch } = useRedux();\n\n  useEffect(() => {\n    dispatch(logoutUser());\n  }, [dispatch]);\n}\n","import { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { resetAuth, signupUser } from 'redux/actions';\nimport { useRedux } from 'hooks';\nimport { UserData } from '../Register';\n\nexport default function useRegister() {\n  const { t } = useTranslation();\n  const { dispatch, appSelector } = useRedux();\n\n  const { loading, userSignUp, error } = appSelector((state) => ({\n    loading: state.Auth.loading,\n    error: state.Auth.error,\n    userSignUp: state.Auth.userSignUp,\n  }));\n\n  useEffect(() => {\n    dispatch(resetAuth());\n  }, [dispatch]);\n\n  /*\n   * form validation schema\n   */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      fullname: yup.string().required(t('Please enter your full name')),\n      email: yup.string().required('Please enter your email').email('Please enter a valid email address'),\n      password: yup.string().required(t('Please enter password')),\n      confirmPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match'),\n      checkboxsignup: yup.boolean().oneOf([true], 'You must agree to the terms and conditions'),\n    })\n  );\n\n  /*\n   * handle form submission\n   */\n  const onSubmit = (formData: UserData) => {\n    dispatch(signupUser(formData['fullname'], formData['email'], formData['password']));\n  };\n\n  return {\n    loading,\n    userSignUp,\n    error,\n    schemaResolver,\n    onSubmit,\n  };\n}\n"],"names":["bottomLinks","children","t","useTranslation","useAccountLayout","className","md","lg","xl","xxl","to","src","Logo","alt","height","BottomLink","useLogin","loading","userLoggedIn","user","error","schemaResolver","onSubmit","redirectUrl","replace","variant","resolver","defaultValues","username","password","label","type","name","placeholder","containerClass","disabled","href","config","naverIcon","googleIcon","useEffect","document","body","classList","add","remove","useForgetPassword","useRedux","dispatch","appSelector","resetAuth","state","Auth","passwordReset","resetPasswordSuccess","yupResolver","yup","shape","required","formData","forgotPassword","location","useLocation","from","pathname","loginUser","useOAuthLogin","token","oauthLoginUser","useLogout","logoutUser","useRegister","userSignUp","fullname","email","confirmPassword","oneOf","checkboxsignup","signupUser"],"sourceRoot":""}